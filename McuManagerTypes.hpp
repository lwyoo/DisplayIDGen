/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201809030231.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_Types_HPP_
#define V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/ByteBuffer.hpp>
#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace proj {
namespace dcluster {
namespace McuManager {

struct McuManagerTypes {
    
    struct EnumValueDisplayType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            VALUE_NOT_DISPLAY = 0,
            VALUE_DISPLAY = 1,
            VALUE_DISPLAY_BLINKING = 2,
            VALUE_DISPLAY_DASH = 3,
            VALUE_DISPLAY_DASH_BLINKING = 4,
            VALUE_MAX = 5
        };
    
        EnumValueDisplayType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::VALUE_NOT_DISPLAY)) {}
        EnumValueDisplayType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::VALUE_NOT_DISPLAY):
                case static_cast< int32_t>(Literal::VALUE_DISPLAY):
                case static_cast< int32_t>(Literal::VALUE_DISPLAY_BLINKING):
                case static_cast< int32_t>(Literal::VALUE_DISPLAY_DASH):
                case static_cast< int32_t>(Literal::VALUE_DISPLAY_DASH_BLINKING):
                case static_cast< int32_t>(Literal::VALUE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumValueDisplayType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumValueDisplayType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumValueDisplayType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumValueDisplayType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumValueDisplayType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumValueDisplayType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumDrivingState : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            DRIVE_STATE_PARKING = 0,
            DRIVE_STATE_DRIVING = 1,
            DRIVE_STATE_MAX = 2
        };
    
        EnumDrivingState()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::DRIVE_STATE_PARKING)) {}
        EnumDrivingState(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::DRIVE_STATE_PARKING):
                case static_cast< int32_t>(Literal::DRIVE_STATE_DRIVING):
                case static_cast< int32_t>(Literal::DRIVE_STATE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumDrivingState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumDrivingState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumDrivingState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumDrivingState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumDrivingState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumDrivingState &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumLanguageType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            LANGUAGE_TYPE_NONE = 0,
            LANGUAGE_TYPE_KOREA = 1,
            LANGUAGE_TYPE_ENGLISH_US = 2,
            LANGUAGE_TYPE_ENGLISH_UK = 3,
            LANGUAGE_TYPE_SIMPLIFIED_CHINESE = 4,
            LANGUAGE_TYPE_TRADITIONAL_CHINESE = 5,
            LANGUAGE_TYPE_FRENCH_EU = 6,
            LANGUAGE_TYPE_SPANISH_EU = 7,
            LANGUAGE_TYPE_ARABIC = 8,
            LANGUAGE_TYPE_CZEC = 9,
            LANGUAGE_TYPE_DANISH = 10,
            LANGUAGE_TYPE_GERMAN = 11,
            LANGUAGE_TYPE_ITALIA = 12,
            LANGUAGE_TYPE_DUTCH = 13,
            LANGUAGE_TYPE_POLISH = 14,
            LANGUAGE_TYPE_PORTUGUESE = 15,
            LANGUAGE_TYPE_RUSSAIN = 16,
            LANGUAGE_TYPE_SLOVAK = 17,
            LANGUAGE_TYPE_SWEDISH = 18,
            LANGUAGE_TYPE_TURKISH = 19,
            LANGUAGE_TYPE_FRENCH_US = 20,
            LANGUAGE_TYPE_SPANISH_US = 21,
            LANGUAGE_TYPE_ENGLISH_INDIA = 22,
            LANGUAGE_TYPE_NORWEGIAN = 23,
            LANGUAGE_TYPE_FINNISH = 24,
            LANGUAGE_TYPE_INDONESIAN = 25,
            LANGUAGE_TYPE_BRAZILIAN_PORTUGUESE = 26,
            LANGUAGE_TYPE_MALAY = 27,
            LANGUAGE_TYPE_HUNGARIAN = 28,
            LANGUAGE_TYPE_ENGLISH_AUS = 29,
            LANGUAGE_TYPE_JAPANESE = 30,
            LANGUAGE_TYPE_MAX = 31
        };
    
        EnumLanguageType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::LANGUAGE_TYPE_NONE)) {}
        EnumLanguageType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_NONE):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_KOREA):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_ENGLISH_US):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_ENGLISH_UK):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_SIMPLIFIED_CHINESE):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_TRADITIONAL_CHINESE):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_FRENCH_EU):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_SPANISH_EU):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_ARABIC):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_CZEC):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_DANISH):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_GERMAN):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_ITALIA):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_DUTCH):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_POLISH):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_PORTUGUESE):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_RUSSAIN):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_SLOVAK):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_SWEDISH):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_TURKISH):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_FRENCH_US):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_SPANISH_US):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_ENGLISH_INDIA):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_NORWEGIAN):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_FINNISH):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_INDONESIAN):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_BRAZILIAN_PORTUGUESE):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_MALAY):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_HUNGARIAN):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_ENGLISH_AUS):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_JAPANESE):
                case static_cast< int32_t>(Literal::LANGUAGE_TYPE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumLanguageType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumLanguageType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumLanguageType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumLanguageType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumLanguageType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumLanguageType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumAreaType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            AREA_TYPE_NONE = 0,
            AREA_TYPE_DOM = 1,
            AREA_TYPE_GEN = 2,
            AREA_TYPE_MES = 3,
            AREA_TYPE_EEC = 4,
            AREA_TYPE_AUS = 5,
            AREA_TYPE_CAN = 6,
            AREA_TYPE_USA = 7,
            AREA_TYPE_RUSSIA = 8,
            AREA_TYPE_BRZ = 9,
            AREA_TYPE_CHINA = 10,
            AREA_TYPE_MAX = 11
        };
    
        EnumAreaType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::AREA_TYPE_NONE)) {}
        EnumAreaType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::AREA_TYPE_NONE):
                case static_cast< int32_t>(Literal::AREA_TYPE_DOM):
                case static_cast< int32_t>(Literal::AREA_TYPE_GEN):
                case static_cast< int32_t>(Literal::AREA_TYPE_MES):
                case static_cast< int32_t>(Literal::AREA_TYPE_EEC):
                case static_cast< int32_t>(Literal::AREA_TYPE_AUS):
                case static_cast< int32_t>(Literal::AREA_TYPE_CAN):
                case static_cast< int32_t>(Literal::AREA_TYPE_USA):
                case static_cast< int32_t>(Literal::AREA_TYPE_RUSSIA):
                case static_cast< int32_t>(Literal::AREA_TYPE_BRZ):
                case static_cast< int32_t>(Literal::AREA_TYPE_CHINA):
                case static_cast< int32_t>(Literal::AREA_TYPE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumAreaType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumAreaType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumAreaType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumAreaType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumAreaType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumAreaType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumEngineType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            ENGINE_TYPE_NONE = 0,
            ENGINE_TYPE_GASOLINE = 1,
            ENGINE_TYPE_DIESEL = 2,
            ENGINE_TYPE_MAX = 3
        };
    
        EnumEngineType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::ENGINE_TYPE_NONE)) {}
        EnumEngineType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::ENGINE_TYPE_NONE):
                case static_cast< int32_t>(Literal::ENGINE_TYPE_GASOLINE):
                case static_cast< int32_t>(Literal::ENGINE_TYPE_DIESEL):
                case static_cast< int32_t>(Literal::ENGINE_TYPE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumEngineType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumEngineType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumEngineType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumEngineType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumEngineType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumEngineType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumSpeedoType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            SPEEDO_TYPE_NONE = 0,
            SPEEDO_TYPE_KM = 1,
            SPEEDO_TYPE_MILE = 2,
            SPEEDO_TYPE_MAX = 3
        };
    
        EnumSpeedoType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::SPEEDO_TYPE_NONE)) {}
        EnumSpeedoType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::SPEEDO_TYPE_NONE):
                case static_cast< int32_t>(Literal::SPEEDO_TYPE_KM):
                case static_cast< int32_t>(Literal::SPEEDO_TYPE_MILE):
                case static_cast< int32_t>(Literal::SPEEDO_TYPE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumSpeedoType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumSpeedoType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumSpeedoType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumSpeedoType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumSpeedoType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumSpeedoType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumMissionType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            MISSION_TYPE_NONE = 0,
            MISSION_TYPE_MANUAL = 1,
            MISSION_TYPE_AUTOMATIC = 2,
            MISSION_TYPE_MAX = 3
        };
    
        EnumMissionType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::MISSION_TYPE_NONE)) {}
        EnumMissionType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::MISSION_TYPE_NONE):
                case static_cast< int32_t>(Literal::MISSION_TYPE_MANUAL):
                case static_cast< int32_t>(Literal::MISSION_TYPE_AUTOMATIC):
                case static_cast< int32_t>(Literal::MISSION_TYPE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumMissionType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumMissionType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumMissionType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumMissionType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumMissionType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumMissionType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumBodyType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            BODY_TYPE_NONE = 0,
            BODY_TYPE_CUV = 1,
            BODY_TYPE_SB = 2,
            BODY_TYPE_WGN = 3,
            BODY_TYPE_5DR = 4,
            BODY_TYPE_MAX = 5
        };
    
        EnumBodyType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::BODY_TYPE_NONE)) {}
        EnumBodyType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::BODY_TYPE_NONE):
                case static_cast< int32_t>(Literal::BODY_TYPE_CUV):
                case static_cast< int32_t>(Literal::BODY_TYPE_SB):
                case static_cast< int32_t>(Literal::BODY_TYPE_WGN):
                case static_cast< int32_t>(Literal::BODY_TYPE_5DR):
                case static_cast< int32_t>(Literal::BODY_TYPE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumBodyType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumBodyType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumBodyType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumBodyType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumBodyType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumBodyType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumPlatformType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            PLATFORM_TYPE_NONE = 0,
            PLATFORM_TYPE_ALPHA = 1,
            PLATFORM_TYPE_BETA = 2,
            PLATFORM_TYPE_GAMMA = 3,
            PLATFORM_TYPE_DELTA = 4,
            PLATFORM_TYPE_12_3_CUV = 5,
            PLATFORM_TYPE_12_3_48V_HEV = 6,
            PLATFORM_TYPE_12_3_GT_N = 7,
            PLATFORM_TYPE_12_3_GT_LINE = 8,
            PLATFORM_TYPE_MAX = 9
        };
    
        EnumPlatformType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::PLATFORM_TYPE_NONE)) {}
        EnumPlatformType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::PLATFORM_TYPE_NONE):
                case static_cast< int32_t>(Literal::PLATFORM_TYPE_ALPHA):
                case static_cast< int32_t>(Literal::PLATFORM_TYPE_BETA):
                case static_cast< int32_t>(Literal::PLATFORM_TYPE_GAMMA):
                case static_cast< int32_t>(Literal::PLATFORM_TYPE_DELTA):
                case static_cast< int32_t>(Literal::PLATFORM_TYPE_12_3_CUV):
                case static_cast< int32_t>(Literal::PLATFORM_TYPE_12_3_48V_HEV):
                case static_cast< int32_t>(Literal::PLATFORM_TYPE_12_3_GT_N):
                case static_cast< int32_t>(Literal::PLATFORM_TYPE_12_3_GT_LINE):
                case static_cast< int32_t>(Literal::PLATFORM_TYPE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumPlatformType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumPlatformType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumPlatformType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumPlatformType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumPlatformType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumPlatformType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StVariantInfo : CommonAPI::Struct< EnumLanguageType, EnumSpeedoType, EnumAreaType, EnumEngineType, EnumBodyType, EnumPlatformType> {
    
        StVariantInfo()
        {
            std::get< 0>(values_) = EnumLanguageType();
            std::get< 1>(values_) = EnumSpeedoType();
            std::get< 2>(values_) = EnumAreaType();
            std::get< 3>(values_) = EnumEngineType();
            std::get< 4>(values_) = EnumBodyType();
            std::get< 5>(values_) = EnumPlatformType();
        }
        StVariantInfo(const EnumLanguageType &_language, const EnumSpeedoType &_speedo_type, const EnumAreaType &_area, const EnumEngineType &_engine_type, const EnumBodyType &_body_type, const EnumPlatformType &_platform_type)
        {
            std::get< 0>(values_) = _language;
            std::get< 1>(values_) = _speedo_type;
            std::get< 2>(values_) = _area;
            std::get< 3>(values_) = _engine_type;
            std::get< 4>(values_) = _body_type;
            std::get< 5>(values_) = _platform_type;
        }
        inline const EnumLanguageType &getLanguage() const { return std::get< 0>(values_); }
        inline void setLanguage(const EnumLanguageType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumSpeedoType &getSpeedo_type() const { return std::get< 1>(values_); }
        inline void setSpeedo_type(const EnumSpeedoType &_value) { std::get< 1>(values_) = _value; }
        inline const EnumAreaType &getArea() const { return std::get< 2>(values_); }
        inline void setArea(const EnumAreaType &_value) { std::get< 2>(values_) = _value; }
        inline const EnumEngineType &getEngine_type() const { return std::get< 3>(values_); }
        inline void setEngine_type(const EnumEngineType &_value) { std::get< 3>(values_) = _value; }
        inline const EnumBodyType &getBody_type() const { return std::get< 4>(values_); }
        inline void setBody_type(const EnumBodyType &_value) { std::get< 4>(values_) = _value; }
        inline const EnumPlatformType &getPlatform_type() const { return std::get< 5>(values_); }
        inline void setPlatform_type(const EnumPlatformType &_value) { std::get< 5>(values_) = _value; }
        inline bool operator==(const StVariantInfo& _other) const {
        return (getLanguage() == _other.getLanguage() && getSpeedo_type() == _other.getSpeedo_type() && getArea() == _other.getArea() && getEngine_type() == _other.getEngine_type() && getBody_type() == _other.getBody_type() && getPlatform_type() == _other.getPlatform_type());
        }
        inline bool operator!=(const StVariantInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StEOLInfo : CommonAPI::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, EnumMissionType> {
    
        StEOLInfo()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
            std::get< 3>(values_) = 0u;
            std::get< 4>(values_) = 0u;
            std::get< 5>(values_) = 0u;
            std::get< 6>(values_) = 0u;
            std::get< 7>(values_) = 0u;
            std::get< 8>(values_) = 0u;
            std::get< 9>(values_) = 0u;
            std::get< 10>(values_) = 0u;
            std::get< 11>(values_) = 0u;
            std::get< 12>(values_) = 0u;
            std::get< 13>(values_) = 0u;
            std::get< 14>(values_) = EnumMissionType();
        }
        StEOLInfo(const uint8_t &_ecs, const uint8_t &_airbag, const uint8_t &_mdps, const uint8_t &_abs, const uint8_t &_esc, const uint8_t &_epb, const uint8_t &_psb, const uint8_t &_afls, const uint8_t &_tpms, const uint8_t &_ldwslkas, const uint8_t &_scc, const uint8_t &_cubis, const uint8_t &__4wd, const uint8_t &_evp, const EnumMissionType &_mission)
        {
            std::get< 0>(values_) = _ecs;
            std::get< 1>(values_) = _airbag;
            std::get< 2>(values_) = _mdps;
            std::get< 3>(values_) = _abs;
            std::get< 4>(values_) = _esc;
            std::get< 5>(values_) = _epb;
            std::get< 6>(values_) = _psb;
            std::get< 7>(values_) = _afls;
            std::get< 8>(values_) = _tpms;
            std::get< 9>(values_) = _ldwslkas;
            std::get< 10>(values_) = _scc;
            std::get< 11>(values_) = _cubis;
            std::get< 12>(values_) = __4wd;
            std::get< 13>(values_) = _evp;
            std::get< 14>(values_) = _mission;
        }
        inline const uint8_t &getEcs() const { return std::get< 0>(values_); }
        inline void setEcs(const uint8_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getAirbag() const { return std::get< 1>(values_); }
        inline void setAirbag(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getMdps() const { return std::get< 2>(values_); }
        inline void setMdps(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline const uint8_t &getAbs() const { return std::get< 3>(values_); }
        inline void setAbs(const uint8_t &_value) { std::get< 3>(values_) = _value; }
        inline const uint8_t &getEsc() const { return std::get< 4>(values_); }
        inline void setEsc(const uint8_t &_value) { std::get< 4>(values_) = _value; }
        inline const uint8_t &getEpb() const { return std::get< 5>(values_); }
        inline void setEpb(const uint8_t &_value) { std::get< 5>(values_) = _value; }
        inline const uint8_t &getPsb() const { return std::get< 6>(values_); }
        inline void setPsb(const uint8_t &_value) { std::get< 6>(values_) = _value; }
        inline const uint8_t &getAfls() const { return std::get< 7>(values_); }
        inline void setAfls(const uint8_t &_value) { std::get< 7>(values_) = _value; }
        inline const uint8_t &getTpms() const { return std::get< 8>(values_); }
        inline void setTpms(const uint8_t &_value) { std::get< 8>(values_) = _value; }
        inline const uint8_t &getLdwslkas() const { return std::get< 9>(values_); }
        inline void setLdwslkas(const uint8_t &_value) { std::get< 9>(values_) = _value; }
        inline const uint8_t &getScc() const { return std::get< 10>(values_); }
        inline void setScc(const uint8_t &_value) { std::get< 10>(values_) = _value; }
        inline const uint8_t &getCubis() const { return std::get< 11>(values_); }
        inline void setCubis(const uint8_t &_value) { std::get< 11>(values_) = _value; }
        inline const uint8_t &get_4wd() const { return std::get< 12>(values_); }
        inline void set_4wd(const uint8_t &_value) { std::get< 12>(values_) = _value; }
        inline const uint8_t &getEvp() const { return std::get< 13>(values_); }
        inline void setEvp(const uint8_t &_value) { std::get< 13>(values_) = _value; }
        inline const EnumMissionType &getMission() const { return std::get< 14>(values_); }
        inline void setMission(const EnumMissionType &_value) { std::get< 14>(values_) = _value; }
        inline bool operator==(const StEOLInfo& _other) const {
        return (getEcs() == _other.getEcs() && getAirbag() == _other.getAirbag() && getMdps() == _other.getMdps() && getAbs() == _other.getAbs() && getEsc() == _other.getEsc() && getEpb() == _other.getEpb() && getPsb() == _other.getPsb() && getAfls() == _other.getAfls() && getTpms() == _other.getTpms() && getLdwslkas() == _other.getLdwslkas() && getScc() == _other.getScc() && getCubis() == _other.getCubis() && get_4wd() == _other.get_4wd() && getEvp() == _other.getEvp() && getMission() == _other.getMission());
        }
        inline bool operator!=(const StEOLInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StSWVariantInfo : CommonAPI::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t> {
    
        StSWVariantInfo()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
            std::get< 3>(values_) = 0u;
            std::get< 4>(values_) = 0u;
            std::get< 5>(values_) = 0u;
            std::get< 6>(values_) = 0u;
            std::get< 7>(values_) = 0u;
            std::get< 8>(values_) = 0u;
            std::get< 9>(values_) = 0u;
            std::get< 10>(values_) = 0u;
            std::get< 11>(values_) = 0u;
            std::get< 12>(values_) = 0u;
            std::get< 13>(values_) = 0u;
            std::get< 14>(values_) = 0u;
            std::get< 15>(values_) = 0u;
            std::get< 16>(values_) = 0u;
            std::get< 17>(values_) = 0u;
            std::get< 18>(values_) = 0u;
            std::get< 19>(values_) = 0u;
            std::get< 20>(values_) = 0u;
            std::get< 21>(values_) = 0u;
            std::get< 22>(values_) = 0u;
            std::get< 23>(values_) = 0u;
            std::get< 24>(values_) = 0u;
            std::get< 25>(values_) = 0u;
            std::get< 26>(values_) = 0u;
        }
        StSWVariantInfo(const uint8_t &_user_profile, const uint8_t &_lfa, const uint8_t &_avn_clu_usm, const uint8_t &_avn_tbt_unit, const uint8_t &_dct, const uint8_t &_aa, const uint8_t &_fca, const uint8_t &_avn, const uint8_t &_bcw, const uint8_t &_hba, const uint8_t &_smart_shift, const uint8_t &_amp, const uint8_t &_islw_popup, const uint8_t &_islw_page, const uint8_t &_fcw, const uint8_t &_hud, const uint8_t &_scr, const uint8_t &_fwiper_type, const uint8_t &_auto_light, const uint8_t &_light_type, const uint8_t &_avn_av, const uint8_t &_avn_tbt, const uint8_t &_tpms, const uint8_t &_offroad, const uint8_t &_sbw, const uint8_t &_avn_usm_lang, const uint8_t &_hda2)
        {
            std::get< 0>(values_) = _user_profile;
            std::get< 1>(values_) = _lfa;
            std::get< 2>(values_) = _avn_clu_usm;
            std::get< 3>(values_) = _avn_tbt_unit;
            std::get< 4>(values_) = _dct;
            std::get< 5>(values_) = _aa;
            std::get< 6>(values_) = _fca;
            std::get< 7>(values_) = _avn;
            std::get< 8>(values_) = _bcw;
            std::get< 9>(values_) = _hba;
            std::get< 10>(values_) = _smart_shift;
            std::get< 11>(values_) = _amp;
            std::get< 12>(values_) = _islw_popup;
            std::get< 13>(values_) = _islw_page;
            std::get< 14>(values_) = _fcw;
            std::get< 15>(values_) = _hud;
            std::get< 16>(values_) = _scr;
            std::get< 17>(values_) = _fwiper_type;
            std::get< 18>(values_) = _auto_light;
            std::get< 19>(values_) = _light_type;
            std::get< 20>(values_) = _avn_av;
            std::get< 21>(values_) = _avn_tbt;
            std::get< 22>(values_) = _tpms;
            std::get< 23>(values_) = _offroad;
            std::get< 24>(values_) = _sbw;
            std::get< 25>(values_) = _avn_usm_lang;
            std::get< 26>(values_) = _hda2;
        }
        inline const uint8_t &getUser_profile() const { return std::get< 0>(values_); }
        inline void setUser_profile(const uint8_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getLfa() const { return std::get< 1>(values_); }
        inline void setLfa(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getAvn_clu_usm() const { return std::get< 2>(values_); }
        inline void setAvn_clu_usm(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline const uint8_t &getAvn_tbt_unit() const { return std::get< 3>(values_); }
        inline void setAvn_tbt_unit(const uint8_t &_value) { std::get< 3>(values_) = _value; }
        inline const uint8_t &getDct() const { return std::get< 4>(values_); }
        inline void setDct(const uint8_t &_value) { std::get< 4>(values_) = _value; }
        inline const uint8_t &getAa() const { return std::get< 5>(values_); }
        inline void setAa(const uint8_t &_value) { std::get< 5>(values_) = _value; }
        inline const uint8_t &getFca() const { return std::get< 6>(values_); }
        inline void setFca(const uint8_t &_value) { std::get< 6>(values_) = _value; }
        inline const uint8_t &getAvn() const { return std::get< 7>(values_); }
        inline void setAvn(const uint8_t &_value) { std::get< 7>(values_) = _value; }
        inline const uint8_t &getBcw() const { return std::get< 8>(values_); }
        inline void setBcw(const uint8_t &_value) { std::get< 8>(values_) = _value; }
        inline const uint8_t &getHba() const { return std::get< 9>(values_); }
        inline void setHba(const uint8_t &_value) { std::get< 9>(values_) = _value; }
        inline const uint8_t &getSmart_shift() const { return std::get< 10>(values_); }
        inline void setSmart_shift(const uint8_t &_value) { std::get< 10>(values_) = _value; }
        inline const uint8_t &getAmp() const { return std::get< 11>(values_); }
        inline void setAmp(const uint8_t &_value) { std::get< 11>(values_) = _value; }
        inline const uint8_t &getIslw_popup() const { return std::get< 12>(values_); }
        inline void setIslw_popup(const uint8_t &_value) { std::get< 12>(values_) = _value; }
        inline const uint8_t &getIslw_page() const { return std::get< 13>(values_); }
        inline void setIslw_page(const uint8_t &_value) { std::get< 13>(values_) = _value; }
        inline const uint8_t &getFcw() const { return std::get< 14>(values_); }
        inline void setFcw(const uint8_t &_value) { std::get< 14>(values_) = _value; }
        inline const uint8_t &getHud() const { return std::get< 15>(values_); }
        inline void setHud(const uint8_t &_value) { std::get< 15>(values_) = _value; }
        inline const uint8_t &getScr() const { return std::get< 16>(values_); }
        inline void setScr(const uint8_t &_value) { std::get< 16>(values_) = _value; }
        inline const uint8_t &getFwiper_type() const { return std::get< 17>(values_); }
        inline void setFwiper_type(const uint8_t &_value) { std::get< 17>(values_) = _value; }
        inline const uint8_t &getAuto_light() const { return std::get< 18>(values_); }
        inline void setAuto_light(const uint8_t &_value) { std::get< 18>(values_) = _value; }
        inline const uint8_t &getLight_type() const { return std::get< 19>(values_); }
        inline void setLight_type(const uint8_t &_value) { std::get< 19>(values_) = _value; }
        inline const uint8_t &getAvn_av() const { return std::get< 20>(values_); }
        inline void setAvn_av(const uint8_t &_value) { std::get< 20>(values_) = _value; }
        inline const uint8_t &getAvn_tbt() const { return std::get< 21>(values_); }
        inline void setAvn_tbt(const uint8_t &_value) { std::get< 21>(values_) = _value; }
        inline const uint8_t &getTpms() const { return std::get< 22>(values_); }
        inline void setTpms(const uint8_t &_value) { std::get< 22>(values_) = _value; }
        inline const uint8_t &getOffroad() const { return std::get< 23>(values_); }
        inline void setOffroad(const uint8_t &_value) { std::get< 23>(values_) = _value; }
        inline const uint8_t &getSbw() const { return std::get< 24>(values_); }
        inline void setSbw(const uint8_t &_value) { std::get< 24>(values_) = _value; }
        inline const uint8_t &getAvn_usm_lang() const { return std::get< 25>(values_); }
        inline void setAvn_usm_lang(const uint8_t &_value) { std::get< 25>(values_) = _value; }
        inline const uint8_t &getHda2() const { return std::get< 26>(values_); }
        inline void setHda2(const uint8_t &_value) { std::get< 26>(values_) = _value; }
        inline bool operator==(const StSWVariantInfo& _other) const {
        return (getUser_profile() == _other.getUser_profile() && getLfa() == _other.getLfa() && getAvn_clu_usm() == _other.getAvn_clu_usm() && getAvn_tbt_unit() == _other.getAvn_tbt_unit() && getDct() == _other.getDct() && getAa() == _other.getAa() && getFca() == _other.getFca() && getAvn() == _other.getAvn() && getBcw() == _other.getBcw() && getHba() == _other.getHba() && getSmart_shift() == _other.getSmart_shift() && getAmp() == _other.getAmp() && getIslw_popup() == _other.getIslw_popup() && getIslw_page() == _other.getIslw_page() && getFcw() == _other.getFcw() && getHud() == _other.getHud() && getScr() == _other.getScr() && getFwiper_type() == _other.getFwiper_type() && getAuto_light() == _other.getAuto_light() && getLight_type() == _other.getLight_type() && getAvn_av() == _other.getAvn_av() && getAvn_tbt() == _other.getAvn_tbt() && getTpms() == _other.getTpms() && getOffroad() == _other.getOffroad() && getSbw() == _other.getSbw() && getAvn_usm_lang() == _other.getAvn_usm_lang() && getHda2() == _other.getHda2());
        }
        inline bool operator!=(const StSWVariantInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumStreerWheelKey : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            KEYEVT_DISP_NONE = 0,
            KEYEVT_DISP_PRESSED = 1,
            KEYEVT_DISP_RELEASED = 2,
            KEYEVT_SCROLL_UP_PRESSED = 3,
            KEYEVT_SCROLL_UP_RELEASED = 4,
            KEYEVT_SCROLL_UP_REPEAT_START = 5,
            KEYEVT_SCROLL_UP_REPEAT_END = 6,
            KEYEVT_SCROLL_DOWN_PRESSED = 7,
            KEYEVT_SCROLL_DOWN_RELEASED = 8,
            KEYEVT_SCROLL_DOWN_REPEAT_START = 9,
            KEYEVT_SCROLL_DOWN_REPEAT_END = 10,
            KEYEVT_OK_PRESSED = 11,
            KEYEVT_OK_RELEASED = 12,
            KEYEVT_OK_LONG = 13,
            KEYEVT_OK_LONG_5SEC = 14,
            KEYEVT_BACK_PRESSED = 15,
            KEYEVT_BACK_RELEASED = 16,
            KEYEVT_MAX = 17
        };
    
        EnumStreerWheelKey()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::KEYEVT_DISP_NONE)) {}
        EnumStreerWheelKey(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::KEYEVT_DISP_NONE):
                case static_cast< int32_t>(Literal::KEYEVT_DISP_PRESSED):
                case static_cast< int32_t>(Literal::KEYEVT_DISP_RELEASED):
                case static_cast< int32_t>(Literal::KEYEVT_SCROLL_UP_PRESSED):
                case static_cast< int32_t>(Literal::KEYEVT_SCROLL_UP_RELEASED):
                case static_cast< int32_t>(Literal::KEYEVT_SCROLL_UP_REPEAT_START):
                case static_cast< int32_t>(Literal::KEYEVT_SCROLL_UP_REPEAT_END):
                case static_cast< int32_t>(Literal::KEYEVT_SCROLL_DOWN_PRESSED):
                case static_cast< int32_t>(Literal::KEYEVT_SCROLL_DOWN_RELEASED):
                case static_cast< int32_t>(Literal::KEYEVT_SCROLL_DOWN_REPEAT_START):
                case static_cast< int32_t>(Literal::KEYEVT_SCROLL_DOWN_REPEAT_END):
                case static_cast< int32_t>(Literal::KEYEVT_OK_PRESSED):
                case static_cast< int32_t>(Literal::KEYEVT_OK_RELEASED):
                case static_cast< int32_t>(Literal::KEYEVT_OK_LONG):
                case static_cast< int32_t>(Literal::KEYEVT_OK_LONG_5SEC):
                case static_cast< int32_t>(Literal::KEYEVT_BACK_PRESSED):
                case static_cast< int32_t>(Literal::KEYEVT_BACK_RELEASED):
                case static_cast< int32_t>(Literal::KEYEVT_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumStreerWheelKey &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumStreerWheelKey &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumStreerWheelKey &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumStreerWheelKey &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumStreerWheelKey &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumStreerWheelKey &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumIGNState : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            IGN_STATE_NONE = 0,
            IGN_STATE_OFF = 1,
            IGN_STATE_ON = 2,
            IGN_STATE_MAX = 3
        };
    
        EnumIGNState()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::IGN_STATE_NONE)) {}
        EnumIGNState(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::IGN_STATE_NONE):
                case static_cast< int32_t>(Literal::IGN_STATE_OFF):
                case static_cast< int32_t>(Literal::IGN_STATE_ON):
                case static_cast< int32_t>(Literal::IGN_STATE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumIGNState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumIGNState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumIGNState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumIGNState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumIGNState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumIGNState &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumSpeedoUnit : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            SPEEDO_UNIT_NONE = 0,
            SPEEDO_UNIT_KM = 1,
            SPEEDO_UNIT_MILE = 2,
            SPEEDO_UNIT_MAX = 3
        };
    
        EnumSpeedoUnit()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::SPEEDO_UNIT_NONE)) {}
        EnumSpeedoUnit(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::SPEEDO_UNIT_NONE):
                case static_cast< int32_t>(Literal::SPEEDO_UNIT_KM):
                case static_cast< int32_t>(Literal::SPEEDO_UNIT_MILE):
                case static_cast< int32_t>(Literal::SPEEDO_UNIT_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumSpeedoUnit &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumSpeedoUnit &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumSpeedoUnit &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumSpeedoUnit &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumSpeedoUnit &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumSpeedoUnit &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumTemperatureUnit : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TEMP_UNIT_NONE = 0,
            TEMP_UNIT_C = 1,
            TEMP_UNIT_F = 2,
            TEMP_UNIT_MAX = 3
        };
    
        EnumTemperatureUnit()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TEMP_UNIT_NONE)) {}
        EnumTemperatureUnit(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TEMP_UNIT_NONE):
                case static_cast< int32_t>(Literal::TEMP_UNIT_C):
                case static_cast< int32_t>(Literal::TEMP_UNIT_F):
                case static_cast< int32_t>(Literal::TEMP_UNIT_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumTemperatureUnit &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumTemperatureUnit &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumTemperatureUnit &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumTemperatureUnit &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumTemperatureUnit &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumTemperatureUnit &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumFuelUnit : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            FUEL_UNIT_NONE = 0,
            FUEL_UNIT_KM_PER_L = 1,
            FUEL_UNIT_L_PER_100KM = 2,
            FUEL_UNIT_MPG_USA = 3,
            FUEL_UNIT_MPG_UK = 4,
            FUEL_UNIT_MAX = 5
        };
    
        EnumFuelUnit()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::FUEL_UNIT_NONE)) {}
        EnumFuelUnit(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::FUEL_UNIT_NONE):
                case static_cast< int32_t>(Literal::FUEL_UNIT_KM_PER_L):
                case static_cast< int32_t>(Literal::FUEL_UNIT_L_PER_100KM):
                case static_cast< int32_t>(Literal::FUEL_UNIT_MPG_USA):
                case static_cast< int32_t>(Literal::FUEL_UNIT_MPG_UK):
                case static_cast< int32_t>(Literal::FUEL_UNIT_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumFuelUnit &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumFuelUnit &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumFuelUnit &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumFuelUnit &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumFuelUnit &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumFuelUnit &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StTripValue8 : CommonAPI::Struct< EnumValueDisplayType, uint8_t> {
    
        StTripValue8()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = 0u;
        }
        StTripValue8(const EnumValueDisplayType &_type, const uint8_t &_value)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _value;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getValue() const { return std::get< 1>(values_); }
        inline void setValue(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StTripValue8& _other) const {
        return (getType() == _other.getType() && getValue() == _other.getValue());
        }
        inline bool operator!=(const StTripValue8 &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StTripValue16 : CommonAPI::Struct< EnumValueDisplayType, uint16_t> {
    
        StTripValue16()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = 0u;
        }
        StTripValue16(const EnumValueDisplayType &_type, const uint16_t &_value)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _value;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint16_t &getValue() const { return std::get< 1>(values_); }
        inline void setValue(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StTripValue16& _other) const {
        return (getType() == _other.getType() && getValue() == _other.getValue());
        }
        inline bool operator!=(const StTripValue16 &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StTripValue32 : CommonAPI::Struct< EnumValueDisplayType, uint32_t> {
    
        StTripValue32()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = 0ul;
        }
        StTripValue32(const EnumValueDisplayType &_type, const uint32_t &_value)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _value;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint32_t &getValue() const { return std::get< 1>(values_); }
        inline void setValue(const uint32_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StTripValue32& _other) const {
        return (getType() == _other.getType() && getValue() == _other.getValue());
        }
        inline bool operator!=(const StTripValue32 &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StTripDTEInfo : CommonAPI::Struct< StTripValue16, StTripValue16, EnumSpeedoUnit> {
    
        StTripDTEInfo()
        {
            std::get< 0>(values_) = StTripValue16();
            std::get< 1>(values_) = StTripValue16();
            std::get< 2>(values_) = EnumSpeedoUnit();
        }
        StTripDTEInfo(const StTripValue16 &_fuel, const StTripValue16 &_ev, const EnumSpeedoUnit &_speedo_unit)
        {
            std::get< 0>(values_) = _fuel;
            std::get< 1>(values_) = _ev;
            std::get< 2>(values_) = _speedo_unit;
        }
        inline const StTripValue16 &getFuel() const { return std::get< 0>(values_); }
        inline void setFuel(const StTripValue16 &_value) { std::get< 0>(values_) = _value; }
        inline const StTripValue16 &getEv() const { return std::get< 1>(values_); }
        inline void setEv(const StTripValue16 &_value) { std::get< 1>(values_) = _value; }
        inline const EnumSpeedoUnit &getSpeedo_unit() const { return std::get< 2>(values_); }
        inline void setSpeedo_unit(const EnumSpeedoUnit &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StTripDTEInfo& _other) const {
        return (getFuel() == _other.getFuel() && getEv() == _other.getEv() && getSpeedo_unit() == _other.getSpeedo_unit());
        }
        inline bool operator!=(const StTripDTEInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StTripFuelEconomyInfo : CommonAPI::Struct< StTripValue16, StTripValue16, EnumFuelUnit, bool> {
    
        StTripFuelEconomyInfo()
        {
            std::get< 0>(values_) = StTripValue16();
            std::get< 1>(values_) = StTripValue16();
            std::get< 2>(values_) = EnumFuelUnit();
            std::get< 3>(values_) = false;
        }
        StTripFuelEconomyInfo(const StTripValue16 &_avg_fuel_eco, const StTripValue16 &_instantaneous_fuel_eco, const EnumFuelUnit &_unit, const bool &_animation)
        {
            std::get< 0>(values_) = _avg_fuel_eco;
            std::get< 1>(values_) = _instantaneous_fuel_eco;
            std::get< 2>(values_) = _unit;
            std::get< 3>(values_) = _animation;
        }
        inline const StTripValue16 &getAvg_fuel_eco() const { return std::get< 0>(values_); }
        inline void setAvg_fuel_eco(const StTripValue16 &_value) { std::get< 0>(values_) = _value; }
        inline const StTripValue16 &getInstantaneous_fuel_eco() const { return std::get< 1>(values_); }
        inline void setInstantaneous_fuel_eco(const StTripValue16 &_value) { std::get< 1>(values_) = _value; }
        inline const EnumFuelUnit &getUnit() const { return std::get< 2>(values_); }
        inline void setUnit(const EnumFuelUnit &_value) { std::get< 2>(values_) = _value; }
        inline const bool &getAnimation() const { return std::get< 3>(values_); }
        inline void setAnimation(const bool _value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const StTripFuelEconomyInfo& _other) const {
        return (getAvg_fuel_eco() == _other.getAvg_fuel_eco() && getInstantaneous_fuel_eco() == _other.getInstantaneous_fuel_eco() && getUnit() == _other.getUnit() && getAnimation() == _other.getAnimation());
        }
        inline bool operator!=(const StTripFuelEconomyInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StTripAccumulatedInfo : CommonAPI::Struct< StTripValue32, StTripValue16, StTripValue16, StTripValue16, EnumSpeedoUnit, EnumFuelUnit> {
    
        StTripAccumulatedInfo()
        {
            std::get< 0>(values_) = StTripValue32();
            std::get< 1>(values_) = StTripValue16();
            std::get< 2>(values_) = StTripValue16();
            std::get< 3>(values_) = StTripValue16();
            std::get< 4>(values_) = EnumSpeedoUnit();
            std::get< 5>(values_) = EnumFuelUnit();
        }
        StTripAccumulatedInfo(const StTripValue32 &_trip_meter, const StTripValue16 &_avg_fuel_eco, const StTripValue16 &_elapsed_time, const StTripValue16 &_avg_vehicle_speed, const EnumSpeedoUnit &_speedo_unit, const EnumFuelUnit &_fuel_unit)
        {
            std::get< 0>(values_) = _trip_meter;
            std::get< 1>(values_) = _avg_fuel_eco;
            std::get< 2>(values_) = _elapsed_time;
            std::get< 3>(values_) = _avg_vehicle_speed;
            std::get< 4>(values_) = _speedo_unit;
            std::get< 5>(values_) = _fuel_unit;
        }
        inline const StTripValue32 &getTrip_meter() const { return std::get< 0>(values_); }
        inline void setTrip_meter(const StTripValue32 &_value) { std::get< 0>(values_) = _value; }
        inline const StTripValue16 &getAvg_fuel_eco() const { return std::get< 1>(values_); }
        inline void setAvg_fuel_eco(const StTripValue16 &_value) { std::get< 1>(values_) = _value; }
        inline const StTripValue16 &getElapsed_time() const { return std::get< 2>(values_); }
        inline void setElapsed_time(const StTripValue16 &_value) { std::get< 2>(values_) = _value; }
        inline const StTripValue16 &getAvg_vehicle_speed() const { return std::get< 3>(values_); }
        inline void setAvg_vehicle_speed(const StTripValue16 &_value) { std::get< 3>(values_) = _value; }
        inline const EnumSpeedoUnit &getSpeedo_unit() const { return std::get< 4>(values_); }
        inline void setSpeedo_unit(const EnumSpeedoUnit &_value) { std::get< 4>(values_) = _value; }
        inline const EnumFuelUnit &getFuel_unit() const { return std::get< 5>(values_); }
        inline void setFuel_unit(const EnumFuelUnit &_value) { std::get< 5>(values_) = _value; }
        inline bool operator==(const StTripAccumulatedInfo& _other) const {
        return (getTrip_meter() == _other.getTrip_meter() && getAvg_fuel_eco() == _other.getAvg_fuel_eco() && getElapsed_time() == _other.getElapsed_time() && getAvg_vehicle_speed() == _other.getAvg_vehicle_speed() && getSpeedo_unit() == _other.getSpeedo_unit() && getFuel_unit() == _other.getFuel_unit());
        }
        inline bool operator!=(const StTripAccumulatedInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StTripDriveInfo : CommonAPI::Struct< StTripValue32, StTripValue16, StTripValue16, StTripValue16, EnumSpeedoUnit, EnumFuelUnit> {
    
        StTripDriveInfo()
        {
            std::get< 0>(values_) = StTripValue32();
            std::get< 1>(values_) = StTripValue16();
            std::get< 2>(values_) = StTripValue16();
            std::get< 3>(values_) = StTripValue16();
            std::get< 4>(values_) = EnumSpeedoUnit();
            std::get< 5>(values_) = EnumFuelUnit();
        }
        StTripDriveInfo(const StTripValue32 &_trip_meter, const StTripValue16 &_avg_fuel_eco, const StTripValue16 &_elapsed_time, const StTripValue16 &_avg_vehicle_speed, const EnumSpeedoUnit &_speedo_unit, const EnumFuelUnit &_fuel_unit)
        {
            std::get< 0>(values_) = _trip_meter;
            std::get< 1>(values_) = _avg_fuel_eco;
            std::get< 2>(values_) = _elapsed_time;
            std::get< 3>(values_) = _avg_vehicle_speed;
            std::get< 4>(values_) = _speedo_unit;
            std::get< 5>(values_) = _fuel_unit;
        }
        inline const StTripValue32 &getTrip_meter() const { return std::get< 0>(values_); }
        inline void setTrip_meter(const StTripValue32 &_value) { std::get< 0>(values_) = _value; }
        inline const StTripValue16 &getAvg_fuel_eco() const { return std::get< 1>(values_); }
        inline void setAvg_fuel_eco(const StTripValue16 &_value) { std::get< 1>(values_) = _value; }
        inline const StTripValue16 &getElapsed_time() const { return std::get< 2>(values_); }
        inline void setElapsed_time(const StTripValue16 &_value) { std::get< 2>(values_) = _value; }
        inline const StTripValue16 &getAvg_vehicle_speed() const { return std::get< 3>(values_); }
        inline void setAvg_vehicle_speed(const StTripValue16 &_value) { std::get< 3>(values_) = _value; }
        inline const EnumSpeedoUnit &getSpeedo_unit() const { return std::get< 4>(values_); }
        inline void setSpeedo_unit(const EnumSpeedoUnit &_value) { std::get< 4>(values_) = _value; }
        inline const EnumFuelUnit &getFuel_unit() const { return std::get< 5>(values_); }
        inline void setFuel_unit(const EnumFuelUnit &_value) { std::get< 5>(values_) = _value; }
        inline bool operator==(const StTripDriveInfo& _other) const {
        return (getTrip_meter() == _other.getTrip_meter() && getAvg_fuel_eco() == _other.getAvg_fuel_eco() && getElapsed_time() == _other.getElapsed_time() && getAvg_vehicle_speed() == _other.getAvg_vehicle_speed() && getSpeedo_unit() == _other.getSpeedo_unit() && getFuel_unit() == _other.getFuel_unit());
        }
        inline bool operator!=(const StTripDriveInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StTripSpeedMeter : CommonAPI::Struct< StTripValue16, EnumSpeedoUnit> {
    
        StTripSpeedMeter()
        {
            std::get< 0>(values_) = StTripValue16();
            std::get< 1>(values_) = EnumSpeedoUnit();
        }
        StTripSpeedMeter(const StTripValue16 &_speed, const EnumSpeedoUnit &_unit)
        {
            std::get< 0>(values_) = _speed;
            std::get< 1>(values_) = _unit;
        }
        inline const StTripValue16 &getSpeed() const { return std::get< 0>(values_); }
        inline void setSpeed(const StTripValue16 &_value) { std::get< 0>(values_) = _value; }
        inline const EnumSpeedoUnit &getUnit() const { return std::get< 1>(values_); }
        inline void setUnit(const EnumSpeedoUnit &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StTripSpeedMeter& _other) const {
        return (getSpeed() == _other.getSpeed() && getUnit() == _other.getUnit());
        }
        inline bool operator!=(const StTripSpeedMeter &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumDriveMode : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            DMS_NONE = 0,
            DMS_COMFORT = 1,
            DMS_ECO = 2,
            DMS_SPORT = 3,
            DMS_ECOPLUS = 4,
            DMS_REST = 5,
            DMS_CUSTOM = 6,
            DMS_SPORT_PLUS = 7,
            DMS_SMART_COMFORT = 8,
            DMS_SMART_ECO = 9,
            DMS_SMART_SPORT = 10,
            DMS_SMART_INVALID_OFF = 11,
            DMS_SMART_4SEC_STATE = 12,
            DMS_SMART_TIMEOUT_OFF = 13,
            DMS_OFFROAD_SNOW = 14,
            DMS_OFFROAD_SAND = 15,
            DMS_OFFROAD_MUD = 16,
            DMS_MAX = 17
        };
    
        EnumDriveMode()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::DMS_NONE)) {}
        EnumDriveMode(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::DMS_NONE):
                case static_cast< int32_t>(Literal::DMS_COMFORT):
                case static_cast< int32_t>(Literal::DMS_ECO):
                case static_cast< int32_t>(Literal::DMS_SPORT):
                case static_cast< int32_t>(Literal::DMS_ECOPLUS):
                case static_cast< int32_t>(Literal::DMS_REST):
                case static_cast< int32_t>(Literal::DMS_CUSTOM):
                case static_cast< int32_t>(Literal::DMS_SPORT_PLUS):
                case static_cast< int32_t>(Literal::DMS_SMART_COMFORT):
                case static_cast< int32_t>(Literal::DMS_SMART_ECO):
                case static_cast< int32_t>(Literal::DMS_SMART_SPORT):
                case static_cast< int32_t>(Literal::DMS_SMART_INVALID_OFF):
                case static_cast< int32_t>(Literal::DMS_SMART_4SEC_STATE):
                case static_cast< int32_t>(Literal::DMS_SMART_TIMEOUT_OFF):
                case static_cast< int32_t>(Literal::DMS_OFFROAD_SNOW):
                case static_cast< int32_t>(Literal::DMS_OFFROAD_SAND):
                case static_cast< int32_t>(Literal::DMS_OFFROAD_MUD):
                case static_cast< int32_t>(Literal::DMS_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumDriveMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumDriveMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumDriveMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumDriveMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumDriveMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumDriveMode &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StDriveModeInfo : CommonAPI::Struct< EnumDriveMode, EnumDriveMode> {
    
        StDriveModeInfo()
        {
            std::get< 0>(values_) = EnumDriveMode();
            std::get< 1>(values_) = EnumDriveMode();
        }
        StDriveModeInfo(const EnumDriveMode &_mode, const EnumDriveMode &_telltale)
        {
            std::get< 0>(values_) = _mode;
            std::get< 1>(values_) = _telltale;
        }
        inline const EnumDriveMode &getMode() const { return std::get< 0>(values_); }
        inline void setMode(const EnumDriveMode &_value) { std::get< 0>(values_) = _value; }
        inline const EnumDriveMode &getTelltale() const { return std::get< 1>(values_); }
        inline void setTelltale(const EnumDriveMode &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StDriveModeInfo& _other) const {
        return (getMode() == _other.getMode() && getTelltale() == _other.getTelltale());
        }
        inline bool operator!=(const StDriveModeInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StDriveModeBar : CommonAPI::Struct< EnumValueDisplayType, uint8_t> {
    
        StDriveModeBar()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = 0u;
        }
        StDriveModeBar(const EnumValueDisplayType &_type, const uint8_t &_value)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _value;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getValue() const { return std::get< 1>(values_); }
        inline void setValue(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StDriveModeBar& _other) const {
        return (getType() == _other.getType() && getValue() == _other.getValue());
        }
        inline bool operator!=(const StDriveModeBar &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StTripDriveModeInfo : CommonAPI::Struct< EnumDriveMode, StDriveModeBar> {
    
        StTripDriveModeInfo()
        {
            std::get< 0>(values_) = EnumDriveMode();
            std::get< 1>(values_) = StDriveModeBar();
        }
        StTripDriveModeInfo(const EnumDriveMode &_mode, const StDriveModeBar &_bar)
        {
            std::get< 0>(values_) = _mode;
            std::get< 1>(values_) = _bar;
        }
        inline const EnumDriveMode &getMode() const { return std::get< 0>(values_); }
        inline void setMode(const EnumDriveMode &_value) { std::get< 0>(values_) = _value; }
        inline const StDriveModeBar &getBar() const { return std::get< 1>(values_); }
        inline void setBar(const StDriveModeBar &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StTripDriveModeInfo& _other) const {
        return (getMode() == _other.getMode() && getBar() == _other.getBar());
        }
        inline bool operator!=(const StTripDriveModeInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StEngineCoolantTemp : CommonAPI::Struct< EnumValueDisplayType, EnumTemperatureUnit, uint8_t> {
    
        StEngineCoolantTemp()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = EnumTemperatureUnit();
            std::get< 2>(values_) = 0u;
        }
        StEngineCoolantTemp(const EnumValueDisplayType &_type, const EnumTemperatureUnit &_unit, const uint8_t &_level)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _unit;
            std::get< 2>(values_) = _level;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumTemperatureUnit &getUnit() const { return std::get< 1>(values_); }
        inline void setUnit(const EnumTemperatureUnit &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getLevel() const { return std::get< 2>(values_); }
        inline void setLevel(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StEngineCoolantTemp& _other) const {
        return (getType() == _other.getType() && getUnit() == _other.getUnit() && getLevel() == _other.getLevel());
        }
        inline bool operator!=(const StEngineCoolantTemp &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumPowerFlow : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            POWER_FLOW_OFF = 0,
            POWER_FLOW_B_E_W = 1,
            POWER_FLOW_W_E_B = 2,
            POWER_FLOW_MAX = 3
        };
    
        EnumPowerFlow()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::POWER_FLOW_OFF)) {}
        EnumPowerFlow(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::POWER_FLOW_OFF):
                case static_cast< int32_t>(Literal::POWER_FLOW_B_E_W):
                case static_cast< int32_t>(Literal::POWER_FLOW_W_E_B):
                case static_cast< int32_t>(Literal::POWER_FLOW_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumPowerFlow &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumPowerFlow &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumPowerFlow &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumPowerFlow &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumPowerFlow &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumPowerFlow &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumTransmissionTempLevel : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TRSM_TEMP_LEVEL_1 = 0,
            TRSM_TEMP_LEVEL_2 = 1,
            TRSM_TEMP_LEVEL_3 = 2,
            TRSM_TEMP_LEVEL_4 = 3,
            TRSM_TEMP_LEVEL_5 = 4,
            TRSM_TEMP_LEVEL_6 = 5,
            TRSM_TEMP_LEVEL_7 = 6,
            TRSM_TEMP_LEVEL_8 = 7,
            TRSM_TEMP_LEVEL_9 = 8,
            TRSM_TEMP_LEVEL_10 = 9,
            TRSM_TEMP_LEVEL_11 = 10,
            TRSM_TEMP_LEVEL_12 = 11,
            TRSM_TEMP_LEVEL_13 = 12,
            TRSM_TEMP_LEVEL_14 = 13,
            TRSM_TEMP_LEVEL_15 = 14,
            TRSM_TEMP_LEVEL_16 = 15,
            TRSM_TEMP_LEVEL_0 = 254
        };
    
        EnumTransmissionTempLevel()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_1)) {}
        EnumTransmissionTempLevel(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_1):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_2):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_3):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_4):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_5):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_6):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_7):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_8):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_9):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_10):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_11):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_12):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_13):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_14):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_15):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_16):
                case static_cast< int32_t>(Literal::TRSM_TEMP_LEVEL_0):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumTransmissionTempLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumTransmissionTempLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumTransmissionTempLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumTransmissionTempLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumTransmissionTempLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumTransmissionTempLevel &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumTBTDisplayType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TBT_DISP_NONE = 0,
            TBT_DISP_LOADING = 1,
            TBT_DISP_FOLLOW_STREET = 2,
            TBT_DISP_DIR_DEST_WAYPOINT = 3,
            TBT_DISP_ARRIVED = 4,
            TBT_DISP_NO_ROUTE_GUIDE = 5,
            TBT_DISP_CALC_ROUTE = 6,
            TBT_DISP_RECALC_ROUTE = 7,
            TBT_DISP_TURN = 8,
            TBT_DISP_EXIT_R = 9,
            TBT_DISP_EXIT_L = 10,
            TBT_DISP_EXIT_COMBI_R = 11,
            TBT_DISP_EXIT_COMBI_L = 12,
            TBT_DISP_SERVICE_ROAD_R = 13,
            TBT_DISP_SERVICE_ROAD_L = 14,
            TBT_DISP_FORK = 15,
            TBT_DISP_U_TURN = 16,
            TBT_DISP_ROUND_ABOUT_R = 17,
            TBT_DISP_ROUND_ABOUT_L = 18,
            TBT_DISP_OVER_PASS_R = 19,
            TBT_DISP_OVER_PASS_L = 20,
            TBT_DISP_UNDER_PASS_R = 21,
            TBT_DISP_UNDER_PASS_L = 22,
            TBT_DISP_PRELIMINARY_INFO = 23,
            TBT_DISP_SD_CARD = 24,
            TBT_DISP_MAX = 25
        };
    
        EnumTBTDisplayType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TBT_DISP_NONE)) {}
        EnumTBTDisplayType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TBT_DISP_NONE):
                case static_cast< int32_t>(Literal::TBT_DISP_LOADING):
                case static_cast< int32_t>(Literal::TBT_DISP_FOLLOW_STREET):
                case static_cast< int32_t>(Literal::TBT_DISP_DIR_DEST_WAYPOINT):
                case static_cast< int32_t>(Literal::TBT_DISP_ARRIVED):
                case static_cast< int32_t>(Literal::TBT_DISP_NO_ROUTE_GUIDE):
                case static_cast< int32_t>(Literal::TBT_DISP_CALC_ROUTE):
                case static_cast< int32_t>(Literal::TBT_DISP_RECALC_ROUTE):
                case static_cast< int32_t>(Literal::TBT_DISP_TURN):
                case static_cast< int32_t>(Literal::TBT_DISP_EXIT_R):
                case static_cast< int32_t>(Literal::TBT_DISP_EXIT_L):
                case static_cast< int32_t>(Literal::TBT_DISP_EXIT_COMBI_R):
                case static_cast< int32_t>(Literal::TBT_DISP_EXIT_COMBI_L):
                case static_cast< int32_t>(Literal::TBT_DISP_SERVICE_ROAD_R):
                case static_cast< int32_t>(Literal::TBT_DISP_SERVICE_ROAD_L):
                case static_cast< int32_t>(Literal::TBT_DISP_FORK):
                case static_cast< int32_t>(Literal::TBT_DISP_U_TURN):
                case static_cast< int32_t>(Literal::TBT_DISP_ROUND_ABOUT_R):
                case static_cast< int32_t>(Literal::TBT_DISP_ROUND_ABOUT_L):
                case static_cast< int32_t>(Literal::TBT_DISP_OVER_PASS_R):
                case static_cast< int32_t>(Literal::TBT_DISP_OVER_PASS_L):
                case static_cast< int32_t>(Literal::TBT_DISP_UNDER_PASS_R):
                case static_cast< int32_t>(Literal::TBT_DISP_UNDER_PASS_L):
                case static_cast< int32_t>(Literal::TBT_DISP_PRELIMINARY_INFO):
                case static_cast< int32_t>(Literal::TBT_DISP_SD_CARD):
                case static_cast< int32_t>(Literal::TBT_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumTBTDisplayType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumTBTDisplayType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumTBTDisplayType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumTBTDisplayType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumTBTDisplayType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumTBTDisplayType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumTBTPageState : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TBT_PAGE_DISABLE = 0,
            TBT_PAGE_ENABLE = 1,
            TBT_PAGE_MAX = 2
        };
    
        EnumTBTPageState()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TBT_PAGE_DISABLE)) {}
        EnumTBTPageState(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TBT_PAGE_DISABLE):
                case static_cast< int32_t>(Literal::TBT_PAGE_ENABLE):
                case static_cast< int32_t>(Literal::TBT_PAGE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumTBTPageState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumTBTPageState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumTBTPageState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumTBTPageState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumTBTPageState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumTBTPageState &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumTBTPointType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TBT_POINT_NONE = 0,
            TBT_POINT_DEST = 1,
            TBT_POINT_VIA_DEST_1 = 2,
            TBT_POINT_VIA_DEST_2 = 3,
            TBT_POINT_VIA_DEST_3 = 4,
            TBT_POINT_VIA_DEST_4 = 5,
            TBT_POINT_MAX = 6
        };
    
        EnumTBTPointType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TBT_POINT_NONE)) {}
        EnumTBTPointType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TBT_POINT_NONE):
                case static_cast< int32_t>(Literal::TBT_POINT_DEST):
                case static_cast< int32_t>(Literal::TBT_POINT_VIA_DEST_1):
                case static_cast< int32_t>(Literal::TBT_POINT_VIA_DEST_2):
                case static_cast< int32_t>(Literal::TBT_POINT_VIA_DEST_3):
                case static_cast< int32_t>(Literal::TBT_POINT_VIA_DEST_4):
                case static_cast< int32_t>(Literal::TBT_POINT_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumTBTPointType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumTBTPointType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumTBTPointType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumTBTPointType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumTBTPointType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumTBTPointType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumTBTDistanceUnit : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TBT_DIST_UNIT_NONE = 0,
            TBT_DIST_UNIT_METER = 1,
            TBT_DIST_UNIT_KILOMETER = 2,
            TBT_DIST_UNIT_MILE = 3,
            TBT_DIST_UNIT_FEET = 4,
            TBT_DIST_UNIT_YARD = 5,
            TBT_DIST_UNIT_MAX = 6
        };
    
        EnumTBTDistanceUnit()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TBT_DIST_UNIT_NONE)) {}
        EnumTBTDistanceUnit(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TBT_DIST_UNIT_NONE):
                case static_cast< int32_t>(Literal::TBT_DIST_UNIT_METER):
                case static_cast< int32_t>(Literal::TBT_DIST_UNIT_KILOMETER):
                case static_cast< int32_t>(Literal::TBT_DIST_UNIT_MILE):
                case static_cast< int32_t>(Literal::TBT_DIST_UNIT_FEET):
                case static_cast< int32_t>(Literal::TBT_DIST_UNIT_YARD):
                case static_cast< int32_t>(Literal::TBT_DIST_UNIT_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumTBTDistanceUnit &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumTBTDistanceUnit &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumTBTDistanceUnit &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumTBTDistanceUnit &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumTBTDistanceUnit &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumTBTDistanceUnit &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StTBTDistance : CommonAPI::Struct< uint16_t, uint8_t, EnumTBTDistanceUnit> {
    
        StTBTDistance()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = EnumTBTDistanceUnit();
        }
        StTBTDistance(const uint16_t &_over_zero_point, const uint8_t &_under_zero_point, const EnumTBTDistanceUnit &_unit)
        {
            std::get< 0>(values_) = _over_zero_point;
            std::get< 1>(values_) = _under_zero_point;
            std::get< 2>(values_) = _unit;
        }
        inline const uint16_t &getOver_zero_point() const { return std::get< 0>(values_); }
        inline void setOver_zero_point(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getUnder_zero_point() const { return std::get< 1>(values_); }
        inline void setUnder_zero_point(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const EnumTBTDistanceUnit &getUnit() const { return std::get< 2>(values_); }
        inline void setUnit(const EnumTBTDistanceUnit &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StTBTDistance& _other) const {
        return (getOver_zero_point() == _other.getOver_zero_point() && getUnder_zero_point() == _other.getUnder_zero_point() && getUnit() == _other.getUnit());
        }
        inline bool operator!=(const StTBTDistance &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StTBTDistDestInfo : CommonAPI::Struct< EnumValueDisplayType, StTBTDistance> {
    
        StTBTDistDestInfo()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = StTBTDistance();
        }
        StTBTDistDestInfo(const EnumValueDisplayType &_type, const StTBTDistance &_distance)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _distance;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const StTBTDistance &getDistance() const { return std::get< 1>(values_); }
        inline void setDistance(const StTBTDistance &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StTBTDistDestInfo& _other) const {
        return (getType() == _other.getType() && getDistance() == _other.getDistance());
        }
        inline bool operator!=(const StTBTDistDestInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StTBTTurnInfo : CommonAPI::Struct< EnumValueDisplayType, StTBTDistance, uint8_t> {
    
        StTBTTurnInfo()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = StTBTDistance();
            std::get< 2>(values_) = 0u;
        }
        StTBTTurnInfo(const EnumValueDisplayType &_type, const StTBTDistance &_distance, const uint8_t &_bar)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _distance;
            std::get< 2>(values_) = _bar;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const StTBTDistance &getDistance() const { return std::get< 1>(values_); }
        inline void setDistance(const StTBTDistance &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getBar() const { return std::get< 2>(values_); }
        inline void setBar(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StTBTTurnInfo& _other) const {
        return (getType() == _other.getType() && getDistance() == _other.getDistance() && getBar() == _other.getBar());
        }
        inline bool operator!=(const StTBTTurnInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumTBTTimeFormat : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TBT_TIME_FMT_NONE = 0,
            TBT_TIME_FMT_AMPM = 1,
            TBT_TIME_FMT_24_HOUR = 2,
            TBT_TIME_FMT_MAX = 3
        };
    
        EnumTBTTimeFormat()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TBT_TIME_FMT_NONE)) {}
        EnumTBTTimeFormat(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TBT_TIME_FMT_NONE):
                case static_cast< int32_t>(Literal::TBT_TIME_FMT_AMPM):
                case static_cast< int32_t>(Literal::TBT_TIME_FMT_24_HOUR):
                case static_cast< int32_t>(Literal::TBT_TIME_FMT_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumTBTTimeFormat &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumTBTTimeFormat &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumTBTTimeFormat &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumTBTTimeFormat &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumTBTTimeFormat &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumTBTTimeFormat &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StTBTDestinationTime : CommonAPI::Struct< EnumValueDisplayType, EnumTBTTimeFormat, uint8_t, uint8_t> {
    
        StTBTDestinationTime()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = EnumTBTTimeFormat();
            std::get< 2>(values_) = 0u;
            std::get< 3>(values_) = 0u;
        }
        StTBTDestinationTime(const EnumValueDisplayType &_type, const EnumTBTTimeFormat &_format, const uint8_t &_hour, const uint8_t &_min)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _format;
            std::get< 2>(values_) = _hour;
            std::get< 3>(values_) = _min;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumTBTTimeFormat &getFormat() const { return std::get< 1>(values_); }
        inline void setFormat(const EnumTBTTimeFormat &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getHour() const { return std::get< 2>(values_); }
        inline void setHour(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline const uint8_t &getMin() const { return std::get< 3>(values_); }
        inline void setMin(const uint8_t &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const StTBTDestinationTime& _other) const {
        return (getType() == _other.getType() && getFormat() == _other.getFormat() && getHour() == _other.getHour() && getMin() == _other.getMin());
        }
        inline bool operator!=(const StTBTDestinationTime &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StTBTRemainTime : CommonAPI::Struct< EnumValueDisplayType, uint8_t, uint8_t> {
    
        StTBTRemainTime()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
        }
        StTBTRemainTime(const EnumValueDisplayType &_type, const uint8_t &_hour, const uint8_t &_min)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _hour;
            std::get< 2>(values_) = _min;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getHour() const { return std::get< 1>(values_); }
        inline void setHour(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getMin() const { return std::get< 2>(values_); }
        inline void setMin(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StTBTRemainTime& _other) const {
        return (getType() == _other.getType() && getHour() == _other.getHour() && getMin() == _other.getMin());
        }
        inline bool operator!=(const StTBTRemainTime &_other) const {
            return !((*this) == _other);
        }
    
    };
    typedef CommonAPI::ByteBuffer TPData;
    
    struct EnumCruiseCtrlDisplayType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            CRUISE_CTRL_NONE = 0,
            CRUISE_CTRL_SYSTEM_OFF = 1,
            CRUISE_CTRL_CHECKING_SYSTEM_OFF = 2,
            CRUISE_CTRL_STANDBY = 3,
            CRUISE_CTRL_SMART_STANDBY = 4,
            CRUISE_CTRL_ENGAGE = 5,
            CRUISE_CTRL_SMART_ENGAGE = 6,
            CRUISE_CTRL_OVERRIDE = 7,
            CRUISE_CTRL_SMART_OVERRIDE = 8,
            CRUISE_CTRL_MAX = 9
        };
    
        EnumCruiseCtrlDisplayType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::CRUISE_CTRL_NONE)) {}
        EnumCruiseCtrlDisplayType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::CRUISE_CTRL_NONE):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_SYSTEM_OFF):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_CHECKING_SYSTEM_OFF):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_STANDBY):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_SMART_STANDBY):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_ENGAGE):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_SMART_ENGAGE):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_OVERRIDE):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_SMART_OVERRIDE):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumCruiseCtrlDisplayType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumCruiseCtrlDisplayType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumCruiseCtrlDisplayType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumCruiseCtrlDisplayType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumCruiseCtrlDisplayType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumCruiseCtrlDisplayType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumCruiseCtrlDisplayType2 : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            CRUISE_CTRL_NONE = 0,
            CRUISE_CTRL_SYSTEM_OFF = 1,
            CRUISE_CTRL_NO_CONDITION = 2,
            CRUISE_CTRL_DISENGAGED = 3,
            CRUISE_CTRL_PAUSE = 4,
            CRUISE_CTRL_READY = 5,
            CRUISE_CTRL_OVERRIDE = 6,
            CRUISE_CTRL_SMART_OVERRIDE = 7,
            CRUISE_CTRL_ENGAGE = 8,
            CRUISE_CTRL_SMART_ENGAGE = 9,
            CRUISE_CTRL_MAX = 10
        };
    
        EnumCruiseCtrlDisplayType2()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::CRUISE_CTRL_NONE)) {}
        EnumCruiseCtrlDisplayType2(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::CRUISE_CTRL_NONE):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_SYSTEM_OFF):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_NO_CONDITION):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_DISENGAGED):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_PAUSE):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_READY):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_OVERRIDE):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_SMART_OVERRIDE):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_ENGAGE):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_SMART_ENGAGE):
                case static_cast< int32_t>(Literal::CRUISE_CTRL_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumCruiseCtrlDisplayType2 &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumCruiseCtrlDisplayType2 &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumCruiseCtrlDisplayType2 &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumCruiseCtrlDisplayType2 &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumCruiseCtrlDisplayType2 &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumCruiseCtrlDisplayType2 &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumCruiseCtrlSymbolType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            SYMBOL_NONE = 0,
            SYMBOL_CRUISE = 1,
            SYMBOL_HDA = 2,
            SYMBOL_MAX = 3
        };
    
        EnumCruiseCtrlSymbolType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::SYMBOL_NONE)) {}
        EnumCruiseCtrlSymbolType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::SYMBOL_NONE):
                case static_cast< int32_t>(Literal::SYMBOL_CRUISE):
                case static_cast< int32_t>(Literal::SYMBOL_HDA):
                case static_cast< int32_t>(Literal::SYMBOL_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumCruiseCtrlSymbolType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumCruiseCtrlSymbolType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumCruiseCtrlSymbolType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumCruiseCtrlSymbolType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumCruiseCtrlSymbolType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumCruiseCtrlSymbolType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumCruiseCtrlSymbolStatus : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            SYMBOL_STATUS_OFF = 0,
            SYMBOL_STATUS_STANDBY = 1,
            SYMBOL_STATUS_ENGAGE = 2,
            SYMBOL_STATUS_MAX = 3
        };
    
        EnumCruiseCtrlSymbolStatus()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::SYMBOL_STATUS_OFF)) {}
        EnumCruiseCtrlSymbolStatus(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::SYMBOL_STATUS_OFF):
                case static_cast< int32_t>(Literal::SYMBOL_STATUS_STANDBY):
                case static_cast< int32_t>(Literal::SYMBOL_STATUS_ENGAGE):
                case static_cast< int32_t>(Literal::SYMBOL_STATUS_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumCruiseCtrlSymbolStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumCruiseCtrlSymbolStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumCruiseCtrlSymbolStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumCruiseCtrlSymbolStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumCruiseCtrlSymbolStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumCruiseCtrlSymbolStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumCruiseCtrlDispColor : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            DISP_COLOR_OFF = 0,
            DISP_COLOR_ON = 1,
            DISP_COLOR_MAX = 2
        };
    
        EnumCruiseCtrlDispColor()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::DISP_COLOR_OFF)) {}
        EnumCruiseCtrlDispColor(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::DISP_COLOR_OFF):
                case static_cast< int32_t>(Literal::DISP_COLOR_ON):
                case static_cast< int32_t>(Literal::DISP_COLOR_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumCruiseCtrlDispColor &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumCruiseCtrlDispColor &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumCruiseCtrlDispColor &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumCruiseCtrlDispColor &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumCruiseCtrlDispColor &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumCruiseCtrlDispColor &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumCruiseCtrlObjGapLevel : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            OBJECT_GAP_OFF = 0,
            OBJECT_GAP_LV1 = 1,
            OBJECT_GAP_LV2 = 2,
            OBJECT_GAP_LV3 = 3,
            OBJECT_GAP_LV4 = 4,
            OBJECT_GAP_MAX = 5
        };
    
        EnumCruiseCtrlObjGapLevel()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::OBJECT_GAP_OFF)) {}
        EnumCruiseCtrlObjGapLevel(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::OBJECT_GAP_OFF):
                case static_cast< int32_t>(Literal::OBJECT_GAP_LV1):
                case static_cast< int32_t>(Literal::OBJECT_GAP_LV2):
                case static_cast< int32_t>(Literal::OBJECT_GAP_LV3):
                case static_cast< int32_t>(Literal::OBJECT_GAP_LV4):
                case static_cast< int32_t>(Literal::OBJECT_GAP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumCruiseCtrlObjGapLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumCruiseCtrlObjGapLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumCruiseCtrlObjGapLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumCruiseCtrlObjGapLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumCruiseCtrlObjGapLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumCruiseCtrlObjGapLevel &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumCruiseCtrlTauGapLevel : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TAU_GAP_OFF = 0,
            TAU_GAP_LV1 = 1,
            TAU_GAP_LV2 = 2,
            TAU_GAP_LV3 = 3,
            TAU_GAP_LV4 = 4,
            TAU_GAP_MAX = 5
        };
    
        EnumCruiseCtrlTauGapLevel()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TAU_GAP_OFF)) {}
        EnumCruiseCtrlTauGapLevel(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TAU_GAP_OFF):
                case static_cast< int32_t>(Literal::TAU_GAP_LV1):
                case static_cast< int32_t>(Literal::TAU_GAP_LV2):
                case static_cast< int32_t>(Literal::TAU_GAP_LV3):
                case static_cast< int32_t>(Literal::TAU_GAP_LV4):
                case static_cast< int32_t>(Literal::TAU_GAP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumCruiseCtrlTauGapLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumCruiseCtrlTauGapLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumCruiseCtrlTauGapLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumCruiseCtrlTauGapLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumCruiseCtrlTauGapLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumCruiseCtrlTauGapLevel &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumCruiseCtrlAutoDispType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            AUTO_DISP_OFF = 0,
            AUTO_DISP_READY = 1,
            AUTO_DISP_ACTIVE = 2,
            AUTO_DISP_MAX = 3
        };
    
        EnumCruiseCtrlAutoDispType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::AUTO_DISP_OFF)) {}
        EnumCruiseCtrlAutoDispType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::AUTO_DISP_OFF):
                case static_cast< int32_t>(Literal::AUTO_DISP_READY):
                case static_cast< int32_t>(Literal::AUTO_DISP_ACTIVE):
                case static_cast< int32_t>(Literal::AUTO_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumCruiseCtrlAutoDispType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumCruiseCtrlAutoDispType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumCruiseCtrlAutoDispType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumCruiseCtrlAutoDispType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumCruiseCtrlAutoDispType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumCruiseCtrlAutoDispType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumSCCTargetDispType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TARGET_DISP_NONE = 0,
            TARGET_DISP_STANDBY = 1,
            TARGET_DISP_NORMAL = 2,
            TARGET_DISP_SCC_ML = 3,
            TARGET_DISP_MAX = 4
        };
    
        EnumSCCTargetDispType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TARGET_DISP_NONE)) {}
        EnumSCCTargetDispType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TARGET_DISP_NONE):
                case static_cast< int32_t>(Literal::TARGET_DISP_STANDBY):
                case static_cast< int32_t>(Literal::TARGET_DISP_NORMAL):
                case static_cast< int32_t>(Literal::TARGET_DISP_SCC_ML):
                case static_cast< int32_t>(Literal::TARGET_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumSCCTargetDispType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumSCCTargetDispType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumSCCTargetDispType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumSCCTargetDispType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumSCCTargetDispType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumSCCTargetDispType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumADASDispType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            ADAS_DISP_OFF = 0,
            ADAS_DISP_ON = 1,
            ADAS_DISP_MAX = 2
        };
    
        EnumADASDispType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::ADAS_DISP_OFF)) {}
        EnumADASDispType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::ADAS_DISP_OFF):
                case static_cast< int32_t>(Literal::ADAS_DISP_ON):
                case static_cast< int32_t>(Literal::ADAS_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumADASDispType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumADASDispType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumADASDispType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumADASDispType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumADASDispType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumADASDispType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumADASVehicleId : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            VEHICLE_ID_FRONT_LEFT = 0,
            VEHICLE_ID_FRONT = 1,
            VEHICLE_ID_FRONT_RIGHT = 2,
            VEHICLE_ID_REAR_LEFT = 3,
            VEHICLE_ID_REAR_RIGHT = 4,
            VEHICLE_ID_MAX = 5
        };
    
        EnumADASVehicleId()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::VEHICLE_ID_FRONT_LEFT)) {}
        EnumADASVehicleId(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::VEHICLE_ID_FRONT_LEFT):
                case static_cast< int32_t>(Literal::VEHICLE_ID_FRONT):
                case static_cast< int32_t>(Literal::VEHICLE_ID_FRONT_RIGHT):
                case static_cast< int32_t>(Literal::VEHICLE_ID_REAR_LEFT):
                case static_cast< int32_t>(Literal::VEHICLE_ID_REAR_RIGHT):
                case static_cast< int32_t>(Literal::VEHICLE_ID_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumADASVehicleId &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumADASVehicleId &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumADASVehicleId &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumADASVehicleId &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumADASVehicleId &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumADASVehicleId &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumADASVehicleStatus : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            VEHICLE_STATUS_NONE = 0,
            VEHICLE_STATUS_RECOGNIZED = 1,
            VEHICLE_STATUS_WARNING = 2,
            VEHICLE_STATUS_MTC = 3,
            VEHICLE_STATUS_FADE_OUT = 4,
            VEHICLE_STATUS_FADE_IN = 5,
            VEHICLE_STATUS_STANDBY = 6,
            VEHICLE_STATUS_APPROACHING = 7
        };
    
        EnumADASVehicleStatus()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::VEHICLE_STATUS_NONE)) {}
        EnumADASVehicleStatus(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::VEHICLE_STATUS_NONE):
                case static_cast< int32_t>(Literal::VEHICLE_STATUS_RECOGNIZED):
                case static_cast< int32_t>(Literal::VEHICLE_STATUS_WARNING):
                case static_cast< int32_t>(Literal::VEHICLE_STATUS_MTC):
                case static_cast< int32_t>(Literal::VEHICLE_STATUS_FADE_OUT):
                case static_cast< int32_t>(Literal::VEHICLE_STATUS_FADE_IN):
                case static_cast< int32_t>(Literal::VEHICLE_STATUS_STANDBY):
                case static_cast< int32_t>(Literal::VEHICLE_STATUS_APPROACHING):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumADASVehicleStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumADASVehicleStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumADASVehicleStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumADASVehicleStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumADASVehicleStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumADASVehicleStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumADASLaneType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            LANE_TYPE_NONE = 0,
            LANE_TYPE_STRAIGHT = 1,
            LANE_TYPE_CURVE = 2
        };
    
        EnumADASLaneType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::LANE_TYPE_NONE)) {}
        EnumADASLaneType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::LANE_TYPE_NONE):
                case static_cast< int32_t>(Literal::LANE_TYPE_STRAIGHT):
                case static_cast< int32_t>(Literal::LANE_TYPE_CURVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumADASLaneType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumADASLaneType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumADASLaneType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumADASLaneType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumADASLaneType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumADASLaneType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumADASLCAvailStatus : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            LANE_STATUS_NONE = 0,
            LANE_STATUS_READY = 1,
            LANE_STATUS_RECOGNIZE = 2,
            LANE_STATUS_WARNING = 3,
            LANE_STATUS_UNAVAILABLE = 4,
            LANE_STATUS_STANDBY = 5
        };
    
        EnumADASLCAvailStatus()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::LANE_STATUS_NONE)) {}
        EnumADASLCAvailStatus(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::LANE_STATUS_NONE):
                case static_cast< int32_t>(Literal::LANE_STATUS_READY):
                case static_cast< int32_t>(Literal::LANE_STATUS_RECOGNIZE):
                case static_cast< int32_t>(Literal::LANE_STATUS_WARNING):
                case static_cast< int32_t>(Literal::LANE_STATUS_UNAVAILABLE):
                case static_cast< int32_t>(Literal::LANE_STATUS_STANDBY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumADASLCAvailStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumADASLCAvailStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumADASLCAvailStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumADASLCAvailStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumADASLCAvailStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumADASLCAvailStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumADASLaneActive : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            LANE_ACTIVE_LEFT = 0,
            LANE_ACTIVE_RIGHT = 1,
            LANE_ACTIVE_STANDBY = 2
        };
    
        EnumADASLaneActive()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::LANE_ACTIVE_LEFT)) {}
        EnumADASLaneActive(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::LANE_ACTIVE_LEFT):
                case static_cast< int32_t>(Literal::LANE_ACTIVE_RIGHT):
                case static_cast< int32_t>(Literal::LANE_ACTIVE_STANDBY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumADASLaneActive &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumADASLaneActive &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumADASLaneActive &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumADASLaneActive &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumADASLaneActive &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumADASLaneActive &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StSccSetSpeed : CommonAPI::Struct< EnumValueDisplayType, EnumCruiseCtrlDispColor, bool, uint8_t> {
    
        StSccSetSpeed()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = EnumCruiseCtrlDispColor();
            std::get< 2>(values_) = false;
            std::get< 3>(values_) = 0u;
        }
        StSccSetSpeed(const EnumValueDisplayType &_type, const EnumCruiseCtrlDispColor &_color, const bool &_brightness, const uint8_t &_v_set_dis)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _color;
            std::get< 2>(values_) = _brightness;
            std::get< 3>(values_) = _v_set_dis;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumCruiseCtrlDispColor &getColor() const { return std::get< 1>(values_); }
        inline void setColor(const EnumCruiseCtrlDispColor &_value) { std::get< 1>(values_) = _value; }
        inline const bool &getBrightness() const { return std::get< 2>(values_); }
        inline void setBrightness(const bool _value) { std::get< 2>(values_) = _value; }
        inline const uint8_t &getV_set_dis() const { return std::get< 3>(values_); }
        inline void setV_set_dis(const uint8_t &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const StSccSetSpeed& _other) const {
        return (getType() == _other.getType() && getColor() == _other.getColor() && getBrightness() == _other.getBrightness() && getV_set_dis() == _other.getV_set_dis());
        }
        inline bool operator!=(const StSccSetSpeed &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StSCCSymbol : CommonAPI::Struct< EnumCruiseCtrlSymbolType, EnumCruiseCtrlSymbolStatus> {
    
        StSCCSymbol()
        {
            std::get< 0>(values_) = EnumCruiseCtrlSymbolType();
            std::get< 1>(values_) = EnumCruiseCtrlSymbolStatus();
        }
        StSCCSymbol(const EnumCruiseCtrlSymbolType &_item, const EnumCruiseCtrlSymbolStatus &_status)
        {
            std::get< 0>(values_) = _item;
            std::get< 1>(values_) = _status;
        }
        inline const EnumCruiseCtrlSymbolType &getItem() const { return std::get< 0>(values_); }
        inline void setItem(const EnumCruiseCtrlSymbolType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumCruiseCtrlSymbolStatus &getStatus() const { return std::get< 1>(values_); }
        inline void setStatus(const EnumCruiseCtrlSymbolStatus &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StSCCSymbol& _other) const {
        return (getItem() == _other.getItem() && getStatus() == _other.getStatus());
        }
        inline bool operator!=(const StSCCSymbol &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StDriveAssistCCInfoTTC : CommonAPI::Struct< EnumCruiseCtrlDisplayType, EnumCruiseCtrlAutoDispType, StSCCSymbol, StSccSetSpeed, bool, EnumCruiseCtrlObjGapLevel, EnumCruiseCtrlTauGapLevel> {
    
        StDriveAssistCCInfoTTC()
        {
            std::get< 0>(values_) = EnumCruiseCtrlDisplayType();
            std::get< 1>(values_) = EnumCruiseCtrlAutoDispType();
            std::get< 2>(values_) = StSCCSymbol();
            std::get< 3>(values_) = StSccSetSpeed();
            std::get< 4>(values_) = false;
            std::get< 5>(values_) = EnumCruiseCtrlObjGapLevel();
            std::get< 6>(values_) = EnumCruiseCtrlTauGapLevel();
        }
        StDriveAssistCCInfoTTC(const EnumCruiseCtrlDisplayType &_disp_type, const EnumCruiseCtrlAutoDispType &_disp_auto, const StSCCSymbol &_symbol, const StSccSetSpeed &_v_set_spd, const bool &_obj_valid, const EnumCruiseCtrlObjGapLevel &_obj_gap, const EnumCruiseCtrlTauGapLevel &_tau_gap)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _disp_auto;
            std::get< 2>(values_) = _symbol;
            std::get< 3>(values_) = _v_set_spd;
            std::get< 4>(values_) = _obj_valid;
            std::get< 5>(values_) = _obj_gap;
            std::get< 6>(values_) = _tau_gap;
        }
        inline const EnumCruiseCtrlDisplayType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumCruiseCtrlDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumCruiseCtrlAutoDispType &getDisp_auto() const { return std::get< 1>(values_); }
        inline void setDisp_auto(const EnumCruiseCtrlAutoDispType &_value) { std::get< 1>(values_) = _value; }
        inline const StSCCSymbol &getSymbol() const { return std::get< 2>(values_); }
        inline void setSymbol(const StSCCSymbol &_value) { std::get< 2>(values_) = _value; }
        inline const StSccSetSpeed &getV_set_spd() const { return std::get< 3>(values_); }
        inline void setV_set_spd(const StSccSetSpeed &_value) { std::get< 3>(values_) = _value; }
        inline const bool &getObj_valid() const { return std::get< 4>(values_); }
        inline void setObj_valid(const bool _value) { std::get< 4>(values_) = _value; }
        inline const EnumCruiseCtrlObjGapLevel &getObj_gap() const { return std::get< 5>(values_); }
        inline void setObj_gap(const EnumCruiseCtrlObjGapLevel &_value) { std::get< 5>(values_) = _value; }
        inline const EnumCruiseCtrlTauGapLevel &getTau_gap() const { return std::get< 6>(values_); }
        inline void setTau_gap(const EnumCruiseCtrlTauGapLevel &_value) { std::get< 6>(values_) = _value; }
        inline bool operator==(const StDriveAssistCCInfoTTC& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getDisp_auto() == _other.getDisp_auto() && getSymbol() == _other.getSymbol() && getV_set_spd() == _other.getV_set_spd() && getObj_valid() == _other.getObj_valid() && getObj_gap() == _other.getObj_gap() && getTau_gap() == _other.getTau_gap());
        }
        inline bool operator!=(const StDriveAssistCCInfoTTC &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StCCObject : CommonAPI::Struct< uint16_t, uint16_t, float> {
    
        StCCObject()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0.0f;
        }
        StCCObject(const uint16_t &_x, const uint16_t &_y, const float &_scale)
        {
            std::get< 0>(values_) = _x;
            std::get< 1>(values_) = _y;
            std::get< 2>(values_) = _scale;
        }
        inline const uint16_t &getX() const { return std::get< 0>(values_); }
        inline void setX(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint16_t &getY() const { return std::get< 1>(values_); }
        inline void setY(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline const float &getScale() const { return std::get< 2>(values_); }
        inline void setScale(const float &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StCCObject& _other) const {
        return (getX() == _other.getX() && getY() == _other.getY() && getScale() == _other.getScale());
        }
        inline bool operator!=(const StCCObject &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StSCCVehicleInfo : CommonAPI::Struct< EnumADASVehicleStatus, StCCObject> {
    
        StSCCVehicleInfo()
        {
            std::get< 0>(values_) = EnumADASVehicleStatus();
            std::get< 1>(values_) = StCCObject();
        }
        StSCCVehicleInfo(const EnumADASVehicleStatus &_front_vehicle_state, const StCCObject &_vehicle_obj)
        {
            std::get< 0>(values_) = _front_vehicle_state;
            std::get< 1>(values_) = _vehicle_obj;
        }
        inline const EnumADASVehicleStatus &getFront_vehicle_state() const { return std::get< 0>(values_); }
        inline void setFront_vehicle_state(const EnumADASVehicleStatus &_value) { std::get< 0>(values_) = _value; }
        inline const StCCObject &getVehicle_obj() const { return std::get< 1>(values_); }
        inline void setVehicle_obj(const StCCObject &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StSCCVehicleInfo& _other) const {
        return (getFront_vehicle_state() == _other.getFront_vehicle_state() && getVehicle_obj() == _other.getVehicle_obj());
        }
        inline bool operator!=(const StSCCVehicleInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StSCCTargetDistInfo : CommonAPI::Struct< EnumSCCTargetDispType, bool, StCCObject> {
    
        StSCCTargetDistInfo()
        {
            std::get< 0>(values_) = EnumSCCTargetDispType();
            std::get< 1>(values_) = false;
            std::get< 2>(values_) = StCCObject();
        }
        StSCCTargetDistInfo(const EnumSCCTargetDispType &_disp_type, const bool &_blink, const StCCObject &_target_obj)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _blink;
            std::get< 2>(values_) = _target_obj;
        }
        inline const EnumSCCTargetDispType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumSCCTargetDispType &_value) { std::get< 0>(values_) = _value; }
        inline const bool &getBlink() const { return std::get< 1>(values_); }
        inline void setBlink(const bool _value) { std::get< 1>(values_) = _value; }
        inline const StCCObject &getTarget_obj() const { return std::get< 2>(values_); }
        inline void setTarget_obj(const StCCObject &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StSCCTargetDistInfo& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getBlink() == _other.getBlink() && getTarget_obj() == _other.getTarget_obj());
        }
        inline bool operator!=(const StSCCTargetDistInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StDriveAssistCCInfoReal : CommonAPI::Struct< EnumCruiseCtrlDisplayType2, StSCCVehicleInfo, StSCCTargetDistInfo, bool> {
    
        StDriveAssistCCInfoReal()
        {
            std::get< 0>(values_) = EnumCruiseCtrlDisplayType2();
            std::get< 1>(values_) = StSCCVehicleInfo();
            std::get< 2>(values_) = StSCCTargetDistInfo();
            std::get< 3>(values_) = false;
        }
        StDriveAssistCCInfoReal(const EnumCruiseCtrlDisplayType2 &_disp_type, const StSCCVehicleInfo &_front_vehicle, const StSCCTargetDistInfo &_target, const bool &_esc_brake_lamp)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _front_vehicle;
            std::get< 2>(values_) = _target;
            std::get< 3>(values_) = _esc_brake_lamp;
        }
        inline const EnumCruiseCtrlDisplayType2 &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumCruiseCtrlDisplayType2 &_value) { std::get< 0>(values_) = _value; }
        inline const StSCCVehicleInfo &getFront_vehicle() const { return std::get< 1>(values_); }
        inline void setFront_vehicle(const StSCCVehicleInfo &_value) { std::get< 1>(values_) = _value; }
        inline const StSCCTargetDistInfo &getTarget() const { return std::get< 2>(values_); }
        inline void setTarget(const StSCCTargetDistInfo &_value) { std::get< 2>(values_) = _value; }
        inline const bool &getEsc_brake_lamp() const { return std::get< 3>(values_); }
        inline void setEsc_brake_lamp(const bool _value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const StDriveAssistCCInfoReal& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getFront_vehicle() == _other.getFront_vehicle() && getTarget() == _other.getTarget() && getEsc_brake_lamp() == _other.getEsc_brake_lamp());
        }
        inline bool operator!=(const StDriveAssistCCInfoReal &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StADASVehicleInfo : CommonAPI::Struct< EnumADASVehicleId, EnumADASVehicleStatus, StCCObject> {
    
        StADASVehicleInfo()
        {
            std::get< 0>(values_) = EnumADASVehicleId();
            std::get< 1>(values_) = EnumADASVehicleStatus();
            std::get< 2>(values_) = StCCObject();
        }
        StADASVehicleInfo(const EnumADASVehicleId &_vehicle_id, const EnumADASVehicleStatus &_vehicle_status, const StCCObject &_vehicle_info)
        {
            std::get< 0>(values_) = _vehicle_id;
            std::get< 1>(values_) = _vehicle_status;
            std::get< 2>(values_) = _vehicle_info;
        }
        inline const EnumADASVehicleId &getVehicle_id() const { return std::get< 0>(values_); }
        inline void setVehicle_id(const EnumADASVehicleId &_value) { std::get< 0>(values_) = _value; }
        inline const EnumADASVehicleStatus &getVehicle_status() const { return std::get< 1>(values_); }
        inline void setVehicle_status(const EnumADASVehicleStatus &_value) { std::get< 1>(values_) = _value; }
        inline const StCCObject &getVehicle_info() const { return std::get< 2>(values_); }
        inline void setVehicle_info(const StCCObject &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StADASVehicleInfo& _other) const {
        return (getVehicle_id() == _other.getVehicle_id() && getVehicle_status() == _other.getVehicle_status() && getVehicle_info() == _other.getVehicle_info());
        }
        inline bool operator!=(const StADASVehicleInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StADASLaneInfo : CommonAPI::Struct< EnumADASLCAvailStatus, EnumADASLCAvailStatus, EnumADASLaneActive, EnumADASLaneType, uint8_t, uint16_t, uint16_t> {
    
        StADASLaneInfo()
        {
            std::get< 0>(values_) = EnumADASLCAvailStatus();
            std::get< 1>(values_) = EnumADASLCAvailStatus();
            std::get< 2>(values_) = EnumADASLaneActive();
            std::get< 3>(values_) = EnumADASLaneType();
            std::get< 4>(values_) = 0u;
            std::get< 5>(values_) = 0u;
            std::get< 6>(values_) = 0u;
        }
        StADASLaneInfo(const EnumADASLCAvailStatus &_l_lca_status, const EnumADASLCAvailStatus &_r_lca_status, const EnumADASLaneActive &_lane_active_status, const EnumADASLaneType &_lane_type, const uint8_t &_lane_curve_ratio, const uint16_t &_l_lane_x, const uint16_t &_r_lane_x)
        {
            std::get< 0>(values_) = _l_lca_status;
            std::get< 1>(values_) = _r_lca_status;
            std::get< 2>(values_) = _lane_active_status;
            std::get< 3>(values_) = _lane_type;
            std::get< 4>(values_) = _lane_curve_ratio;
            std::get< 5>(values_) = _l_lane_x;
            std::get< 6>(values_) = _r_lane_x;
        }
        inline const EnumADASLCAvailStatus &getL_lca_status() const { return std::get< 0>(values_); }
        inline void setL_lca_status(const EnumADASLCAvailStatus &_value) { std::get< 0>(values_) = _value; }
        inline const EnumADASLCAvailStatus &getR_lca_status() const { return std::get< 1>(values_); }
        inline void setR_lca_status(const EnumADASLCAvailStatus &_value) { std::get< 1>(values_) = _value; }
        inline const EnumADASLaneActive &getLane_active_status() const { return std::get< 2>(values_); }
        inline void setLane_active_status(const EnumADASLaneActive &_value) { std::get< 2>(values_) = _value; }
        inline const EnumADASLaneType &getLane_type() const { return std::get< 3>(values_); }
        inline void setLane_type(const EnumADASLaneType &_value) { std::get< 3>(values_) = _value; }
        inline const uint8_t &getLane_curve_ratio() const { return std::get< 4>(values_); }
        inline void setLane_curve_ratio(const uint8_t &_value) { std::get< 4>(values_) = _value; }
        inline const uint16_t &getL_lane_x() const { return std::get< 5>(values_); }
        inline void setL_lane_x(const uint16_t &_value) { std::get< 5>(values_) = _value; }
        inline const uint16_t &getR_lane_x() const { return std::get< 6>(values_); }
        inline void setR_lane_x(const uint16_t &_value) { std::get< 6>(values_) = _value; }
        inline bool operator==(const StADASLaneInfo& _other) const {
        return (getL_lca_status() == _other.getL_lca_status() && getR_lca_status() == _other.getR_lca_status() && getLane_active_status() == _other.getLane_active_status() && getLane_type() == _other.getLane_type() && getLane_curve_ratio() == _other.getLane_curve_ratio() && getL_lane_x() == _other.getL_lane_x() && getR_lane_x() == _other.getR_lane_x());
        }
        inline bool operator!=(const StADASLaneInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    typedef std::vector< McuManagerTypes::StADASVehicleInfo> VehicleInfoList;
    struct StAdasInfo : CommonAPI::Struct< EnumADASDispType, VehicleInfoList, StSCCTargetDistInfo, StADASLaneInfo> {
    
        StAdasInfo()
        {
            std::get< 0>(values_) = EnumADASDispType();
            std::get< 1>(values_) = VehicleInfoList();
            std::get< 2>(values_) = StSCCTargetDistInfo();
            std::get< 3>(values_) = StADASLaneInfo();
        }
        StAdasInfo(const EnumADASDispType &_disp_type, const VehicleInfoList &_vehicle_info_list, const StSCCTargetDistInfo &_target, const StADASLaneInfo &_lane_info)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _vehicle_info_list;
            std::get< 2>(values_) = _target;
            std::get< 3>(values_) = _lane_info;
        }
        inline const EnumADASDispType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumADASDispType &_value) { std::get< 0>(values_) = _value; }
        inline const VehicleInfoList &getVehicle_info_list() const { return std::get< 1>(values_); }
        inline void setVehicle_info_list(const VehicleInfoList &_value) { std::get< 1>(values_) = _value; }
        inline const StSCCTargetDistInfo &getTarget() const { return std::get< 2>(values_); }
        inline void setTarget(const StSCCTargetDistInfo &_value) { std::get< 2>(values_) = _value; }
        inline const StADASLaneInfo &getLane_info() const { return std::get< 3>(values_); }
        inline void setLane_info(const StADASLaneInfo &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const StAdasInfo& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getVehicle_info_list() == _other.getVehicle_info_list() && getTarget() == _other.getTarget() && getLane_info() == _other.getLane_info());
        }
        inline bool operator!=(const StAdasInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumLaneContentsType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            LANE_TYPE_NONE = 0,
            LANE_TYPE_LKA = 1,
            LANE_TYPE_LDW = 2,
            LANE_TYPE_MAX = 3
        };
    
        EnumLaneContentsType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::LANE_TYPE_NONE)) {}
        EnumLaneContentsType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::LANE_TYPE_NONE):
                case static_cast< int32_t>(Literal::LANE_TYPE_LKA):
                case static_cast< int32_t>(Literal::LANE_TYPE_LDW):
                case static_cast< int32_t>(Literal::LANE_TYPE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumLaneContentsType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumLaneContentsType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumLaneContentsType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumLaneContentsType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumLaneContentsType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumLaneContentsType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumLaneDisplayType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            LANE_DISP_SYSTEM_OFF = 0,
            LANE_DISP_SYSTEM_ON = 1,
            LANE_DISP_MAX = 2
        };
    
        EnumLaneDisplayType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::LANE_DISP_SYSTEM_OFF)) {}
        EnumLaneDisplayType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::LANE_DISP_SYSTEM_OFF):
                case static_cast< int32_t>(Literal::LANE_DISP_SYSTEM_ON):
                case static_cast< int32_t>(Literal::LANE_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumLaneDisplayType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumLaneDisplayType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumLaneDisplayType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumLaneDisplayType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumLaneDisplayType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumLaneDisplayType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumLaneState : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            LANE_STATE_OFF = 0,
            LANE_STATE_DET = 1,
            LANE_STATE_WARN = 2,
            LANE_STATE_MAX = 3
        };
    
        EnumLaneState()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::LANE_STATE_OFF)) {}
        EnumLaneState(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::LANE_STATE_OFF):
                case static_cast< int32_t>(Literal::LANE_STATE_DET):
                case static_cast< int32_t>(Literal::LANE_STATE_WARN):
                case static_cast< int32_t>(Literal::LANE_STATE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumLaneState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumLaneState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumLaneState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumLaneState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumLaneState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumLaneState &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StDriveAssistLaneInfo : CommonAPI::Struct< EnumLaneContentsType, EnumLaneDisplayType, EnumLaneState, EnumLaneState, bool> {
    
        StDriveAssistLaneInfo()
        {
            std::get< 0>(values_) = EnumLaneContentsType();
            std::get< 1>(values_) = EnumLaneDisplayType();
            std::get< 2>(values_) = EnumLaneState();
            std::get< 3>(values_) = EnumLaneState();
            std::get< 4>(values_) = false;
        }
        StDriveAssistLaneInfo(const EnumLaneContentsType &_contents_type, const EnumLaneDisplayType &_disp_type, const EnumLaneState &_left_state, const EnumLaneState &_right_state, const bool &_sound_enable)
        {
            std::get< 0>(values_) = _contents_type;
            std::get< 1>(values_) = _disp_type;
            std::get< 2>(values_) = _left_state;
            std::get< 3>(values_) = _right_state;
            std::get< 4>(values_) = _sound_enable;
        }
        inline const EnumLaneContentsType &getContents_type() const { return std::get< 0>(values_); }
        inline void setContents_type(const EnumLaneContentsType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumLaneDisplayType &getDisp_type() const { return std::get< 1>(values_); }
        inline void setDisp_type(const EnumLaneDisplayType &_value) { std::get< 1>(values_) = _value; }
        inline const EnumLaneState &getLeft_state() const { return std::get< 2>(values_); }
        inline void setLeft_state(const EnumLaneState &_value) { std::get< 2>(values_) = _value; }
        inline const EnumLaneState &getRight_state() const { return std::get< 3>(values_); }
        inline void setRight_state(const EnumLaneState &_value) { std::get< 3>(values_) = _value; }
        inline const bool &getSound_enable() const { return std::get< 4>(values_); }
        inline void setSound_enable(const bool _value) { std::get< 4>(values_) = _value; }
        inline bool operator==(const StDriveAssistLaneInfo& _other) const {
        return (getContents_type() == _other.getContents_type() && getDisp_type() == _other.getDisp_type() && getLeft_state() == _other.getLeft_state() && getRight_state() == _other.getRight_state() && getSound_enable() == _other.getSound_enable());
        }
        inline bool operator!=(const StDriveAssistLaneInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumDAWDisplayType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            DAW_DISP_OFF = 0,
            DAW_DISP_LV1 = 1,
            DAW_DISP_LV2 = 2,
            DAW_DISP_LV3 = 3,
            DAW_DISP_LV4 = 4,
            DAW_DISP_LV5 = 5,
            DAW_DISP_STANDBY = 6,
            DAW_DISP_FAILURE = 7,
            DAW_DISP_MAX = 8
        };
    
        EnumDAWDisplayType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::DAW_DISP_OFF)) {}
        EnumDAWDisplayType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::DAW_DISP_OFF):
                case static_cast< int32_t>(Literal::DAW_DISP_LV1):
                case static_cast< int32_t>(Literal::DAW_DISP_LV2):
                case static_cast< int32_t>(Literal::DAW_DISP_LV3):
                case static_cast< int32_t>(Literal::DAW_DISP_LV4):
                case static_cast< int32_t>(Literal::DAW_DISP_LV5):
                case static_cast< int32_t>(Literal::DAW_DISP_STANDBY):
                case static_cast< int32_t>(Literal::DAW_DISP_FAILURE):
                case static_cast< int32_t>(Literal::DAW_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumDAWDisplayType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumDAWDisplayType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumDAWDisplayType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumDAWDisplayType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumDAWDisplayType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumDAWDisplayType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StDAWTimeValue : CommonAPI::Struct< EnumValueDisplayType, uint16_t> {
    
        StDAWTimeValue()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = 0u;
        }
        StDAWTimeValue(const EnumValueDisplayType &_type, const uint16_t &_last_break_time)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _last_break_time;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint16_t &getLast_break_time() const { return std::get< 1>(values_); }
        inline void setLast_break_time(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StDAWTimeValue& _other) const {
        return (getType() == _other.getType() && getLast_break_time() == _other.getLast_break_time());
        }
        inline bool operator!=(const StDAWTimeValue &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StDriveAssistDAWInfo : CommonAPI::Struct< EnumDAWDisplayType, StDAWTimeValue> {
    
        StDriveAssistDAWInfo()
        {
            std::get< 0>(values_) = EnumDAWDisplayType();
            std::get< 1>(values_) = StDAWTimeValue();
        }
        StDriveAssistDAWInfo(const EnumDAWDisplayType &_disp_type, const StDAWTimeValue &_time)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _time;
        }
        inline const EnumDAWDisplayType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumDAWDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const StDAWTimeValue &getTime() const { return std::get< 1>(values_); }
        inline void setTime(const StDAWTimeValue &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StDriveAssistDAWInfo& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getTime() == _other.getTime());
        }
        inline bool operator!=(const StDriveAssistDAWInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumISLWDisplayType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            ISLW_DISP_NONE = 0,
            ISLW_DISP_SYSTEM_OFF = 1,
            ISLW_DISP_CAMERA_ERR_STORED = 2,
            ISLW_DISP_NO_SPEED_INFO = 3,
            ISLW_DISP_SPEED_INFO = 4,
            ISLW_DISP_RELEASED = 5,
            ISLW_DISP_MASTER_WARNING_CHECK_ISLW = 6,
            ISLW_DISP_MAX = 7
        };
    
        EnumISLWDisplayType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::ISLW_DISP_NONE)) {}
        EnumISLWDisplayType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::ISLW_DISP_NONE):
                case static_cast< int32_t>(Literal::ISLW_DISP_SYSTEM_OFF):
                case static_cast< int32_t>(Literal::ISLW_DISP_CAMERA_ERR_STORED):
                case static_cast< int32_t>(Literal::ISLW_DISP_NO_SPEED_INFO):
                case static_cast< int32_t>(Literal::ISLW_DISP_SPEED_INFO):
                case static_cast< int32_t>(Literal::ISLW_DISP_RELEASED):
                case static_cast< int32_t>(Literal::ISLW_DISP_MASTER_WARNING_CHECK_ISLW):
                case static_cast< int32_t>(Literal::ISLW_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumISLWDisplayType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumISLWDisplayType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumISLWDisplayType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumISLWDisplayType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumISLWDisplayType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumISLWDisplayType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumISLWProhibitionType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            ISLW_PROH_OFF = 0,
            ISLW_PROH_SPEED_INFO = 1,
            ISLW_PROH_DO_NOT_PASS = 2,
            ISLW_PROH_DO_NOT_PASS_RHD = 3,
            NO_PASS_MAX = 4
        };
    
        EnumISLWProhibitionType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::ISLW_PROH_OFF)) {}
        EnumISLWProhibitionType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::ISLW_PROH_OFF):
                case static_cast< int32_t>(Literal::ISLW_PROH_SPEED_INFO):
                case static_cast< int32_t>(Literal::ISLW_PROH_DO_NOT_PASS):
                case static_cast< int32_t>(Literal::ISLW_PROH_DO_NOT_PASS_RHD):
                case static_cast< int32_t>(Literal::NO_PASS_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumISLWProhibitionType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumISLWProhibitionType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumISLWProhibitionType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumISLWProhibitionType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumISLWProhibitionType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumISLWProhibitionType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumISLWCondSignOptionType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            COND_SIGN_OPT_OFF = 0,
            COND_SIGN_OPT_SNOW_RAIN = 1,
            COND_SIGN_OPT_TRAILER = 2,
            COND_SIGN_OPT_EMPTY = 3,
            COND_SIGN_OPT_MAX = 4
        };
    
        EnumISLWCondSignOptionType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::COND_SIGN_OPT_OFF)) {}
        EnumISLWCondSignOptionType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::COND_SIGN_OPT_OFF):
                case static_cast< int32_t>(Literal::COND_SIGN_OPT_SNOW_RAIN):
                case static_cast< int32_t>(Literal::COND_SIGN_OPT_TRAILER):
                case static_cast< int32_t>(Literal::COND_SIGN_OPT_EMPTY):
                case static_cast< int32_t>(Literal::COND_SIGN_OPT_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumISLWCondSignOptionType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumISLWCondSignOptionType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumISLWCondSignOptionType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumISLWCondSignOptionType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumISLWCondSignOptionType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumISLWCondSignOptionType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StISLWCondSignInfo : CommonAPI::Struct< EnumISLWProhibitionType, uint8_t, EnumISLWCondSignOptionType> {
    
        StISLWCondSignInfo()
        {
            std::get< 0>(values_) = EnumISLWProhibitionType();
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = EnumISLWCondSignOptionType();
        }
        StISLWCondSignInfo(const EnumISLWProhibitionType &_type, const uint8_t &_limit_speed, const EnumISLWCondSignOptionType &_option)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _limit_speed;
            std::get< 2>(values_) = _option;
        }
        inline const EnumISLWProhibitionType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumISLWProhibitionType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getLimit_speed() const { return std::get< 1>(values_); }
        inline void setLimit_speed(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const EnumISLWCondSignOptionType &getOption() const { return std::get< 2>(values_); }
        inline void setOption(const EnumISLWCondSignOptionType &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StISLWCondSignInfo& _other) const {
        return (getType() == _other.getType() && getLimit_speed() == _other.getLimit_speed() && getOption() == _other.getOption());
        }
        inline bool operator!=(const StISLWCondSignInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StDriveAssistISLWInfo : CommonAPI::Struct< EnumISLWDisplayType, uint8_t, EnumISLWProhibitionType, StISLWCondSignInfo, StISLWCondSignInfo> {
    
        StDriveAssistISLWInfo()
        {
            std::get< 0>(values_) = EnumISLWDisplayType();
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = EnumISLWProhibitionType();
            std::get< 3>(values_) = StISLWCondSignInfo();
            std::get< 4>(values_) = StISLWCondSignInfo();
        }
        StDriveAssistISLWInfo(const EnumISLWDisplayType &_disp_type, const uint8_t &_main_speed, const EnumISLWProhibitionType &_add_info, const StISLWCondSignInfo &_cond_sign_1, const StISLWCondSignInfo &_cond_sign_2)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _main_speed;
            std::get< 2>(values_) = _add_info;
            std::get< 3>(values_) = _cond_sign_1;
            std::get< 4>(values_) = _cond_sign_2;
        }
        inline const EnumISLWDisplayType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumISLWDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getMain_speed() const { return std::get< 1>(values_); }
        inline void setMain_speed(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const EnumISLWProhibitionType &getAdd_info() const { return std::get< 2>(values_); }
        inline void setAdd_info(const EnumISLWProhibitionType &_value) { std::get< 2>(values_) = _value; }
        inline const StISLWCondSignInfo &getCond_sign_1() const { return std::get< 3>(values_); }
        inline void setCond_sign_1(const StISLWCondSignInfo &_value) { std::get< 3>(values_) = _value; }
        inline const StISLWCondSignInfo &getCond_sign_2() const { return std::get< 4>(values_); }
        inline void setCond_sign_2(const StISLWCondSignInfo &_value) { std::get< 4>(values_) = _value; }
        inline bool operator==(const StDriveAssistISLWInfo& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getMain_speed() == _other.getMain_speed() && getAdd_info() == _other.getAdd_info() && getCond_sign_1() == _other.getCond_sign_1() && getCond_sign_2() == _other.getCond_sign_2());
        }
        inline bool operator!=(const StDriveAssistISLWInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumTPMSDisplayType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TPMS_DISP_NONE = 0,
            TPMS_DISP_NOT_DRIVING = 1,
            TPMS_DISP_NORMAL_PRESSURE = 2,
            TPMS_DISP_MASTER_WARNING_HIGHLINE = 3,
            TPMS_DISP_MASTER_WARNING_LOWLINE = 4,
            TPMS_DISP_MASTER_WARNING_FAILURE = 5,
            TPMS_DISP_MAX = 6
        };
    
        EnumTPMSDisplayType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TPMS_DISP_NONE)) {}
        EnumTPMSDisplayType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TPMS_DISP_NONE):
                case static_cast< int32_t>(Literal::TPMS_DISP_NOT_DRIVING):
                case static_cast< int32_t>(Literal::TPMS_DISP_NORMAL_PRESSURE):
                case static_cast< int32_t>(Literal::TPMS_DISP_MASTER_WARNING_HIGHLINE):
                case static_cast< int32_t>(Literal::TPMS_DISP_MASTER_WARNING_LOWLINE):
                case static_cast< int32_t>(Literal::TPMS_DISP_MASTER_WARNING_FAILURE):
                case static_cast< int32_t>(Literal::TPMS_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumTPMSDisplayType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumTPMSDisplayType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumTPMSDisplayType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumTPMSDisplayType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumTPMSDisplayType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumTPMSDisplayType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumTPMSPressureUnit : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            PRESS_UNIT_PSI = 0,
            PRESS_UNIT_KPA = 1,
            PRESS_UNIT_BAR = 2,
            PRESS_UNIT_NO_DISP = 3,
            PRESS_UNIT_MAX = 4
        };
    
        EnumTPMSPressureUnit()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::PRESS_UNIT_PSI)) {}
        EnumTPMSPressureUnit(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::PRESS_UNIT_PSI):
                case static_cast< int32_t>(Literal::PRESS_UNIT_KPA):
                case static_cast< int32_t>(Literal::PRESS_UNIT_BAR):
                case static_cast< int32_t>(Literal::PRESS_UNIT_NO_DISP):
                case static_cast< int32_t>(Literal::PRESS_UNIT_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumTPMSPressureUnit &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumTPMSPressureUnit &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumTPMSPressureUnit &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumTPMSPressureUnit &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumTPMSPressureUnit &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumTPMSPressureUnit &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StTPMSTireInfo : CommonAPI::Struct< EnumValueDisplayType, bool, uint16_t, uint16_t, float> {
    
        StTPMSTireInfo()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = false;
            std::get< 2>(values_) = 0u;
            std::get< 3>(values_) = 0u;
            std::get< 4>(values_) = 0.0f;
        }
        StTPMSTireInfo(const EnumValueDisplayType &_type, const bool &_low_pressure, const uint16_t &_pressure_psi, const uint16_t &_pressure_kpa, const float &_pressure_bar)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _low_pressure;
            std::get< 2>(values_) = _pressure_psi;
            std::get< 3>(values_) = _pressure_kpa;
            std::get< 4>(values_) = _pressure_bar;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const bool &getLow_pressure() const { return std::get< 1>(values_); }
        inline void setLow_pressure(const bool _value) { std::get< 1>(values_) = _value; }
        inline const uint16_t &getPressure_psi() const { return std::get< 2>(values_); }
        inline void setPressure_psi(const uint16_t &_value) { std::get< 2>(values_) = _value; }
        inline const uint16_t &getPressure_kpa() const { return std::get< 3>(values_); }
        inline void setPressure_kpa(const uint16_t &_value) { std::get< 3>(values_) = _value; }
        inline const float &getPressure_bar() const { return std::get< 4>(values_); }
        inline void setPressure_bar(const float &_value) { std::get< 4>(values_) = _value; }
        inline bool operator==(const StTPMSTireInfo& _other) const {
        return (getType() == _other.getType() && getLow_pressure() == _other.getLow_pressure() && getPressure_psi() == _other.getPressure_psi() && getPressure_kpa() == _other.getPressure_kpa() && getPressure_bar() == _other.getPressure_bar());
        }
        inline bool operator!=(const StTPMSTireInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StDriveAssistTPMSInfo : CommonAPI::Struct< EnumTPMSDisplayType, EnumTPMSPressureUnit, StTPMSTireInfo, StTPMSTireInfo, StTPMSTireInfo, StTPMSTireInfo> {
    
        StDriveAssistTPMSInfo()
        {
            std::get< 0>(values_) = EnumTPMSDisplayType();
            std::get< 1>(values_) = EnumTPMSPressureUnit();
            std::get< 2>(values_) = StTPMSTireInfo();
            std::get< 3>(values_) = StTPMSTireInfo();
            std::get< 4>(values_) = StTPMSTireInfo();
            std::get< 5>(values_) = StTPMSTireInfo();
        }
        StDriveAssistTPMSInfo(const EnumTPMSDisplayType &_disp_type, const EnumTPMSPressureUnit &_unit, const StTPMSTireInfo &_fl, const StTPMSTireInfo &_fr, const StTPMSTireInfo &_rl, const StTPMSTireInfo &_rr)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _unit;
            std::get< 2>(values_) = _fl;
            std::get< 3>(values_) = _fr;
            std::get< 4>(values_) = _rl;
            std::get< 5>(values_) = _rr;
        }
        inline const EnumTPMSDisplayType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumTPMSDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumTPMSPressureUnit &getUnit() const { return std::get< 1>(values_); }
        inline void setUnit(const EnumTPMSPressureUnit &_value) { std::get< 1>(values_) = _value; }
        inline const StTPMSTireInfo &getFl() const { return std::get< 2>(values_); }
        inline void setFl(const StTPMSTireInfo &_value) { std::get< 2>(values_) = _value; }
        inline const StTPMSTireInfo &getFr() const { return std::get< 3>(values_); }
        inline void setFr(const StTPMSTireInfo &_value) { std::get< 3>(values_) = _value; }
        inline const StTPMSTireInfo &getRl() const { return std::get< 4>(values_); }
        inline void setRl(const StTPMSTireInfo &_value) { std::get< 4>(values_) = _value; }
        inline const StTPMSTireInfo &getRr() const { return std::get< 5>(values_); }
        inline void setRr(const StTPMSTireInfo &_value) { std::get< 5>(values_) = _value; }
        inline bool operator==(const StDriveAssistTPMSInfo& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getUnit() == _other.getUnit() && getFl() == _other.getFl() && getFr() == _other.getFr() && getRl() == _other.getRl() && getRr() == _other.getRr());
        }
        inline bool operator!=(const StDriveAssistTPMSInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumAWDAngle : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            AWD_ANGLE_LEFT_30 = 0,
            AWD_ANGLE_LEFT_24 = 1,
            AWD_ANGLE_LEFT_18 = 2,
            AWD_ANGLE_LEFT_12 = 3,
            AWD_ANGLE_LEFT_6 = 4,
            AWD_ANGLE_0 = 5,
            AWD_ANGLE_RIGHT_6 = 6,
            AWD_ANGLE_RIGHT_12 = 7,
            AWD_ANGLE_RIGHT_18 = 8,
            AWD_ANGLE_RIGHT_24 = 9,
            AWD_ANGLE_RIGHT_30 = 10
        };
    
        EnumAWDAngle()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::AWD_ANGLE_LEFT_30)) {}
        EnumAWDAngle(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::AWD_ANGLE_LEFT_30):
                case static_cast< int32_t>(Literal::AWD_ANGLE_LEFT_24):
                case static_cast< int32_t>(Literal::AWD_ANGLE_LEFT_18):
                case static_cast< int32_t>(Literal::AWD_ANGLE_LEFT_12):
                case static_cast< int32_t>(Literal::AWD_ANGLE_LEFT_6):
                case static_cast< int32_t>(Literal::AWD_ANGLE_0):
                case static_cast< int32_t>(Literal::AWD_ANGLE_RIGHT_6):
                case static_cast< int32_t>(Literal::AWD_ANGLE_RIGHT_12):
                case static_cast< int32_t>(Literal::AWD_ANGLE_RIGHT_18):
                case static_cast< int32_t>(Literal::AWD_ANGLE_RIGHT_24):
                case static_cast< int32_t>(Literal::AWD_ANGLE_RIGHT_30):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumAWDAngle &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumAWDAngle &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumAWDAngle &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumAWDAngle &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumAWDAngle &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumAWDAngle &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StDriveAssistAWDInfo : CommonAPI::Struct< EnumAWDAngle, uint8_t, uint8_t> {
    
        StDriveAssistAWDInfo()
        {
            std::get< 0>(values_) = EnumAWDAngle();
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
        }
        StDriveAssistAWDInfo(const EnumAWDAngle &_angle, const uint8_t &_front_level, const uint8_t &_rear_level)
        {
            std::get< 0>(values_) = _angle;
            std::get< 1>(values_) = _front_level;
            std::get< 2>(values_) = _rear_level;
        }
        inline const EnumAWDAngle &getAngle() const { return std::get< 0>(values_); }
        inline void setAngle(const EnumAWDAngle &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getFront_level() const { return std::get< 1>(values_); }
        inline void setFront_level(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getRear_level() const { return std::get< 2>(values_); }
        inline void setRear_level(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StDriveAssistAWDInfo& _other) const {
        return (getAngle() == _other.getAngle() && getFront_level() == _other.getFront_level() && getRear_level() == _other.getRear_level());
        }
        inline bool operator!=(const StDriveAssistAWDInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumEnergyFlowDisplayType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            ENERGY_FLOW_OFF = 0,
            ENERGY_FLOW_B_W = 1,
            ENERGY_FLOW_BE_W = 2,
            ENERGY_FLOW_E_W = 3,
            ENERGY_FLOW_E_B = 4,
            ENERGY_FLOW_W_B = 5,
            ENERGY_FLOW_W_E = 6,
            ENERGY_FLOW_E_WB = 7,
            ENERGY_FLOW_E_B_W = 8,
            ENERGY_FLOW_EW_B = 9,
            ENERGY_FLOW_W_EB = 10,
            ENERGY_FLOW_MAX = 11
        };
    
        EnumEnergyFlowDisplayType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::ENERGY_FLOW_OFF)) {}
        EnumEnergyFlowDisplayType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::ENERGY_FLOW_OFF):
                case static_cast< int32_t>(Literal::ENERGY_FLOW_B_W):
                case static_cast< int32_t>(Literal::ENERGY_FLOW_BE_W):
                case static_cast< int32_t>(Literal::ENERGY_FLOW_E_W):
                case static_cast< int32_t>(Literal::ENERGY_FLOW_E_B):
                case static_cast< int32_t>(Literal::ENERGY_FLOW_W_B):
                case static_cast< int32_t>(Literal::ENERGY_FLOW_W_E):
                case static_cast< int32_t>(Literal::ENERGY_FLOW_E_WB):
                case static_cast< int32_t>(Literal::ENERGY_FLOW_E_B_W):
                case static_cast< int32_t>(Literal::ENERGY_FLOW_EW_B):
                case static_cast< int32_t>(Literal::ENERGY_FLOW_W_EB):
                case static_cast< int32_t>(Literal::ENERGY_FLOW_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumEnergyFlowDisplayType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumEnergyFlowDisplayType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumEnergyFlowDisplayType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumEnergyFlowDisplayType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumEnergyFlowDisplayType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumEnergyFlowDisplayType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StEnergyFlowInfo : CommonAPI::Struct< EnumEnergyFlowDisplayType, uint8_t> {
    
        StEnergyFlowInfo()
        {
            std::get< 0>(values_) = EnumEnergyFlowDisplayType();
            std::get< 1>(values_) = 0u;
        }
        StEnergyFlowInfo(const EnumEnergyFlowDisplayType &_disp_type, const uint8_t &_level)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _level;
        }
        inline const EnumEnergyFlowDisplayType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumEnergyFlowDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getLevel() const { return std::get< 1>(values_); }
        inline void setLevel(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StEnergyFlowInfo& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getLevel() == _other.getLevel());
        }
        inline bool operator!=(const StEnergyFlowInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumMyDrvModeDispType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            MY_DRV_DISP_NONE = 0,
            MY_DRV_DISP_CRUISE_MODE = 1,
            MY_DRV_DISP_ON = 2,
            MY_DRV_DISP_MAX = 3
        };
    
        EnumMyDrvModeDispType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::MY_DRV_DISP_NONE)) {}
        EnumMyDrvModeDispType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::MY_DRV_DISP_NONE):
                case static_cast< int32_t>(Literal::MY_DRV_DISP_CRUISE_MODE):
                case static_cast< int32_t>(Literal::MY_DRV_DISP_ON):
                case static_cast< int32_t>(Literal::MY_DRV_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumMyDrvModeDispType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumMyDrvModeDispType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumMyDrvModeDispType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumMyDrvModeDispType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumMyDrvModeDispType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumMyDrvModeDispType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumMyDrvModeFocus : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            MY_DRV_FOCUS_OFF = 0,
            MY_DRV_FOCUS_ECONOMY = 1,
            MY_DRV_FOCUS_NORMAL = 2,
            MY_DRV_FOCUS_NO_ECONOMY = 3,
            MY_DRV_FOCUS_MAX = 4
        };
    
        EnumMyDrvModeFocus()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::MY_DRV_FOCUS_OFF)) {}
        EnumMyDrvModeFocus(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::MY_DRV_FOCUS_OFF):
                case static_cast< int32_t>(Literal::MY_DRV_FOCUS_ECONOMY):
                case static_cast< int32_t>(Literal::MY_DRV_FOCUS_NORMAL):
                case static_cast< int32_t>(Literal::MY_DRV_FOCUS_NO_ECONOMY):
                case static_cast< int32_t>(Literal::MY_DRV_FOCUS_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumMyDrvModeFocus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumMyDrvModeFocus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumMyDrvModeFocus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumMyDrvModeFocus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumMyDrvModeFocus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumMyDrvModeFocus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StFuelEffValue : CommonAPI::Struct< EnumValueDisplayType, uint8_t> {
    
        StFuelEffValue()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = 0u;
        }
        StFuelEffValue(const EnumValueDisplayType &_type, const uint8_t &_FuelEff)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _FuelEff;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getFuelEff() const { return std::get< 1>(values_); }
        inline void setFuelEff(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StFuelEffValue& _other) const {
        return (getType() == _other.getType() && getFuelEff() == _other.getFuelEff());
        }
        inline bool operator!=(const StFuelEffValue &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StMyDrvModeInfo : CommonAPI::Struct< EnumMyDrvModeDispType, EnumMyDrvModeFocus, StFuelEffValue, StFuelEffValue, StFuelEffValue> {
    
        StMyDrvModeInfo()
        {
            std::get< 0>(values_) = EnumMyDrvModeDispType();
            std::get< 1>(values_) = EnumMyDrvModeFocus();
            std::get< 2>(values_) = StFuelEffValue();
            std::get< 3>(values_) = StFuelEffValue();
            std::get< 4>(values_) = StFuelEffValue();
        }
        StMyDrvModeInfo(const EnumMyDrvModeDispType &_disp_type, const EnumMyDrvModeFocus &_focus, const StFuelEffValue &_Normal, const StFuelEffValue &_Low, const StFuelEffValue &_High)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _focus;
            std::get< 2>(values_) = _Normal;
            std::get< 3>(values_) = _Low;
            std::get< 4>(values_) = _High;
        }
        inline const EnumMyDrvModeDispType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumMyDrvModeDispType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumMyDrvModeFocus &getFocus() const { return std::get< 1>(values_); }
        inline void setFocus(const EnumMyDrvModeFocus &_value) { std::get< 1>(values_) = _value; }
        inline const StFuelEffValue &getNormal() const { return std::get< 2>(values_); }
        inline void setNormal(const StFuelEffValue &_value) { std::get< 2>(values_) = _value; }
        inline const StFuelEffValue &getLow() const { return std::get< 3>(values_); }
        inline void setLow(const StFuelEffValue &_value) { std::get< 3>(values_) = _value; }
        inline const StFuelEffValue &getHigh() const { return std::get< 4>(values_); }
        inline void setHigh(const StFuelEffValue &_value) { std::get< 4>(values_) = _value; }
        inline bool operator==(const StMyDrvModeInfo& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getFocus() == _other.getFocus() && getNormal() == _other.getNormal() && getLow() == _other.getLow() && getHigh() == _other.getHigh());
        }
        inline bool operator!=(const StMyDrvModeInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StContentsDTE : CommonAPI::Struct< EnumValueDisplayType, StTripValue16, EnumSpeedoUnit> {
    
        StContentsDTE()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = StTripValue16();
            std::get< 2>(values_) = EnumSpeedoUnit();
        }
        StContentsDTE(const EnumValueDisplayType &_type, const StTripValue16 &_dte, const EnumSpeedoUnit &_unit)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _dte;
            std::get< 2>(values_) = _unit;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const StTripValue16 &getDte() const { return std::get< 1>(values_); }
        inline void setDte(const StTripValue16 &_value) { std::get< 1>(values_) = _value; }
        inline const EnumSpeedoUnit &getUnit() const { return std::get< 2>(values_); }
        inline void setUnit(const EnumSpeedoUnit &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StContentsDTE& _other) const {
        return (getType() == _other.getType() && getDte() == _other.getDte() && getUnit() == _other.getUnit());
        }
        inline bool operator!=(const StContentsDTE &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StContentsOAT : CommonAPI::Struct< EnumValueDisplayType, StTripValue8, EnumTemperatureUnit, EnumValueDisplayType> {
    
        StContentsOAT()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = StTripValue8();
            std::get< 2>(values_) = EnumTemperatureUnit();
            std::get< 3>(values_) = EnumValueDisplayType();
        }
        StContentsOAT(const EnumValueDisplayType &_type, const StTripValue8 &_oat, const EnumTemperatureUnit &_unit, const EnumValueDisplayType &_ice_warn)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _oat;
            std::get< 2>(values_) = _unit;
            std::get< 3>(values_) = _ice_warn;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const StTripValue8 &getOat() const { return std::get< 1>(values_); }
        inline void setOat(const StTripValue8 &_value) { std::get< 1>(values_) = _value; }
        inline const EnumTemperatureUnit &getUnit() const { return std::get< 2>(values_); }
        inline void setUnit(const EnumTemperatureUnit &_value) { std::get< 2>(values_) = _value; }
        inline const EnumValueDisplayType &getIce_warn() const { return std::get< 3>(values_); }
        inline void setIce_warn(const EnumValueDisplayType &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const StContentsOAT& _other) const {
        return (getType() == _other.getType() && getOat() == _other.getOat() && getUnit() == _other.getUnit() && getIce_warn() == _other.getIce_warn());
        }
        inline bool operator!=(const StContentsOAT &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StContentsODO : CommonAPI::Struct< StTripValue32, EnumSpeedoUnit> {
    
        StContentsODO()
        {
            std::get< 0>(values_) = StTripValue32();
            std::get< 1>(values_) = EnumSpeedoUnit();
        }
        StContentsODO(const StTripValue32 &_odo, const EnumSpeedoUnit &_unit)
        {
            std::get< 0>(values_) = _odo;
            std::get< 1>(values_) = _unit;
        }
        inline const StTripValue32 &getOdo() const { return std::get< 0>(values_); }
        inline void setOdo(const StTripValue32 &_value) { std::get< 0>(values_) = _value; }
        inline const EnumSpeedoUnit &getUnit() const { return std::get< 1>(values_); }
        inline void setUnit(const EnumSpeedoUnit &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StContentsODO& _other) const {
        return (getOdo() == _other.getOdo() && getUnit() == _other.getUnit());
        }
        inline bool operator!=(const StContentsODO &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumGearState : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            GEAR_STATE_NONE = 0,
            GEAR_STATE_P = 1,
            GEAR_STATE_R = 2,
            GEAR_STATE_N = 3,
            GEAR_STATE_D = 4,
            GEAR_STATE_E = 5,
            GEAR_STATE_S = 6,
            GEAR_STATE_DCT_S = 7,
            GEAR_STATE_DCT_D = 8,
            GEAR_STATE_MAX = 9
        };
    
        EnumGearState()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::GEAR_STATE_NONE)) {}
        EnumGearState(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::GEAR_STATE_NONE):
                case static_cast< int32_t>(Literal::GEAR_STATE_P):
                case static_cast< int32_t>(Literal::GEAR_STATE_R):
                case static_cast< int32_t>(Literal::GEAR_STATE_N):
                case static_cast< int32_t>(Literal::GEAR_STATE_D):
                case static_cast< int32_t>(Literal::GEAR_STATE_E):
                case static_cast< int32_t>(Literal::GEAR_STATE_S):
                case static_cast< int32_t>(Literal::GEAR_STATE_DCT_S):
                case static_cast< int32_t>(Literal::GEAR_STATE_DCT_D):
                case static_cast< int32_t>(Literal::GEAR_STATE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumGearState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumGearState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumGearState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumGearState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumGearState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumGearState &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumGearTarget : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            GEAR_TARGET_NONE = 0,
            GEAR_TARGET_1 = 1,
            GEAR_TARGET_2 = 2,
            GEAR_TARGET_3 = 3,
            GEAR_TARGET_4 = 4,
            GEAR_TARGET_5 = 5,
            GEAR_TARGET_6 = 6,
            GEAR_TARGET_7 = 7,
            GEAR_TARGET_8 = 8,
            GEAR_TARGET_MAX = 9
        };
    
        EnumGearTarget()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::GEAR_TARGET_NONE)) {}
        EnumGearTarget(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::GEAR_TARGET_NONE):
                case static_cast< int32_t>(Literal::GEAR_TARGET_1):
                case static_cast< int32_t>(Literal::GEAR_TARGET_2):
                case static_cast< int32_t>(Literal::GEAR_TARGET_3):
                case static_cast< int32_t>(Literal::GEAR_TARGET_4):
                case static_cast< int32_t>(Literal::GEAR_TARGET_5):
                case static_cast< int32_t>(Literal::GEAR_TARGET_6):
                case static_cast< int32_t>(Literal::GEAR_TARGET_7):
                case static_cast< int32_t>(Literal::GEAR_TARGET_8):
                case static_cast< int32_t>(Literal::GEAR_TARGET_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumGearTarget &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumGearTarget &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumGearTarget &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumGearTarget &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumGearTarget &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumGearTarget &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumGearArrow : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            GEAR_ARROW_OFF = 0,
            GEAR_ARROW_UP = 1,
            GEAR_ARROW_DOWN = 2,
            GEAR_ARROW_MAX = 3
        };
    
        EnumGearArrow()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::GEAR_ARROW_OFF)) {}
        EnumGearArrow(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::GEAR_ARROW_OFF):
                case static_cast< int32_t>(Literal::GEAR_ARROW_UP):
                case static_cast< int32_t>(Literal::GEAR_ARROW_DOWN):
                case static_cast< int32_t>(Literal::GEAR_ARROW_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumGearArrow &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumGearArrow &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumGearArrow &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumGearArrow &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumGearArrow &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumGearArrow &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumGearBlinkState : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            GEAR_BLINK_STATE_OFF = 0,
            GEAR_BLINK_STATTE_500MS = 1,
            GEAR_BLINK_STATTE_200MS = 2,
            GEAR_BLINK_STATTE_MAX = 3
        };
    
        EnumGearBlinkState()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::GEAR_BLINK_STATE_OFF)) {}
        EnumGearBlinkState(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::GEAR_BLINK_STATE_OFF):
                case static_cast< int32_t>(Literal::GEAR_BLINK_STATTE_500MS):
                case static_cast< int32_t>(Literal::GEAR_BLINK_STATTE_200MS):
                case static_cast< int32_t>(Literal::GEAR_BLINK_STATTE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumGearBlinkState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumGearBlinkState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumGearBlinkState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumGearBlinkState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumGearBlinkState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumGearBlinkState &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StContentsGearInfo : CommonAPI::Struct< EnumGearState, EnumGearTarget, EnumGearArrow, EnumGearBlinkState> {
    
        StContentsGearInfo()
        {
            std::get< 0>(values_) = EnumGearState();
            std::get< 1>(values_) = EnumGearTarget();
            std::get< 2>(values_) = EnumGearArrow();
            std::get< 3>(values_) = EnumGearBlinkState();
        }
        StContentsGearInfo(const EnumGearState &__state, const EnumGearTarget &__target, const EnumGearArrow &__arrow, const EnumGearBlinkState &__blink)
        {
            std::get< 0>(values_) = __state;
            std::get< 1>(values_) = __target;
            std::get< 2>(values_) = __arrow;
            std::get< 3>(values_) = __blink;
        }
        inline const EnumGearState &get_state() const { return std::get< 0>(values_); }
        inline void set_state(const EnumGearState &_value) { std::get< 0>(values_) = _value; }
        inline const EnumGearTarget &get_target() const { return std::get< 1>(values_); }
        inline void set_target(const EnumGearTarget &_value) { std::get< 1>(values_) = _value; }
        inline const EnumGearArrow &get_arrow() const { return std::get< 2>(values_); }
        inline void set_arrow(const EnumGearArrow &_value) { std::get< 2>(values_) = _value; }
        inline const EnumGearBlinkState &get_blink() const { return std::get< 3>(values_); }
        inline void set_blink(const EnumGearBlinkState &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const StContentsGearInfo& _other) const {
        return (get_state() == _other.get_state() && get_target() == _other.get_target() && get_arrow() == _other.get_arrow() && get_blink() == _other.get_blink());
        }
        inline bool operator!=(const StContentsGearInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumContentsCCDispType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            CT_CC_DISP_NONE = 0,
            CT_CC_DISP_OFF = 1,
            CT_CC_DISP_CHECKING_OFF = 2,
            CT_CC_DISP_STANDBY = 3,
            CT_CC_DISP_ENGAGED = 4,
            CT_CC_DISP_MAX = 5
        };
    
        EnumContentsCCDispType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::CT_CC_DISP_NONE)) {}
        EnumContentsCCDispType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::CT_CC_DISP_NONE):
                case static_cast< int32_t>(Literal::CT_CC_DISP_OFF):
                case static_cast< int32_t>(Literal::CT_CC_DISP_CHECKING_OFF):
                case static_cast< int32_t>(Literal::CT_CC_DISP_STANDBY):
                case static_cast< int32_t>(Literal::CT_CC_DISP_ENGAGED):
                case static_cast< int32_t>(Literal::CT_CC_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumContentsCCDispType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumContentsCCDispType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumContentsCCDispType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumContentsCCDispType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumContentsCCDispType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumContentsCCDispType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StContentsCCValue : CommonAPI::Struct< EnumValueDisplayType, uint8_t> {
    
        StContentsCCValue()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = 0u;
        }
        StContentsCCValue(const EnumValueDisplayType &_type, const uint8_t &_value)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _value;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getValue() const { return std::get< 1>(values_); }
        inline void setValue(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StContentsCCValue& _other) const {
        return (getType() == _other.getType() && getValue() == _other.getValue());
        }
        inline bool operator!=(const StContentsCCValue &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StContentsCCInfo : CommonAPI::Struct< EnumContentsCCDispType, StContentsCCValue> {
    
        StContentsCCInfo()
        {
            std::get< 0>(values_) = EnumContentsCCDispType();
            std::get< 1>(values_) = StContentsCCValue();
        }
        StContentsCCInfo(const EnumContentsCCDispType &_disp_type, const StContentsCCValue &_speed)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _speed;
        }
        inline const EnumContentsCCDispType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumContentsCCDispType &_value) { std::get< 0>(values_) = _value; }
        inline const StContentsCCValue &getSpeed() const { return std::get< 1>(values_); }
        inline void setSpeed(const StContentsCCValue &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StContentsCCInfo& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getSpeed() == _other.getSpeed());
        }
        inline bool operator!=(const StContentsCCInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StContentsObjectInfo : CommonAPI::Struct< bool, bool, EnumCruiseCtrlObjGapLevel> {
    
        StContentsObjectInfo()
        {
            std::get< 0>(values_) = false;
            std::get< 1>(values_) = false;
            std::get< 2>(values_) = EnumCruiseCtrlObjGapLevel();
        }
        StContentsObjectInfo(const bool &_enable, const bool &_brightness, const EnumCruiseCtrlObjGapLevel &_obj_gap)
        {
            std::get< 0>(values_) = _enable;
            std::get< 1>(values_) = _brightness;
            std::get< 2>(values_) = _obj_gap;
        }
        inline const bool &getEnable() const { return std::get< 0>(values_); }
        inline void setEnable(const bool _value) { std::get< 0>(values_) = _value; }
        inline const bool &getBrightness() const { return std::get< 1>(values_); }
        inline void setBrightness(const bool _value) { std::get< 1>(values_) = _value; }
        inline const EnumCruiseCtrlObjGapLevel &getObj_gap() const { return std::get< 2>(values_); }
        inline void setObj_gap(const EnumCruiseCtrlObjGapLevel &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StContentsObjectInfo& _other) const {
        return (getEnable() == _other.getEnable() && getBrightness() == _other.getBrightness() && getObj_gap() == _other.getObj_gap());
        }
        inline bool operator!=(const StContentsObjectInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StContentsSCCDistance : CommonAPI::Struct< EnumSCCTargetDispType, EnumCruiseCtrlTauGapLevel> {
    
        StContentsSCCDistance()
        {
            std::get< 0>(values_) = EnumSCCTargetDispType();
            std::get< 1>(values_) = EnumCruiseCtrlTauGapLevel();
        }
        StContentsSCCDistance(const EnumSCCTargetDispType &_disp_type, const EnumCruiseCtrlTauGapLevel &_level)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _level;
        }
        inline const EnumSCCTargetDispType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumSCCTargetDispType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumCruiseCtrlTauGapLevel &getLevel() const { return std::get< 1>(values_); }
        inline void setLevel(const EnumCruiseCtrlTauGapLevel &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StContentsSCCDistance& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getLevel() == _other.getLevel());
        }
        inline bool operator!=(const StContentsSCCDistance &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StContentsSCCInfo : CommonAPI::Struct< EnumCruiseCtrlDisplayType2, EnumCruiseCtrlAutoDispType, StSCCSymbol, StSccSetSpeed, StContentsObjectInfo, StContentsSCCDistance> {
    
        StContentsSCCInfo()
        {
            std::get< 0>(values_) = EnumCruiseCtrlDisplayType2();
            std::get< 1>(values_) = EnumCruiseCtrlAutoDispType();
            std::get< 2>(values_) = StSCCSymbol();
            std::get< 3>(values_) = StSccSetSpeed();
            std::get< 4>(values_) = StContentsObjectInfo();
            std::get< 5>(values_) = StContentsSCCDistance();
        }
        StContentsSCCInfo(const EnumCruiseCtrlDisplayType2 &_disp_type, const EnumCruiseCtrlAutoDispType &_disp_auto, const StSCCSymbol &_symbol, const StSccSetSpeed &_v_set_speed, const StContentsObjectInfo &_vehicle, const StContentsSCCDistance &_distance)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _disp_auto;
            std::get< 2>(values_) = _symbol;
            std::get< 3>(values_) = _v_set_speed;
            std::get< 4>(values_) = _vehicle;
            std::get< 5>(values_) = _distance;
        }
        inline const EnumCruiseCtrlDisplayType2 &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumCruiseCtrlDisplayType2 &_value) { std::get< 0>(values_) = _value; }
        inline const EnumCruiseCtrlAutoDispType &getDisp_auto() const { return std::get< 1>(values_); }
        inline void setDisp_auto(const EnumCruiseCtrlAutoDispType &_value) { std::get< 1>(values_) = _value; }
        inline const StSCCSymbol &getSymbol() const { return std::get< 2>(values_); }
        inline void setSymbol(const StSCCSymbol &_value) { std::get< 2>(values_) = _value; }
        inline const StSccSetSpeed &getV_set_speed() const { return std::get< 3>(values_); }
        inline void setV_set_speed(const StSccSetSpeed &_value) { std::get< 3>(values_) = _value; }
        inline const StContentsObjectInfo &getVehicle() const { return std::get< 4>(values_); }
        inline void setVehicle(const StContentsObjectInfo &_value) { std::get< 4>(values_) = _value; }
        inline const StContentsSCCDistance &getDistance() const { return std::get< 5>(values_); }
        inline void setDistance(const StContentsSCCDistance &_value) { std::get< 5>(values_) = _value; }
        inline bool operator==(const StContentsSCCInfo& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getDisp_auto() == _other.getDisp_auto() && getSymbol() == _other.getSymbol() && getV_set_speed() == _other.getV_set_speed() && getVehicle() == _other.getVehicle() && getDistance() == _other.getDistance());
        }
        inline bool operator!=(const StContentsSCCInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumContentsCoastingDispType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            CONT_COAST_DISP_NONE = 0,
            CONT_COAST_DISP_READY = 1,
            CONT_COAST_DISP_ACTIVE = 2,
            CONT_COAST_DISP_NO_SYMBOL = 3,
            CONT_COAST_DISP_MAX = 4
        };
    
        EnumContentsCoastingDispType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::CONT_COAST_DISP_NONE)) {}
        EnumContentsCoastingDispType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::CONT_COAST_DISP_NONE):
                case static_cast< int32_t>(Literal::CONT_COAST_DISP_READY):
                case static_cast< int32_t>(Literal::CONT_COAST_DISP_ACTIVE):
                case static_cast< int32_t>(Literal::CONT_COAST_DISP_NO_SYMBOL):
                case static_cast< int32_t>(Literal::CONT_COAST_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumContentsCoastingDispType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumContentsCoastingDispType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumContentsCoastingDispType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumContentsCoastingDispType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumContentsCoastingDispType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumContentsCoastingDispType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StContentsCoasting : CommonAPI::Struct< EnumContentsCoastingDispType, bool> {
    
        StContentsCoasting()
        {
            std::get< 0>(values_) = EnumContentsCoastingDispType();
            std::get< 1>(values_) = false;
        }
        StContentsCoasting(const EnumContentsCoastingDispType &_disp_type, const bool &_blink)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _blink;
        }
        inline const EnumContentsCoastingDispType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumContentsCoastingDispType &_value) { std::get< 0>(values_) = _value; }
        inline const bool &getBlink() const { return std::get< 1>(values_); }
        inline void setBlink(const bool _value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StContentsCoasting& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getBlink() == _other.getBlink());
        }
        inline bool operator!=(const StContentsCoasting &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumDISDispType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            DIS_DISP_NONE = 0,
            DIS_DISP_NON_SPD_TRAP = 1,
            DIS_DISP_WARN_ZONE = 2,
            DIS_DISP_CURVE_WARN = 3,
            DIS_DISP_SPEED_INFO = 4,
            DIS_DISP_MAX = 5
        };
    
        EnumDISDispType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::DIS_DISP_NONE)) {}
        EnumDISDispType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::DIS_DISP_NONE):
                case static_cast< int32_t>(Literal::DIS_DISP_NON_SPD_TRAP):
                case static_cast< int32_t>(Literal::DIS_DISP_WARN_ZONE):
                case static_cast< int32_t>(Literal::DIS_DISP_CURVE_WARN):
                case static_cast< int32_t>(Literal::DIS_DISP_SPEED_INFO):
                case static_cast< int32_t>(Literal::DIS_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumDISDispType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumDISDispType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumDISDispType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumDISDispType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumDISDispType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumDISDispType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StDISSpdValue : CommonAPI::Struct< EnumValueDisplayType, uint8_t> {
    
        StDISSpdValue()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = 0u;
        }
        StDISSpdValue(const EnumValueDisplayType &_type, const uint8_t &_value)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _value;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getValue() const { return std::get< 1>(values_); }
        inline void setValue(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StDISSpdValue& _other) const {
        return (getType() == _other.getType() && getValue() == _other.getValue());
        }
        inline bool operator!=(const StDISSpdValue &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StDISItem : CommonAPI::Struct< EnumDISDispType, uint8_t> {
    
        StDISItem()
        {
            std::get< 0>(values_) = EnumDISDispType();
            std::get< 1>(values_) = 0u;
        }
        StDISItem(const EnumDISDispType &_disp_type, const uint8_t &_disp_id)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _disp_id;
        }
        inline const EnumDISDispType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumDISDispType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getDisp_id() const { return std::get< 1>(values_); }
        inline void setDisp_id(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StDISItem& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getDisp_id() == _other.getDisp_id());
        }
        inline bool operator!=(const StDISItem &_other) const {
            return !((*this) == _other);
        }
    
    };
    typedef std::vector< McuManagerTypes::StDISItem> DISList;
    struct StContentsDISInfo : CommonAPI::Struct< DISList, StDISSpdValue> {
    
        StContentsDISInfo()
        {
            std::get< 0>(values_) = DISList();
            std::get< 1>(values_) = StDISSpdValue();
        }
        StContentsDISInfo(const DISList &_list, const StDISSpdValue &_speed)
        {
            std::get< 0>(values_) = _list;
            std::get< 1>(values_) = _speed;
        }
        inline const DISList &getList() const { return std::get< 0>(values_); }
        inline void setList(const DISList &_value) { std::get< 0>(values_) = _value; }
        inline const StDISSpdValue &getSpeed() const { return std::get< 1>(values_); }
        inline void setSpeed(const StDISSpdValue &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StContentsDISInfo& _other) const {
        return (getList() == _other.getList() && getSpeed() == _other.getSpeed());
        }
        inline bool operator!=(const StContentsDISInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StContentsISLWInfo : CommonAPI::Struct< EnumISLWDisplayType, uint8_t, EnumISLWProhibitionType, bool> {
    
        StContentsISLWInfo()
        {
            std::get< 0>(values_) = EnumISLWDisplayType();
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = EnumISLWProhibitionType();
            std::get< 3>(values_) = false;
        }
        StContentsISLWInfo(const EnumISLWDisplayType &_disp_type, const uint8_t &_Speed, const EnumISLWProhibitionType &_prohibit, const bool &_OverlapSign)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _Speed;
            std::get< 2>(values_) = _prohibit;
            std::get< 3>(values_) = _OverlapSign;
        }
        inline const EnumISLWDisplayType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumISLWDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getSpeed() const { return std::get< 1>(values_); }
        inline void setSpeed(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const EnumISLWProhibitionType &getProhibit() const { return std::get< 2>(values_); }
        inline void setProhibit(const EnumISLWProhibitionType &_value) { std::get< 2>(values_) = _value; }
        inline const bool &getOverlapSign() const { return std::get< 3>(values_); }
        inline void setOverlapSign(const bool _value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const StContentsISLWInfo& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getSpeed() == _other.getSpeed() && getProhibit() == _other.getProhibit() && getOverlapSign() == _other.getOverlapSign());
        }
        inline bool operator!=(const StContentsISLWInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumEcoPwrDispState : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            ECO_PWR_DISP_OFF = 0,
            ECO_PWR_DISP_TRANSITION_TO_OFF = 1,
            ECO_PWR_DISP_OFF_PREPARE = 2,
            ECO_PWR_DISP_ON_PREPARE = 3,
            ECO_PWR_DISP_TRANSITION_TO_ON = 4,
            ECO_PWR_DISP_ON = 5,
            ECO_PWR_DISP_MAX = 6
        };
    
        EnumEcoPwrDispState()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::ECO_PWR_DISP_OFF)) {}
        EnumEcoPwrDispState(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::ECO_PWR_DISP_OFF):
                case static_cast< int32_t>(Literal::ECO_PWR_DISP_TRANSITION_TO_OFF):
                case static_cast< int32_t>(Literal::ECO_PWR_DISP_OFF_PREPARE):
                case static_cast< int32_t>(Literal::ECO_PWR_DISP_ON_PREPARE):
                case static_cast< int32_t>(Literal::ECO_PWR_DISP_TRANSITION_TO_ON):
                case static_cast< int32_t>(Literal::ECO_PWR_DISP_ON):
                case static_cast< int32_t>(Literal::ECO_PWR_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumEcoPwrDispState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumEcoPwrDispState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumEcoPwrDispState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumEcoPwrDispState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumEcoPwrDispState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumEcoPwrDispState &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumContentsRSBRState : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            CT_RSBR_STATE_NONE = 0,
            CT_RSBR_STATE_NO_PERSON = 1,
            CT_RSBR_STATE_USED_NOT_BELT = 2,
            CT_RSBR_STATE_USED_BELT = 3,
            CT_RSBR_STATE_MAX = 4
        };
    
        EnumContentsRSBRState()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::CT_RSBR_STATE_NONE)) {}
        EnumContentsRSBRState(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::CT_RSBR_STATE_NONE):
                case static_cast< int32_t>(Literal::CT_RSBR_STATE_NO_PERSON):
                case static_cast< int32_t>(Literal::CT_RSBR_STATE_USED_NOT_BELT):
                case static_cast< int32_t>(Literal::CT_RSBR_STATE_USED_BELT):
                case static_cast< int32_t>(Literal::CT_RSBR_STATE_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumContentsRSBRState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumContentsRSBRState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumContentsRSBRState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumContentsRSBRState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumContentsRSBRState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumContentsRSBRState &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StContentsRSBRInfo : CommonAPI::Struct< EnumValueDisplayType, EnumContentsRSBRState, EnumContentsRSBRState, EnumContentsRSBRState> {
    
        StContentsRSBRInfo()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = EnumContentsRSBRState();
            std::get< 2>(values_) = EnumContentsRSBRState();
            std::get< 3>(values_) = EnumContentsRSBRState();
        }
        StContentsRSBRInfo(const EnumValueDisplayType &_type, const EnumContentsRSBRState &_rear_left, const EnumContentsRSBRState &_rear_center, const EnumContentsRSBRState &_rear_right)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _rear_left;
            std::get< 2>(values_) = _rear_center;
            std::get< 3>(values_) = _rear_right;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumContentsRSBRState &getRear_left() const { return std::get< 1>(values_); }
        inline void setRear_left(const EnumContentsRSBRState &_value) { std::get< 1>(values_) = _value; }
        inline const EnumContentsRSBRState &getRear_center() const { return std::get< 2>(values_); }
        inline void setRear_center(const EnumContentsRSBRState &_value) { std::get< 2>(values_) = _value; }
        inline const EnumContentsRSBRState &getRear_right() const { return std::get< 3>(values_); }
        inline void setRear_right(const EnumContentsRSBRState &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const StContentsRSBRInfo& _other) const {
        return (getType() == _other.getType() && getRear_left() == _other.getRear_left() && getRear_center() == _other.getRear_center() && getRear_right() == _other.getRear_right());
        }
        inline bool operator!=(const StContentsRSBRInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumContentsSpdLimitDispType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            CT_SPD_LIMIT_DISP_NONE = 0,
            CT_SPD_LIMIT_DISP_OFF = 1,
            CT_SPD_LIMIT_DISP_STANDBY = 2,
            CT_SPD_LIMIT_DISP_ENGAGED = 3,
            CT_SPD_LIMIT_DISP_MAX = 4
        };
    
        EnumContentsSpdLimitDispType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::CT_SPD_LIMIT_DISP_NONE)) {}
        EnumContentsSpdLimitDispType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::CT_SPD_LIMIT_DISP_NONE):
                case static_cast< int32_t>(Literal::CT_SPD_LIMIT_DISP_OFF):
                case static_cast< int32_t>(Literal::CT_SPD_LIMIT_DISP_STANDBY):
                case static_cast< int32_t>(Literal::CT_SPD_LIMIT_DISP_ENGAGED):
                case static_cast< int32_t>(Literal::CT_SPD_LIMIT_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumContentsSpdLimitDispType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumContentsSpdLimitDispType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumContentsSpdLimitDispType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumContentsSpdLimitDispType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumContentsSpdLimitDispType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumContentsSpdLimitDispType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StMSLAValue : CommonAPI::Struct< EnumValueDisplayType, uint8_t> {
    
        StMSLAValue()
        {
            std::get< 0>(values_) = EnumValueDisplayType();
            std::get< 1>(values_) = 0u;
        }
        StMSLAValue(const EnumValueDisplayType &_type, const uint8_t &_value)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _value;
        }
        inline const EnumValueDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumValueDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getValue() const { return std::get< 1>(values_); }
        inline void setValue(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StMSLAValue& _other) const {
        return (getType() == _other.getType() && getValue() == _other.getValue());
        }
        inline bool operator!=(const StMSLAValue &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StContentsSpdLimitInfo : CommonAPI::Struct< EnumContentsSpdLimitDispType, StMSLAValue> {
    
        StContentsSpdLimitInfo()
        {
            std::get< 0>(values_) = EnumContentsSpdLimitDispType();
            std::get< 1>(values_) = StMSLAValue();
        }
        StContentsSpdLimitInfo(const EnumContentsSpdLimitDispType &_disp_type, const StMSLAValue &_speed)
        {
            std::get< 0>(values_) = _disp_type;
            std::get< 1>(values_) = _speed;
        }
        inline const EnumContentsSpdLimitDispType &getDisp_type() const { return std::get< 0>(values_); }
        inline void setDisp_type(const EnumContentsSpdLimitDispType &_value) { std::get< 0>(values_) = _value; }
        inline const StMSLAValue &getSpeed() const { return std::get< 1>(values_); }
        inline void setSpeed(const StMSLAValue &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const StContentsSpdLimitInfo& _other) const {
        return (getDisp_type() == _other.getDisp_type() && getSpeed() == _other.getSpeed());
        }
        inline bool operator!=(const StContentsSpdLimitInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumEventDisplayType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            EVT_DISP_NONE = 0,
            EVT_DISP_FULL = 1,
            EVT_DISP_CUSTOM = 2,
            EVT_DISP_MID = 3,
            EVT_DISP_MINI = 4,
            EVT_DISP_CONTENTS = 5,
            EVT_DISP_MAX = 6
        };
    
        EnumEventDisplayType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::EVT_DISP_NONE)) {}
        EnumEventDisplayType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::EVT_DISP_NONE):
                case static_cast< int32_t>(Literal::EVT_DISP_FULL):
                case static_cast< int32_t>(Literal::EVT_DISP_CUSTOM):
                case static_cast< int32_t>(Literal::EVT_DISP_MID):
                case static_cast< int32_t>(Literal::EVT_DISP_MINI):
                case static_cast< int32_t>(Literal::EVT_DISP_CONTENTS):
                case static_cast< int32_t>(Literal::EVT_DISP_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumEventDisplayType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumEventDisplayType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumEventDisplayType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumEventDisplayType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumEventDisplayType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumEventDisplayType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumFactoryScreenType : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            LCD_PATTERN_NONE = 0,
            LCD_PATTERN_RED = 1,
            LCD_PATTERN_GREEN = 2,
            LCD_PATTERN_BLUE = 3,
            LCD_PATTERN_VERTICAL = 4,
            LCD_PATTERN_HORIZONTAL = 5,
            LCD_PATTERN_BLACK = 6,
            LCD_PATTERN_WHITE = 7,
            LCD_PATTERN_MAX = 8
        };
    
        EnumFactoryScreenType()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::LCD_PATTERN_NONE)) {}
        EnumFactoryScreenType(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::LCD_PATTERN_NONE):
                case static_cast< int32_t>(Literal::LCD_PATTERN_RED):
                case static_cast< int32_t>(Literal::LCD_PATTERN_GREEN):
                case static_cast< int32_t>(Literal::LCD_PATTERN_BLUE):
                case static_cast< int32_t>(Literal::LCD_PATTERN_VERTICAL):
                case static_cast< int32_t>(Literal::LCD_PATTERN_HORIZONTAL):
                case static_cast< int32_t>(Literal::LCD_PATTERN_BLACK):
                case static_cast< int32_t>(Literal::LCD_PATTERN_WHITE):
                case static_cast< int32_t>(Literal::LCD_PATTERN_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumFactoryScreenType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumFactoryScreenType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumFactoryScreenType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumFactoryScreenType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumFactoryScreenType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumFactoryScreenType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct EnumEventID : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            eDispId_RENAME_ScreenOff = 0,
            eDispId_RENAME_System_Check = 1,
            eDispId_RENAME_EOL_Error = 2,
            eDispId_RENAME_Welcome = 3,
            eDispId_RENAME_SMK_P_IgnOff = 4,
            eDispId_RENAME_Wireless_Charger = 5,
            eDispId_RENAME_SunroofWindowHood_Open = 6,
            eDispId_RENAME_Goodbye = 7,
            eDispId_RENAME_SBW_VCU2_Warn_IgnOff = 8,
            eDispId_RENAME_CheckPattern = 9,
            eDispId_RENAME_SEA_IgnOff = 10,
            eDispId_RENAME_Gear_Engaged_IgnOff = 11,
            eDispId_RENAME_RearSeatAlarm_Clear = 12,
            eDispId_RENAME_RearSeatAlarm_Alarm = 13,
            eDispId_RENAME_Batt_LowTemp_IgnOff = 14,
            eDispId_RENAME_SBW_scuNMode_IgnOff = 15,
            eDispId_RENAME_UpdateMode = 16,
            eDispId_RENAME_FCA_Warn = 17,
            eDispId_RENAME_Engine_HighTemp = 18,
            eDispId_RENAME_EMS_SafetyFunction = 19,
            eDispId_RENAME_DoorHood_Moving_Open = 20,
            eDispId_RENAME_Batt_HighTemp = 21,
            eDispId_RENAME_CheckHevEngine = 22,
            eDispId_RENAME_CheckPowerSupply = 23,
            eDispId_RENAME_AHB_CheckStop = 24,
            eDispId_RENAME_UREA_Abnormal3_Check3 = 25,
            eDispId_RENAME_UREA_Shortage4 = 26,
            eDispId_RENAME_UREA_Abnormal2_Check2 = 27,
            eDispId_RENAME_UREA_Abnormal1_Check1_Stop = 28,
            eDispId_RENAME_LowBatToPGear = 29,
            eDispId_RENAME_FCA_Warn_byScc = 30,
            eDispId_RENAME_SBW_ShiftFail = 31,
            eDispId_RENAME_SEA_IgnOn = 32,
            eDispId_RENAME_FCA_LO = 33,
            eDispId_RENAME_FCA_wESA = 34,
            eDispId_RENAME_FCA_LS = 35,
            eDispId_RENAME_BCW_Warn = 36,
            eDispId_RENAME_BCA_R = 37,
            eDispId_RENAME_BCA_R_PLUS = 38,
            eDispId_RENAME_HDA_Cancel = 39,
            eDispId_RENAME_HDA_HandsOff2 = 40,
            eDispId_RENAME_LKAS_Cancel = 41,
            eDispId_RENAME_LKAS_HandsOn_Lv2 = 42,
            eDispId_RENAME_LKAS_HandsOn_Lv2_Sound = 43,
            eDispId_RENAME_HDA_HandsOff1 = 44,
            eDispId_RENAME_LKAS_HandsOn_Lv1 = 45,
            eDispId_RENAME_HDA_SCCMode = 46,
            eDispId_RENAME_HDA_HDAMode = 47,
            eDispId_RENAME_HDA_ON_REQ = 48,
            eDispId_RENAME_HDA2_ON_REQ = 49,
            eDispId_RENAME_ParkingSystem_Group1 = 50,
            eDispId_RENAME_BVM = 51,
            eDispId_RENAME_Rheostat = 52,
            eDispId_RENAME_TPMS_SavedNoti = 53,
            eDispId_RENAME_Light = 54,
            eDispId_RENAME_FrontWiper = 55,
            eDispId_RENAME_RearWiper = 56,
            eDispId_RENAME_Gear_Engaged_IgnOn = 57,
            eDispId_RENAME_SBW_VCU2_Warn_IgnOn = 58,
            eDispId_RENAME_SBW_VCU1_Warn = 59,
            eDispId_RENAME_12VBatteryReset = 60,
            eDispId_RENAME_ADAS_SettingMode = 61,
            eDispId_RENAME_AirCleaning_Onoff = 62,
            eDispId_RENAME_DMS_Fail = 63,
            eDispId_RENAME_FCEV_Regenerate = 64,
            eDispId_RENAME_DriveMode_Full = 65,
            eDispId_RENAME_CSCD_ModeChanged_Full = 66,
            eDispId_RENAME_DriveMode_Error = 67,
            eDispId_RENAME_IMS_Full = 68,
            eDispId_RENAME_SCC_Distance_Full = 69,
            eDispId_RENAME_IMS = 70,
            eDispId_RENAME_IMS_Mini = 71,
            eDispId_RENAME_AV_Mode = 72,
            eDispId_RENAME_FlexSteer = 73,
            eDispId_RENAME_2StepESC_Off = 74,
            eDispId_RENAME_SCC_ModeChange = 75,
            eDispId_RENAME_BCW_Onoff = 76,
            eDispId_RENAME_CSCD_ModeChanged_Mini = 77,
            eDispId_RENAME_DBC_Onoff = 78,
            eDispId_RENAME_4WD_Onoff = 79,
            eDispId_RENAME_DriveMode_Mini = 80,
            eDispId_RENAME_Headlamp_Off = 81,
            eDispId_RENAME_PA_ModeChange = 82,
            eDispId_RENAME_SCC_NSCC = 83,
            eDispId_RENAME_HDA2_Guide = 84,
            eDispId_RENAME_DBC_Cancel = 85,
            eDispId_RENAME_Shift_P_ToCharge = 86,
            eDispId_RENAME_CheckHevNoStart = 87,
            eDispId_RENAME_2WD_Mode = 88,
            eDispId_RENAME_ExhaustGas_TestMode = 89,
            eDispId_RENAME_TPMS_Virgin = 90,
            eDispId_RENAME_DCT_LimpHome = 91,
            eDispId_RENAME_DCT_OverHeat = 92,
            eDispId_RENAME_DCT_HillHold = 93,
            eDispId_RENAME_SCC_Popup = 94,
            eDispId_RENAME_SCC_HDA2_AutoReduce = 95,
            eDispId_RENAME_Attention_Assist = 96,
            eDispId_RENAME_EPB_Infinite = 97,
            eDispId_RENAME_ISG_Start = 98,
            eDispId_RENAME_PA = 99,
            eDispId_RENAME_PAS = 100,
            eDispId_RENAME_RCTA = 101,
            eDispId_RENAME_ParkingSystem_Group4 = 102,
            eDispId_RENAME_MDPS = 103,
            eDispId_RENAME_DCT_CoolingFinish = 104,
            eDispId_RENAME_ISG_CancelBrakeClutch = 105,
            eDispId_RENAME_StopToChargeBattery = 106,
            eDispId_RENAME_InverterCoolant_Refill = 107,
            eDispId_RENAME_AHB_Check = 108,
            eDispId_RENAME_PowerDown = 109,
            eDispId_RENAME_LowBatt_Lv2 = 110,
            eDispId_RENAME_Batt_LowTemp = 111,
            eDispId_RENAME_PowerLimit = 112,
            eDispId_RENAME_UREA_Shortage2_3 = 113,
            eDispId_RENAME_RegenerateFail = 114,
            eDispId_RENAME_DCT_HighTemp = 115,
            eDispId_RENAME_SCC_SwitchControl = 116,
            eDispId_RENAME_NCC = 117,
            eDispId_RENAME_LeadVehicleDeparted = 118,
            eDispId_RENAME_DCT_Cooling = 119,
            eDispId_RENAME_HDA_Check_OLD = 120,
            eDispId_RENAME_RCCA = 121,
            eDispId_RENAME_SBW_Engaged_N = 122,
            eDispId_RENAME_BCM_Warning_P = 123,
            eDispId_RENAME_SMK_P_IgnOn = 124,
            eDispId_RENAME_BCM_Warning = 125,
            eDispId_RENAME_SMK_ExceptParking = 126,
            eDispId_RENAME_BCM_Warning_Engine = 127,
            eDispId_RENAME_Remove_Charge = 128,
            eDispId_RENAME_PHEVFuelTank_Charging = 129,
            eDispId_RENAME_CSCD_Mode_AutoChange = 130,
            eDispId_RENAME_Engine_AutoStop = 131,
            eDispId_RENAME_Heated_Wire_Cancel = 132,
            eDispId_RENAME_Charging_Alarm = 133,
            eDispId_RENAME_AuxBattSaverPlus = 134,
            eDispId_RENAME_FCEV_ChargeFinish = 135,
            eDispId_RENAME_FCEV_CheckFuelInlet = 136,
            eDispId_RENAME_ChargeDoor_Open = 137,
            eDispId_RENAME_SEA_Operation_fail = 138,
            eDispId_RENAME_SEA_Operation_noti = 139,
            eDispId_RENAME_SBW_scuNMode_IgnOn = 140,
            eDispId_RENAME_PHEVFuelTank_WaitOrFuel = 141,
            eDispId_RENAME_SMK_Shift_N_Start = 142,
            eDispId_RENAME_SMK_iMT_Start = 143,
            eDispId_RENAME_TCF = 144,
            eDispId_RENAME_Service_Reminder = 145,
            eDispId_RENAME_BatteryDischargeWarning = 146,
            eDispId_RENAME_FactoryScreen = 147,
            eDispId_RENAME_AAF_Fail = 148,
            eDispId_RENAME_LEDHeadLamp_Fail = 149,
            eDispId_RENAME_PSB_Fail = 150,
            eDispId_RENAME_BCA_Fail = 151,
            eDispId_RENAME_BCW_Fail = 152,
            eDispId_RENAME_TPMS_Warn = 153,
            eDispId_RENAME_SCC_SystemFail = 154,
            eDispId_RENAME_FCA_Fail = 155,
            eDispId_RENAME_FCW_Fail = 156,
            eDispId_RENAME_HDA2_Check = 157,
            eDispId_RENAME_BCW_Blockage = 158,
            eDispId_RENAME_SCC_Blockage = 159,
            eDispId_RENAME_FCA_Blockage = 160,
            eDispId_RENAME_LKAS_Fail = 161,
            eDispId_RENAME_EVSystem_Check = 162,
            eDispId_RENAME_PA_Fail = 163,
            eDispId_RENAME_PAS_Fail = 164,
            eDispId_RENAME_NormalChargeError = 165,
            eDispId_RENAME_ECS_Fail = 166,
            eDispId_RENAME_LowEngineOil = 167,
            eDispId_RENAME_CoolingWaterFilter_Check = 168,
            eDispId_RENAME_LowWasher = 169,
            eDispId_RENAME_DPF_Fail = 170,
            eDispId_RENAME_StopLamp_Fail = 171,
            eDispId_RENAME_HighMountedStopLamp_Fail = 172,
            eDispId_RENAME_HeadLamp_Bifunc_Fail = 173,
            eDispId_RENAME_HeadLamp_Low_Fail = 174,
            eDispId_RENAME_StaticBendingLamp_Fail = 175,
            eDispId_RENAME_DynamicBendingLamp_Fail = 176,
            eDispId_RENAME_HeadLamp_High_Fail = 177,
            eDispId_RENAME_DayLightLamp_Fail = 178,
            eDispId_RENAME_FogLamp_Fail = 179,
            eDispId_RENAME_TailLamp_Fail = 180,
            eDispId_RENAME_PositionLamp_Fail = 181,
            eDispId_RENAME_TurnSignalLamp_Fail = 182,
            eDispId_RENAME_LicensePlateLamp_Fail = 183,
            eDispId_RENAME_Haptic_Fail = 184,
            eDispId_RENAME_Refuel = 185,
            eDispId_RENAME_HDA_Check = 186,
            eDispId_RENAME_LowFuel = 187,
            eDispId_RENAME_UREA_Shortage1 = 188,
            eDispId_RENAME_LowBatt_Lv1 = 189,
            eDispId_RENAME_VESS_Fail = 190,
            eDispId_RENAME_ISLW_Fail = 191,
            eDispId_RENAME_HBA_Fail = 192,
            eDispId_RENAME_FCW_Blockage = 193,
            eDispId_RENAME_ISLW_Blockage = 194,
            eDispId_RENAME_RemainChargeTime = 195,
            eDispId_RENAME_ExtFastCharge_Fail = 196,
            eDispId_RENAME_ExtSlowCharge_Fail = 197,
            eDispId_RENAME_CheckHev = 198,
            eDispId_RENAME_FuelRunOut = 199,
            eDispId_RENAME_ChargeDoor_OpenMoving = 200,
            eDispId_RENAME_ParasiticCurrent = 201,
            eDispId_RENAME_PHEVFuelTank_CheckOrOpen = 202,
            eDispId_RENAME_SBW_LVR_Fail = 203,
            eDispId_RENAME_IceWarning = 204,
            eDispId_RENAME_SCUOverHeat = 205,
            eDispId_RENAME_CheckDiffGear = 206,
            eDispId_RENAME_CoolingWater_Refill = 207,
            eDispId_RENAME_OilFilter_Check = 208,
            eDispId_RENAME_CheckBrake_ABSESC = 209,
            eDispId_RENAME_CheckBrake_BrakeFluid = 210,
            eDispId_RENAME_Check48VePT = 211,
            eDispId_RENAME_CheckTireDiff = 212,
            eDispId_RENAME_CheckBrake_VacuumPump = 213,
            eDispId_RENAME_FCEV_FuelCellFCEVCoolantShortage = 214,
            eDispId_RENAME_EV_Ready = 215,
            eDispId_RENAME_RegenBrakeSystem_Fail = 216,
            eDispId_RENAME_TPMS_Warn_Inform = 217,
            eDispId_RENAME_CheckRearSeatAlarm = 218,
            eDispId_RENAME_SBW_LVR_Fail_IgnOff = 219,
            eDispId_RENAME_BCW_Off_Noti = 220,
            eDispId_RENAME_BCA_Blockage = 221,
            eDispId_RENAME_DAW_Fail = 222,
            eDispId_RENAME_RCCW_Fail = 223,
            eDispId_RENAME_RCCW_Blockage = 224,
            eDispId_RENAME_BCW_Mirror_Fail = 225,
            eDispId_RENAME_DoorTrunkHood_Stopped_Open = 226,
            eDispId_RENAME_GroupTab = 227,
            eDispId_RENAME_Mobis_Max = 228,
            eDispId_RENAME_IVIS_Custom_Accessory = 512,
            eDispId_RENAME_IVIS_Custom_PTG_Speed_Change_Fail = 513,
            eDispId_RENAME_IVIS_Custom_Service_Interval_Setting = 514,
            eDispId_RENAME_IVIS_Custom_Service_Interval_Save = 515,
            eDispId_RENAME_IVIS_Custom_Service_Interval_Save_Complete = 516,
            eDispId_RENAME_IVIS_Custom_USM_Reset_Save = 517,
            eDispId_RENAME_IVIS_Custom_USM_Reset_Compolete = 518,
            eDispId_RENAME_IVIS_Custom_USM_Help_Message = 519,
            eDispId_RENAME_IVIS_Custom_USM_Voice_Guidance_Volume = 520,
            eDispId_RENAME_IVIS_Custom_USM_Park_Assist_Volume = 521,
            eDispId_RENAME_IVIS_Custom_USM_Service_Interval_reset = 522,
            eDispId_RENAME_IVIS_Custom_USM_On_Driving = 523,
            eDispId_RENAME_IVIS_Custom_USM_PowerTrunk_Activate = 524,
            eDispId_RENAME_IVIS_Custom_USM_Service_Workshop = 525,
            eDispId_RENAME_IVIS_Custom_PA_Tab_Info = 526,
            eDispId_RENAME_IVIS_Custom_Digital_SpeedMeter = 527,
            eDispId_RENAME_IVIS_Custom_Close_Popup = 528,
            eDispId_RENAME_IVIS_Max = 529
        };
    
        EnumEventID()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::eDispId_RENAME_ScreenOff)) {}
        EnumEventID(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::eDispId_RENAME_ScreenOff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_System_Check):
                case static_cast< int32_t>(Literal::eDispId_RENAME_EOL_Error):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Welcome):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SMK_P_IgnOff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Wireless_Charger):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SunroofWindowHood_Open):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Goodbye):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SBW_VCU2_Warn_IgnOff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CheckPattern):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SEA_IgnOff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Gear_Engaged_IgnOff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_RearSeatAlarm_Clear):
                case static_cast< int32_t>(Literal::eDispId_RENAME_RearSeatAlarm_Alarm):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Batt_LowTemp_IgnOff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SBW_scuNMode_IgnOff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_UpdateMode):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCA_Warn):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Engine_HighTemp):
                case static_cast< int32_t>(Literal::eDispId_RENAME_EMS_SafetyFunction):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DoorHood_Moving_Open):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Batt_HighTemp):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CheckHevEngine):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CheckPowerSupply):
                case static_cast< int32_t>(Literal::eDispId_RENAME_AHB_CheckStop):
                case static_cast< int32_t>(Literal::eDispId_RENAME_UREA_Abnormal3_Check3):
                case static_cast< int32_t>(Literal::eDispId_RENAME_UREA_Shortage4):
                case static_cast< int32_t>(Literal::eDispId_RENAME_UREA_Abnormal2_Check2):
                case static_cast< int32_t>(Literal::eDispId_RENAME_UREA_Abnormal1_Check1_Stop):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LowBatToPGear):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCA_Warn_byScc):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SBW_ShiftFail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SEA_IgnOn):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCA_LO):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCA_wESA):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCA_LS):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCW_Warn):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCA_R):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCA_R_PLUS):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HDA_Cancel):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HDA_HandsOff2):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LKAS_Cancel):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LKAS_HandsOn_Lv2):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LKAS_HandsOn_Lv2_Sound):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HDA_HandsOff1):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LKAS_HandsOn_Lv1):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HDA_SCCMode):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HDA_HDAMode):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HDA_ON_REQ):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HDA2_ON_REQ):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ParkingSystem_Group1):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BVM):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Rheostat):
                case static_cast< int32_t>(Literal::eDispId_RENAME_TPMS_SavedNoti):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Light):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FrontWiper):
                case static_cast< int32_t>(Literal::eDispId_RENAME_RearWiper):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Gear_Engaged_IgnOn):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SBW_VCU2_Warn_IgnOn):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SBW_VCU1_Warn):
                case static_cast< int32_t>(Literal::eDispId_RENAME_12VBatteryReset):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ADAS_SettingMode):
                case static_cast< int32_t>(Literal::eDispId_RENAME_AirCleaning_Onoff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DMS_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCEV_Regenerate):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DriveMode_Full):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CSCD_ModeChanged_Full):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DriveMode_Error):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IMS_Full):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SCC_Distance_Full):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IMS):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IMS_Mini):
                case static_cast< int32_t>(Literal::eDispId_RENAME_AV_Mode):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FlexSteer):
                case static_cast< int32_t>(Literal::eDispId_RENAME_2StepESC_Off):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SCC_ModeChange):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCW_Onoff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CSCD_ModeChanged_Mini):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DBC_Onoff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_4WD_Onoff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DriveMode_Mini):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Headlamp_Off):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PA_ModeChange):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SCC_NSCC):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HDA2_Guide):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DBC_Cancel):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Shift_P_ToCharge):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CheckHevNoStart):
                case static_cast< int32_t>(Literal::eDispId_RENAME_2WD_Mode):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ExhaustGas_TestMode):
                case static_cast< int32_t>(Literal::eDispId_RENAME_TPMS_Virgin):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DCT_LimpHome):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DCT_OverHeat):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DCT_HillHold):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SCC_Popup):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SCC_HDA2_AutoReduce):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Attention_Assist):
                case static_cast< int32_t>(Literal::eDispId_RENAME_EPB_Infinite):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ISG_Start):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PA):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PAS):
                case static_cast< int32_t>(Literal::eDispId_RENAME_RCTA):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ParkingSystem_Group4):
                case static_cast< int32_t>(Literal::eDispId_RENAME_MDPS):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DCT_CoolingFinish):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ISG_CancelBrakeClutch):
                case static_cast< int32_t>(Literal::eDispId_RENAME_StopToChargeBattery):
                case static_cast< int32_t>(Literal::eDispId_RENAME_InverterCoolant_Refill):
                case static_cast< int32_t>(Literal::eDispId_RENAME_AHB_Check):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PowerDown):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LowBatt_Lv2):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Batt_LowTemp):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PowerLimit):
                case static_cast< int32_t>(Literal::eDispId_RENAME_UREA_Shortage2_3):
                case static_cast< int32_t>(Literal::eDispId_RENAME_RegenerateFail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DCT_HighTemp):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SCC_SwitchControl):
                case static_cast< int32_t>(Literal::eDispId_RENAME_NCC):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LeadVehicleDeparted):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DCT_Cooling):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HDA_Check_OLD):
                case static_cast< int32_t>(Literal::eDispId_RENAME_RCCA):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SBW_Engaged_N):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCM_Warning_P):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SMK_P_IgnOn):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCM_Warning):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SMK_ExceptParking):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCM_Warning_Engine):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Remove_Charge):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PHEVFuelTank_Charging):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CSCD_Mode_AutoChange):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Engine_AutoStop):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Heated_Wire_Cancel):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Charging_Alarm):
                case static_cast< int32_t>(Literal::eDispId_RENAME_AuxBattSaverPlus):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCEV_ChargeFinish):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCEV_CheckFuelInlet):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ChargeDoor_Open):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SEA_Operation_fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SEA_Operation_noti):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SBW_scuNMode_IgnOn):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PHEVFuelTank_WaitOrFuel):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SMK_Shift_N_Start):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SMK_iMT_Start):
                case static_cast< int32_t>(Literal::eDispId_RENAME_TCF):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Service_Reminder):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BatteryDischargeWarning):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FactoryScreen):
                case static_cast< int32_t>(Literal::eDispId_RENAME_AAF_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LEDHeadLamp_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PSB_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCA_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCW_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_TPMS_Warn):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SCC_SystemFail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCA_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCW_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HDA2_Check):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCW_Blockage):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SCC_Blockage):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCA_Blockage):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LKAS_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_EVSystem_Check):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PA_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PAS_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_NormalChargeError):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ECS_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LowEngineOil):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CoolingWaterFilter_Check):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LowWasher):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DPF_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_StopLamp_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HighMountedStopLamp_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HeadLamp_Bifunc_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HeadLamp_Low_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_StaticBendingLamp_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DynamicBendingLamp_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HeadLamp_High_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DayLightLamp_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FogLamp_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_TailLamp_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PositionLamp_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_TurnSignalLamp_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LicensePlateLamp_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Haptic_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Refuel):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HDA_Check):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LowFuel):
                case static_cast< int32_t>(Literal::eDispId_RENAME_UREA_Shortage1):
                case static_cast< int32_t>(Literal::eDispId_RENAME_LowBatt_Lv1):
                case static_cast< int32_t>(Literal::eDispId_RENAME_VESS_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ISLW_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_HBA_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCW_Blockage):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ISLW_Blockage):
                case static_cast< int32_t>(Literal::eDispId_RENAME_RemainChargeTime):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ExtFastCharge_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ExtSlowCharge_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CheckHev):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FuelRunOut):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ChargeDoor_OpenMoving):
                case static_cast< int32_t>(Literal::eDispId_RENAME_ParasiticCurrent):
                case static_cast< int32_t>(Literal::eDispId_RENAME_PHEVFuelTank_CheckOrOpen):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SBW_LVR_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IceWarning):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SCUOverHeat):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CheckDiffGear):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CoolingWater_Refill):
                case static_cast< int32_t>(Literal::eDispId_RENAME_OilFilter_Check):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CheckBrake_ABSESC):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CheckBrake_BrakeFluid):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Check48VePT):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CheckTireDiff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CheckBrake_VacuumPump):
                case static_cast< int32_t>(Literal::eDispId_RENAME_FCEV_FuelCellFCEVCoolantShortage):
                case static_cast< int32_t>(Literal::eDispId_RENAME_EV_Ready):
                case static_cast< int32_t>(Literal::eDispId_RENAME_RegenBrakeSystem_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_TPMS_Warn_Inform):
                case static_cast< int32_t>(Literal::eDispId_RENAME_CheckRearSeatAlarm):
                case static_cast< int32_t>(Literal::eDispId_RENAME_SBW_LVR_Fail_IgnOff):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCW_Off_Noti):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCA_Blockage):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DAW_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_RCCW_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_RCCW_Blockage):
                case static_cast< int32_t>(Literal::eDispId_RENAME_BCW_Mirror_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_DoorTrunkHood_Stopped_Open):
                case static_cast< int32_t>(Literal::eDispId_RENAME_GroupTab):
                case static_cast< int32_t>(Literal::eDispId_RENAME_Mobis_Max):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_Accessory):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_PTG_Speed_Change_Fail):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_Service_Interval_Setting):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_Service_Interval_Save):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_Service_Interval_Save_Complete):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_USM_Reset_Save):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_USM_Reset_Compolete):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_USM_Help_Message):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_USM_Voice_Guidance_Volume):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_USM_Park_Assist_Volume):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_USM_Service_Interval_reset):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_USM_On_Driving):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_USM_PowerTrunk_Activate):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_USM_Service_Workshop):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_PA_Tab_Info):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_Digital_SpeedMeter):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Custom_Close_Popup):
                case static_cast< int32_t>(Literal::eDispId_RENAME_IVIS_Max):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumEventID &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumEventID &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumEventID &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumEventID &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumEventID &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumEventID &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct GroupLevel : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            eDispId_Group_0 = 0,
            eDispId_Group_1 = 1,
            eDispId_Group_2 = 2,
            eDispId_Group_2_Exception = 3,
            eDispId_Group_2_Full = 4,
            eDispId_Group_2_Mini = 5,
            eDispId_Group_3 = 6,
            eDispId_Group_4 = 7,
            eDispId_Group_5 = 8,
            eDispId_Group_6 = 9,
            eDispId_Group_Factory = 10,
            eDispId_Group_7 = 11,
            eDispId_Group_8 = 12,
            eDispId_Group_Custom = 13
        };
    
        GroupLevel()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::eDispId_Group_0)) {}
        GroupLevel(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::eDispId_Group_0):
                case static_cast< int32_t>(Literal::eDispId_Group_1):
                case static_cast< int32_t>(Literal::eDispId_Group_2):
                case static_cast< int32_t>(Literal::eDispId_Group_2_Exception):
                case static_cast< int32_t>(Literal::eDispId_Group_2_Full):
                case static_cast< int32_t>(Literal::eDispId_Group_2_Mini):
                case static_cast< int32_t>(Literal::eDispId_Group_3):
                case static_cast< int32_t>(Literal::eDispId_Group_4):
                case static_cast< int32_t>(Literal::eDispId_Group_5):
                case static_cast< int32_t>(Literal::eDispId_Group_6):
                case static_cast< int32_t>(Literal::eDispId_Group_Factory):
                case static_cast< int32_t>(Literal::eDispId_Group_7):
                case static_cast< int32_t>(Literal::eDispId_Group_8):
                case static_cast< int32_t>(Literal::eDispId_Group_Custom):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GroupLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GroupLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GroupLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GroupLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GroupLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GroupLevel &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    typedef CommonAPI::ByteBuffer EventData;
    typedef std::vector< uint16_t> MasterWarnTable;
    
    struct EnumMasterWarnCmd : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            MASTER_WARN_CMD_NONE = 0,
            MASTER_WARN_CMD_MOVE_TO_TAB = 1,
            MASTER_WARN_CMD_MOVE_TO_FIRST_PAGE = 2,
            MASTER_WARN_CMD_MAX = 3
        };
    
        EnumMasterWarnCmd()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::MASTER_WARN_CMD_NONE)) {}
        EnumMasterWarnCmd(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::MASTER_WARN_CMD_NONE):
                case static_cast< int32_t>(Literal::MASTER_WARN_CMD_MOVE_TO_TAB):
                case static_cast< int32_t>(Literal::MASTER_WARN_CMD_MOVE_TO_FIRST_PAGE):
                case static_cast< int32_t>(Literal::MASTER_WARN_CMD_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumMasterWarnCmd &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumMasterWarnCmd &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumMasterWarnCmd &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumMasterWarnCmd &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumMasterWarnCmd &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumMasterWarnCmd &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct StEventContentsInfo : CommonAPI::Struct< EnumEventDisplayType, EnumEventID, bool, EventData> {
    
        StEventContentsInfo()
        {
            std::get< 0>(values_) = EnumEventDisplayType();
            std::get< 1>(values_) = EnumEventID();
            std::get< 2>(values_) = false;
            std::get< 3>(values_) = EventData();
        }
        StEventContentsInfo(const EnumEventDisplayType &_type, const EnumEventID &_id, const bool &_master_warn, const EventData &_data)
        {
            std::get< 0>(values_) = _type;
            std::get< 1>(values_) = _id;
            std::get< 2>(values_) = _master_warn;
            std::get< 3>(values_) = _data;
        }
        inline const EnumEventDisplayType &getType() const { return std::get< 0>(values_); }
        inline void setType(const EnumEventDisplayType &_value) { std::get< 0>(values_) = _value; }
        inline const EnumEventID &getId() const { return std::get< 1>(values_); }
        inline void setId(const EnumEventID &_value) { std::get< 1>(values_) = _value; }
        inline const bool &getMaster_warn() const { return std::get< 2>(values_); }
        inline void setMaster_warn(const bool _value) { std::get< 2>(values_) = _value; }
        inline const EventData &getData() const { return std::get< 3>(values_); }
        inline void setData(const EventData &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const StEventContentsInfo& _other) const {
        return (getType() == _other.getType() && getId() == _other.getId() && getMaster_warn() == _other.getMaster_warn() && getData() == _other.getData());
        }
        inline bool operator!=(const StEventContentsInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct StSoundInfo : CommonAPI::Struct< uint8_t, uint8_t, uint8_t> {
    
        StSoundInfo()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
        }
        StSoundInfo(const uint8_t &_sound_id, const uint8_t &_sound_volume, const uint8_t &_sound_state)
        {
            std::get< 0>(values_) = _sound_id;
            std::get< 1>(values_) = _sound_volume;
            std::get< 2>(values_) = _sound_state;
        }
        inline const uint8_t &getSound_id() const { return std::get< 0>(values_); }
        inline void setSound_id(const uint8_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getSound_volume() const { return std::get< 1>(values_); }
        inline void setSound_volume(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getSound_state() const { return std::get< 2>(values_); }
        inline void setSound_state(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const StSoundInfo& _other) const {
        return (getSound_id() == _other.getSound_id() && getSound_volume() == _other.getSound_volume() && getSound_state() == _other.getSound_state());
        }
        inline bool operator!=(const StSoundInfo &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct USM_DRIVER_ASSIST_SCC_REACTION_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            SLOW = 1,
            NORMAL = 2,
            FAST = 3,
            DEACTIVE = 4
        };
    
        USM_DRIVER_ASSIST_SCC_REACTION_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_SCC_REACTION_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::SLOW):
                case static_cast< int32_t>(Literal::NORMAL):
                case static_cast< int32_t>(Literal::FAST):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_SCC_REACTION_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_SCC_REACTION_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_SCC_REACTION_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_SCC_REACTION_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_SCC_REACTION_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_SCC_REACTION_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            LOW = 2,
            NORMAL = 3,
            HIGH = 4,
            DEACTIVE = 5
        };
    
        USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::LOW):
                case static_cast< int32_t>(Literal::NORMAL):
                case static_cast< int32_t>(Literal::HIGH):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_WARNING_TIMING_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            SLOW = 1,
            NORMAL = 2,
            FAST = 3,
            DEACTIVE = 4
        };
    
        USM_DRIVER_ASSIST_WARNING_TIMING_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_WARNING_TIMING_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::SLOW):
                case static_cast< int32_t>(Literal::NORMAL):
                case static_cast< int32_t>(Literal::FAST):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_WARNING_TIMING_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_WARNING_TIMING_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_WARNING_TIMING_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_WARNING_TIMING_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_WARNING_TIMING_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_WARNING_TIMING_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            VOLUME_1 = 1,
            VOLUME_2 = 2,
            VOLUME_3 = 3,
            OFF = 4,
            DEACTIVE = 5
        };
    
        USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::VOLUME_1):
                case static_cast< int32_t>(Literal::VOLUME_2):
                case static_cast< int32_t>(Literal::VOLUME_3):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_LANE_SAFETY_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            ACTIVE_LKA = 1,
            LKA = 2,
            LDW = 3,
            OFF = 4,
            DEACTIVE = 5
        };
    
        USM_DRIVER_ASSIST_LANE_SAFETY_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_LANE_SAFETY_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::ACTIVE_LKA):
                case static_cast< int32_t>(Literal::LKA):
                case static_cast< int32_t>(Literal::LDW):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_LANE_SAFETY_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_LANE_SAFETY_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_LANE_SAFETY_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_LANE_SAFETY_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_LANE_SAFETY_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_LANE_SAFETY_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            UNKNOWN = 0,
            WITH_ACTIVE_LKA = 1,
            WITH_LKA = 2,
            LDW_ONLY = 3
        };
    
        USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::UNKNOWN)) {}
        USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::UNKNOWN):
                case static_cast< int32_t>(Literal::WITH_ACTIVE_LKA):
                case static_cast< int32_t>(Literal::WITH_LKA):
                case static_cast< int32_t>(Literal::LDW_ONLY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            WARNING = 2,
            ASSIST = 3,
            DEACTIVE = 4
        };
    
        USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::WARNING):
                case static_cast< int32_t>(Literal::ASSIST):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DOOR_AUTO_LOCK_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ENABLE_ON_SHIFT = 2,
            ENABLE_ON_DRIVING = 3,
            DEACTIVE = 4
        };
    
        USM_DOOR_AUTO_LOCK_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DOOR_AUTO_LOCK_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ENABLE_ON_SHIFT):
                case static_cast< int32_t>(Literal::ENABLE_ON_DRIVING):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DOOR_AUTO_LOCK_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DOOR_AUTO_LOCK_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DOOR_AUTO_LOCK_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DOOR_AUTO_LOCK_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DOOR_AUTO_LOCK_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DOOR_AUTO_LOCK_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            UNKNOWN = 0,
            KEY_OUT = 1,
            POWER_OFF = 2
        };
    
        USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::UNKNOWN)) {}
        USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::UNKNOWN):
                case static_cast< int32_t>(Literal::KEY_OUT):
                case static_cast< int32_t>(Literal::POWER_OFF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DOOR_AUTO_UNLOCK_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON_KEY_OUT = 2,
            ON_POWER_OFF = 3,
            ON_SHIFT = 4,
            DEACTIVE = 5
        };
    
        USM_DOOR_AUTO_UNLOCK_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DOOR_AUTO_UNLOCK_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON_KEY_OUT):
                case static_cast< int32_t>(Literal::ON_POWER_OFF):
                case static_cast< int32_t>(Literal::ON_SHIFT):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DOOR_AUTO_UNLOCK_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DOOR_AUTO_UNLOCK_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DOOR_AUTO_UNLOCK_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DOOR_AUTO_UNLOCK_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DOOR_AUTO_UNLOCK_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DOOR_AUTO_UNLOCK_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DOOR_HORN_FEEDBACK_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DOOR_HORN_FEEDBACK_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DOOR_HORN_FEEDBACK_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DOOR_HORN_FEEDBACK_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DOOR_HORN_FEEDBACK_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DOOR_HORN_FEEDBACK_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DOOR_HORN_FEEDBACK_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DOOR_HORN_FEEDBACK_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DOOR_HORN_FEEDBACK_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DOOR_POWER_TAILGATE_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DOOR_POWER_TAILGATE_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DOOR_POWER_TAILGATE_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DOOR_POWER_TAILGATE_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DOOR_POWER_TAILGATE_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DOOR_POWER_TAILGATE_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DOOR_POWER_TAILGATE_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DOOR_POWER_TAILGATE_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DOOR_POWER_TAILGATE_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DOOR_POWER_TAILGATE_SPEED_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            NORMAL = 1,
            FAST = 2,
            DEACTIVE = 3
        };
    
        USM_DOOR_POWER_TAILGATE_SPEED_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DOOR_POWER_TAILGATE_SPEED_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::NORMAL):
                case static_cast< int32_t>(Literal::FAST):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DOOR_POWER_TAILGATE_SPEED_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DOOR_POWER_TAILGATE_SPEED_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DOOR_POWER_TAILGATE_SPEED_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DOOR_POWER_TAILGATE_SPEED_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DOOR_POWER_TAILGATE_SPEED_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DOOR_POWER_TAILGATE_SPEED_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_DOOR_SMART_TAILGATE_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_DOOR_SMART_TAILGATE_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_DOOR_SMART_TAILGATE_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_DOOR_SMART_TAILGATE_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_DOOR_SMART_TAILGATE_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_DOOR_SMART_TAILGATE_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_DOOR_SMART_TAILGATE_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_DOOR_SMART_TAILGATE_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_DOOR_SMART_TAILGATE_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            TIMES_3 = 2,
            TIMES_5 = 3,
            TIMES_7 = 4,
            DEACTIVE = 5
        };
    
        USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::TIMES_3):
                case static_cast< int32_t>(Literal::TIMES_5):
                case static_cast< int32_t>(Literal::TIMES_7):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_LIGHTS_AMBIENT_LIGHT_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_LIGHTS_AMBIENT_LIGHT_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_LIGHTS_AMBIENT_LIGHT_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_LIGHTS_AMBIENT_LIGHT_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_LIGHTS_AMBIENT_LIGHT_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_LIGHTS_AMBIENT_LIGHT_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_LIGHTS_AMBIENT_LIGHT_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_LIGHTS_AMBIENT_LIGHT_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_LIGHTS_AMBIENT_LIGHT_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_LIGHTS_HEADLIGHT_DELAY_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_LIGHTS_HEADLIGHT_DELAY_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_LIGHTS_HEADLIGHT_DELAY_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_LIGHTS_HEADLIGHT_DELAY_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_LIGHTS_HEADLIGHT_DELAY_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_LIGHTS_HEADLIGHT_DELAY_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_LIGHTS_HEADLIGHT_DELAY_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_LIGHTS_HEADLIGHT_DELAY_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_LIGHTS_HEADLIGHT_DELAY_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            VOLUME_0 = 1,
            VOLUME_1 = 2,
            VOLUME_2 = 3,
            VOLUME_3 = 4,
            DEACTIVE = 5
        };
    
        USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::VOLUME_0):
                case static_cast< int32_t>(Literal::VOLUME_1):
                case static_cast< int32_t>(Literal::VOLUME_2):
                case static_cast< int32_t>(Literal::VOLUME_3):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_SOUND_PARK_ASSIST_VOLUME_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            VOLUME_1 = 1,
            VOLUME_2 = 2,
            VOLUME_3 = 3,
            DEACTIVE = 4
        };
    
        USM_SOUND_PARK_ASSIST_VOLUME_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_SOUND_PARK_ASSIST_VOLUME_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::VOLUME_1):
                case static_cast< int32_t>(Literal::VOLUME_2):
                case static_cast< int32_t>(Literal::VOLUME_3):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_SOUND_PARK_ASSIST_VOLUME_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_SOUND_PARK_ASSIST_VOLUME_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_SOUND_PARK_ASSIST_VOLUME_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_SOUND_PARK_ASSIST_VOLUME_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_SOUND_PARK_ASSIST_VOLUME_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_SOUND_PARK_ASSIST_VOLUME_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_SOUND_WELCOME_SOUND_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_SOUND_WELCOME_SOUND_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_SOUND_WELCOME_SOUND_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_SOUND_WELCOME_SOUND_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_SOUND_WELCOME_SOUND_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_SOUND_WELCOME_SOUND_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_SOUND_WELCOME_SOUND_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_SOUND_WELCOME_SOUND_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_SOUND_WELCOME_SOUND_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            NORMAL = 2,
            EXTENDED = 3,
            DEACTIVE = 4
        };
    
        USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::NORMAL):
                case static_cast< int32_t>(Literal::EXTENDED):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            MIRROR_AND_LIGHT = 1,
            MIRROR_ONLY = 2,
            LIGHT_ONLY = 3,
            DEACTIVE = 4
        };
    
        USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::MIRROR_AND_LIGHT):
                case static_cast< int32_t>(Literal::MIRROR_ONLY):
                case static_cast< int32_t>(Literal::LIGHT_ONLY):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_SERVICE_INTERVAL_MODE_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            UNKNOWN = 0,
            CUSTOMER = 1,
            WORKSHOP = 2
        };
    
        USM_SERVICE_INTERVAL_MODE_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::UNKNOWN)) {}
        USM_SERVICE_INTERVAL_MODE_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::UNKNOWN):
                case static_cast< int32_t>(Literal::CUSTOMER):
                case static_cast< int32_t>(Literal::WORKSHOP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_SERVICE_INTERVAL_MODE_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_SERVICE_INTERVAL_MODE_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_SERVICE_INTERVAL_MODE_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_SERVICE_INTERVAL_MODE_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_SERVICE_INTERVAL_MODE_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_SERVICE_INTERVAL_MODE_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_SERVICE_INTERVAL_ENABLE_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_SERVICE_INTERVAL_ENABLE_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_SERVICE_INTERVAL_ENABLE_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_SERVICE_INTERVAL_ENABLE_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_SERVICE_INTERVAL_ENABLE_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_SERVICE_INTERVAL_ENABLE_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_SERVICE_INTERVAL_ENABLE_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_SERVICE_INTERVAL_ENABLE_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_SERVICE_INTERVAL_ENABLE_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_OTHER_FUEL_ECONOMY_RESET_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            AFTER_IGNITION = 2,
            AFTER_REFUELING = 3,
            DEACTIVE = 4
        };
    
        USM_OTHER_FUEL_ECONOMY_RESET_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_OTHER_FUEL_ECONOMY_RESET_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::AFTER_IGNITION):
                case static_cast< int32_t>(Literal::AFTER_REFUELING):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_OTHER_FUEL_ECONOMY_RESET_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_OTHER_FUEL_ECONOMY_RESET_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_OTHER_FUEL_ECONOMY_RESET_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_OTHER_FUEL_ECONOMY_RESET_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_OTHER_FUEL_ECONOMY_RESET_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_OTHER_FUEL_ECONOMY_RESET_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_OTHER_FUEL_ECONOMY_UNIT_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            KM_L = 1,
            L_100KM = 2,
            US_GALLON = 3,
            UK_GALLON = 4,
            DEACTIVE = 5
        };
    
        USM_OTHER_FUEL_ECONOMY_UNIT_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_OTHER_FUEL_ECONOMY_UNIT_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::KM_L):
                case static_cast< int32_t>(Literal::L_100KM):
                case static_cast< int32_t>(Literal::US_GALLON):
                case static_cast< int32_t>(Literal::UK_GALLON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_OTHER_FUEL_ECONOMY_UNIT_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_OTHER_FUEL_ECONOMY_UNIT_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_OTHER_FUEL_ECONOMY_UNIT_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_OTHER_FUEL_ECONOMY_UNIT_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_OTHER_FUEL_ECONOMY_UNIT_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_OTHER_FUEL_ECONOMY_UNIT_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_OTHER_TEMPERATURE_UNIT_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            UNIT_C = 1,
            UNIT_F = 2,
            DEACTIVE = 3
        };
    
        USM_OTHER_TEMPERATURE_UNIT_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_OTHER_TEMPERATURE_UNIT_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::UNIT_C):
                case static_cast< int32_t>(Literal::UNIT_F):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_OTHER_TEMPERATURE_UNIT_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_OTHER_TEMPERATURE_UNIT_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_OTHER_TEMPERATURE_UNIT_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_OTHER_TEMPERATURE_UNIT_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_OTHER_TEMPERATURE_UNIT_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_OTHER_TEMPERATURE_UNIT_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_OTHER_TIRE_PRESSURE_UNIT_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            PSI = 1,
            KPA = 2,
            BAR = 3,
            DEACTIVE = 4
        };
    
        USM_OTHER_TIRE_PRESSURE_UNIT_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_OTHER_TIRE_PRESSURE_UNIT_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::PSI):
                case static_cast< int32_t>(Literal::KPA):
                case static_cast< int32_t>(Literal::BAR):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_OTHER_TIRE_PRESSURE_UNIT_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_OTHER_TIRE_PRESSURE_UNIT_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_OTHER_TIRE_PRESSURE_UNIT_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_OTHER_TIRE_PRESSURE_UNIT_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_OTHER_TIRE_PRESSURE_UNIT_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_OTHER_TIRE_PRESSURE_UNIT_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_OTHER_SPEED_UNIT_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            KMH = 1,
            MPH = 2,
            DEACTIVE = 3
        };
    
        USM_OTHER_SPEED_UNIT_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_OTHER_SPEED_UNIT_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::KMH):
                case static_cast< int32_t>(Literal::MPH):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_OTHER_SPEED_UNIT_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_OTHER_SPEED_UNIT_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_OTHER_SPEED_UNIT_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_OTHER_SPEED_UNIT_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_OTHER_SPEED_UNIT_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_OTHER_SPEED_UNIT_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_OTHER_TORQUE_UNIT_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            NM = 1,
            LB_FT = 2,
            DEACTIVE = 3
        };
    
        USM_OTHER_TORQUE_UNIT_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_OTHER_TORQUE_UNIT_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::NM):
                case static_cast< int32_t>(Literal::LB_FT):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_OTHER_TORQUE_UNIT_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_OTHER_TORQUE_UNIT_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_OTHER_TORQUE_UNIT_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_OTHER_TORQUE_UNIT_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_OTHER_TORQUE_UNIT_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_OTHER_TORQUE_UNIT_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            PSI = 1,
            KPA = 2,
            BAR = 3,
            DEACTIVE = 4
        };
    
        USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::PSI):
                case static_cast< int32_t>(Literal::KPA):
                case static_cast< int32_t>(Literal::BAR):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_ECO_VEHICLE_START_COASTING_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            EARLY = 1,
            NORMAL = 2,
            LATER = 3,
            DEACTIVE = 4
        };
    
        USM_ECO_VEHICLE_START_COASTING_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_ECO_VEHICLE_START_COASTING_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::EARLY):
                case static_cast< int32_t>(Literal::NORMAL):
                case static_cast< int32_t>(Literal::LATER):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_ECO_VEHICLE_START_COASTING_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_ECO_VEHICLE_START_COASTING_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_ECO_VEHICLE_START_COASTING_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_ECO_VEHICLE_START_COASTING_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_ECO_VEHICLE_START_COASTING_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_ECO_VEHICLE_START_COASTING_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            WHILE_CHARGING = 1,
            ALWAYS = 2,
            DO_NOT_LOCK = 3,
            DEACTIVE = 4
        };
    
        USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::WHILE_CHARGING):
                case static_cast< int32_t>(Literal::ALWAYS):
                case static_cast< int32_t>(Literal::DO_NOT_LOCK):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            UNKNOWN = 0,
            WITH_NOT_USED = 1,
            WITHOUT_NOT_USED = 2
        };
    
        USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::UNKNOWN)) {}
        USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::UNKNOWN):
                case static_cast< int32_t>(Literal::WITH_NOT_USED):
                case static_cast< int32_t>(Literal::WITHOUT_NOT_USED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            OFF = 1,
            ON = 2,
            DEACTIVE = 3
        };
    
        USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::OFF):
                case static_cast< int32_t>(Literal::ON):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            VOLUME_1 = 1,
            VOLUME_2 = 2,
            VOLUME_3 = 3,
            VOLUME_4 = 4,
            DEACTIVE = 5
        };
    
        USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::VOLUME_1):
                case static_cast< int32_t>(Literal::VOLUME_2):
                case static_cast< int32_t>(Literal::VOLUME_3):
                case static_cast< int32_t>(Literal::VOLUME_4):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_LANGUAGE_VALUE : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            KOREAN = 1,
            ENGLISH_US = 2,
            ENGLISH_UK = 3,
            SIMPLIFIED_CHINESE = 4,
            TRADITIONAL_CHINESE = 5,
            FRENCH_EU = 6,
            SPANISH_EU = 7,
            ARABIC = 8,
            CZECH = 9,
            DANISH = 10,
            GERMAN = 11,
            ITALIAN = 12,
            DUTCH = 13,
            POLISH = 14,
            PORTUGUESE = 15,
            RUSSIAN = 16,
            SLOVAK = 17,
            SWEDISH = 18,
            TURKISH = 19,
            FRENCH_US = 20,
            SPANISH_US = 21,
            ENGLISH_INDIA = 22,
            NORWEGIAN = 23,
            FINNISH = 24,
            INDONESIAN = 25,
            BRAZILIAN_PORTUGUESE = 26,
            MALAY = 27,
            HUNGARIAN = 28,
            ENGLISH_AUSTRALIA = 29,
            JAPANESE = 30,
            DEACTIVE = 31
        };
    
        USM_LANGUAGE_VALUE()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_LANGUAGE_VALUE(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::KOREAN):
                case static_cast< int32_t>(Literal::ENGLISH_US):
                case static_cast< int32_t>(Literal::ENGLISH_UK):
                case static_cast< int32_t>(Literal::SIMPLIFIED_CHINESE):
                case static_cast< int32_t>(Literal::TRADITIONAL_CHINESE):
                case static_cast< int32_t>(Literal::FRENCH_EU):
                case static_cast< int32_t>(Literal::SPANISH_EU):
                case static_cast< int32_t>(Literal::ARABIC):
                case static_cast< int32_t>(Literal::CZECH):
                case static_cast< int32_t>(Literal::DANISH):
                case static_cast< int32_t>(Literal::GERMAN):
                case static_cast< int32_t>(Literal::ITALIAN):
                case static_cast< int32_t>(Literal::DUTCH):
                case static_cast< int32_t>(Literal::POLISH):
                case static_cast< int32_t>(Literal::PORTUGUESE):
                case static_cast< int32_t>(Literal::RUSSIAN):
                case static_cast< int32_t>(Literal::SLOVAK):
                case static_cast< int32_t>(Literal::SWEDISH):
                case static_cast< int32_t>(Literal::TURKISH):
                case static_cast< int32_t>(Literal::FRENCH_US):
                case static_cast< int32_t>(Literal::SPANISH_US):
                case static_cast< int32_t>(Literal::ENGLISH_INDIA):
                case static_cast< int32_t>(Literal::NORWEGIAN):
                case static_cast< int32_t>(Literal::FINNISH):
                case static_cast< int32_t>(Literal::INDONESIAN):
                case static_cast< int32_t>(Literal::BRAZILIAN_PORTUGUESE):
                case static_cast< int32_t>(Literal::MALAY):
                case static_cast< int32_t>(Literal::HUNGARIAN):
                case static_cast< int32_t>(Literal::ENGLISH_AUSTRALIA):
                case static_cast< int32_t>(Literal::JAPANESE):
                case static_cast< int32_t>(Literal::DEACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_LANGUAGE_VALUE &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_LANGUAGE_VALUE &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_LANGUAGE_VALUE &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_LANGUAGE_VALUE &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_LANGUAGE_VALUE &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_LANGUAGE_VALUE &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_THEME_STATUS : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            THEME_A = 1,
            THEME_B = 2,
            THEME_C = 3,
            THEME_D = 4
        };
    
        USM_THEME_STATUS()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_THEME_STATUS(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::THEME_A):
                case static_cast< int32_t>(Literal::THEME_B):
                case static_cast< int32_t>(Literal::THEME_C):
                case static_cast< int32_t>(Literal::THEME_D):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_THEME_STATUS &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_THEME_STATUS &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_THEME_STATUS &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_THEME_STATUS &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_THEME_STATUS &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_THEME_STATUS &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USM_THEME_AUTOSET : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NOT_APPLIED = 0,
            THEME_AUTOSET_OFF = 1,
            THEME_AUTOSET_ON = 2
        };
    
        USM_THEME_AUTOSET()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NOT_APPLIED)) {}
        USM_THEME_AUTOSET(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NOT_APPLIED):
                case static_cast< int32_t>(Literal::THEME_AUTOSET_OFF):
                case static_cast< int32_t>(Literal::THEME_AUTOSET_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USM_THEME_AUTOSET &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USM_THEME_AUTOSET &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USM_THEME_AUTOSET &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USM_THEME_AUTOSET &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USM_THEME_AUTOSET &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USM_THEME_AUTOSET &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct USMItemIndex : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NONE = 0,
            DRIVER_ASSIST_SCC_REACTION = 1,
            DRIVER_ASSIST_DRIVING_ASSIST_LEADING_VEHICLE_DEPARTURE_ALERT = 2,
            DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST = 3,
            DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST = 4,
            DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN = 5,
            DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN = 6,
            DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING = 7,
            DRIVER_ASSIST_DRIVER_ATTENTION_WARNING = 8,
            DRIVER_ASSIST_WARNING_TIMING = 9,
            DRIVER_ASSIST_WARNING_VOLUME = 10,
            DRIVER_ASSIST_LANE_SAFETY = 11,
            DRIVER_ASSIST_LANE_SAFETY_MODE = 12,
            DRIVER_ASSIST_FORWARD_SAFETY = 13,
            DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW = 14,
            DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST = 15,
            DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY = 16,
            DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY = 17,
            DOOR_AUTO_LOCK = 18,
            DOOR_AUTO_UNLOCK_KEY_OR_POWER = 19,
            DOOR_AUTO_UNLOCK = 20,
            DOOR_HORN_FEEDBACK = 21,
            DOOR_POWER_TAILGATE = 22,
            DOOR_POWER_TAILGATE_SPEED = 23,
            DOOR_SMART_TAILGATE = 24,
            LIGHTS_ONE_TOUCH_TURN_SIGNAL = 25,
            LIGHTS_AMBIENT_LIGHT = 26,
            LIGHTS_HEADLIGHT_DELAY = 27,
            LIGHTS_HIGH_BEAM_ASSIST = 28,
            SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME = 29,
            SOUND_PARK_ASSIST_VOLUME = 30,
            SOUND_WELCOME_SOUND = 31,
            CONVENIENCE_SEAT_EASY_ACCESS = 32,
            CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE = 33,
            CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK = 34,
            CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH = 35,
            CONVENIENCE_MIRROR_AUTO_FOLDING = 36,
            CONVENIENCE_WIRELESS_CHARGING_SYSTEM = 37,
            CONVENIENCE_TRAFFIC_INFORMATION = 38,
            CONVENIENCE_WIPER_LIGHTS_DISPLAY = 39,
            CONVENIENCE_AUTO_REAR_WIPER_IN_R = 40,
            CONVENIENCE_GEAR_POSITION_POPUP = 41,
            CONVENIENCE_ICY_ROAD_WARNING = 42,
            SERVICE_INTERVAL_MODE = 43,
            SERVICE_INTERVAL_ENABLE_SERVICE_INTERVAL = 44,
            SERVICE_INTERVAL_ADJUST_INTERVAL_DISTANCE = 45,
            SERVICE_INTERVAL_ADJUST_INTERVAL_DURATION = 46,
            SERVICE_INTERVAL_RESET = 47,
            OTHER_FUEL_ECONOMY_RESET = 48,
            OTHER_FUEL_ECONOMY_UNIT = 49,
            OTHER_TEMPERATURE_UNIT = 50,
            OTHER_TIRE_PRESSURE_UNIT = 51,
            OTHER_SPEED_UNIT = 52,
            OTHER_TORQUE_UNIT = 53,
            OTHER_TURBO_BOOST_PRESSURE_UNIT = 54,
            ECO_VEHICLE_GREEN_ZONE_EV_DRIVE = 55,
            ECO_VEHICLE_COASTING_GUIDE_ENABLE = 56,
            ECO_VEHICLE_COASTING_GUIDE_SOUND = 57,
            ECO_VEHICLE_START_COASTING = 58,
            ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE = 59,
            ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION = 60,
            ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS = 61,
            ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS = 62,
            LANGUAGE = 63,
            THEME_STATUS = 64,
            THEME_AUTOSET = 65,
            MAX = 66
        };
    
        USMItemIndex()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NONE)) {}
        USMItemIndex(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NONE):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_SCC_REACTION):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_DRIVING_ASSIST_LEADING_VEHICLE_DEPARTURE_ALERT):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_DRIVER_ATTENTION_WARNING):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_WARNING_TIMING):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_WARNING_VOLUME):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_LANE_SAFETY):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_LANE_SAFETY_MODE):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_FORWARD_SAFETY):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY):
                case static_cast< int32_t>(Literal::DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY):
                case static_cast< int32_t>(Literal::DOOR_AUTO_LOCK):
                case static_cast< int32_t>(Literal::DOOR_AUTO_UNLOCK_KEY_OR_POWER):
                case static_cast< int32_t>(Literal::DOOR_AUTO_UNLOCK):
                case static_cast< int32_t>(Literal::DOOR_HORN_FEEDBACK):
                case static_cast< int32_t>(Literal::DOOR_POWER_TAILGATE):
                case static_cast< int32_t>(Literal::DOOR_POWER_TAILGATE_SPEED):
                case static_cast< int32_t>(Literal::DOOR_SMART_TAILGATE):
                case static_cast< int32_t>(Literal::LIGHTS_ONE_TOUCH_TURN_SIGNAL):
                case static_cast< int32_t>(Literal::LIGHTS_AMBIENT_LIGHT):
                case static_cast< int32_t>(Literal::LIGHTS_HEADLIGHT_DELAY):
                case static_cast< int32_t>(Literal::LIGHTS_HIGH_BEAM_ASSIST):
                case static_cast< int32_t>(Literal::SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME):
                case static_cast< int32_t>(Literal::SOUND_PARK_ASSIST_VOLUME):
                case static_cast< int32_t>(Literal::SOUND_WELCOME_SOUND):
                case static_cast< int32_t>(Literal::CONVENIENCE_SEAT_EASY_ACCESS):
                case static_cast< int32_t>(Literal::CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE):
                case static_cast< int32_t>(Literal::CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK):
                case static_cast< int32_t>(Literal::CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH):
                case static_cast< int32_t>(Literal::CONVENIENCE_MIRROR_AUTO_FOLDING):
                case static_cast< int32_t>(Literal::CONVENIENCE_WIRELESS_CHARGING_SYSTEM):
                case static_cast< int32_t>(Literal::CONVENIENCE_TRAFFIC_INFORMATION):
                case static_cast< int32_t>(Literal::CONVENIENCE_WIPER_LIGHTS_DISPLAY):
                case static_cast< int32_t>(Literal::CONVENIENCE_AUTO_REAR_WIPER_IN_R):
                case static_cast< int32_t>(Literal::CONVENIENCE_GEAR_POSITION_POPUP):
                case static_cast< int32_t>(Literal::CONVENIENCE_ICY_ROAD_WARNING):
                case static_cast< int32_t>(Literal::SERVICE_INTERVAL_MODE):
                case static_cast< int32_t>(Literal::SERVICE_INTERVAL_ENABLE_SERVICE_INTERVAL):
                case static_cast< int32_t>(Literal::SERVICE_INTERVAL_ADJUST_INTERVAL_DISTANCE):
                case static_cast< int32_t>(Literal::SERVICE_INTERVAL_ADJUST_INTERVAL_DURATION):
                case static_cast< int32_t>(Literal::SERVICE_INTERVAL_RESET):
                case static_cast< int32_t>(Literal::OTHER_FUEL_ECONOMY_RESET):
                case static_cast< int32_t>(Literal::OTHER_FUEL_ECONOMY_UNIT):
                case static_cast< int32_t>(Literal::OTHER_TEMPERATURE_UNIT):
                case static_cast< int32_t>(Literal::OTHER_TIRE_PRESSURE_UNIT):
                case static_cast< int32_t>(Literal::OTHER_SPEED_UNIT):
                case static_cast< int32_t>(Literal::OTHER_TORQUE_UNIT):
                case static_cast< int32_t>(Literal::OTHER_TURBO_BOOST_PRESSURE_UNIT):
                case static_cast< int32_t>(Literal::ECO_VEHICLE_GREEN_ZONE_EV_DRIVE):
                case static_cast< int32_t>(Literal::ECO_VEHICLE_COASTING_GUIDE_ENABLE):
                case static_cast< int32_t>(Literal::ECO_VEHICLE_COASTING_GUIDE_SOUND):
                case static_cast< int32_t>(Literal::ECO_VEHICLE_START_COASTING):
                case static_cast< int32_t>(Literal::ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE):
                case static_cast< int32_t>(Literal::ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION):
                case static_cast< int32_t>(Literal::ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS):
                case static_cast< int32_t>(Literal::ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS):
                case static_cast< int32_t>(Literal::LANGUAGE):
                case static_cast< int32_t>(Literal::THEME_STATUS):
                case static_cast< int32_t>(Literal::THEME_AUTOSET):
                case static_cast< int32_t>(Literal::MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const USMItemIndex &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const USMItemIndex &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const USMItemIndex &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const USMItemIndex &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const USMItemIndex &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const USMItemIndex &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct SetUSMResult : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            SUCCESS = 0,
            FAIL_SPECIFICATION_NOT_APPLIED = 1,
            FAIL_RANGE_INAPPROPRIATE = 2,
            FAIL_WHILE_OTHER_WORK = 3,
            FAIL_INVALID_INDEX_TYPE = 4,
            FAIL_NOT_AUTHORIZED = 5
        };
    
        SetUSMResult()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::SUCCESS)) {}
        SetUSMResult(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::SUCCESS):
                case static_cast< int32_t>(Literal::FAIL_SPECIFICATION_NOT_APPLIED):
                case static_cast< int32_t>(Literal::FAIL_RANGE_INAPPROPRIATE):
                case static_cast< int32_t>(Literal::FAIL_WHILE_OTHER_WORK):
                case static_cast< int32_t>(Literal::FAIL_INVALID_INDEX_TYPE):
                case static_cast< int32_t>(Literal::FAIL_NOT_AUTHORIZED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SetUSMResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SetUSMResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SetUSMResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SetUSMResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SetUSMResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SetUSMResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct USMItem32 : CommonAPI::Struct< USMItemIndex, int32_t> {
    
        USMItem32()
        {
            std::get< 0>(values_) = USMItemIndex();
            std::get< 1>(values_) = 0;
        }
        USMItem32(const USMItemIndex &_index, const int32_t &_value)
        {
            std::get< 0>(values_) = _index;
            std::get< 1>(values_) = _value;
        }
        inline const USMItemIndex &getIndex() const { return std::get< 0>(values_); }
        inline void setIndex(const USMItemIndex &_value) { std::get< 0>(values_) = _value; }
        inline const int32_t &getValue() const { return std::get< 1>(values_); }
        inline void setValue(const int32_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const USMItem32& _other) const {
        return (getIndex() == _other.getIndex() && getValue() == _other.getValue());
        }
        inline bool operator!=(const USMItem32 &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct USMServiceReminder : CommonAPI::Struct< uint32_t, uint16_t, int32_t, int32_t> {
    
        USMServiceReminder()
        {
            std::get< 0>(values_) = 0ul;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0;
            std::get< 3>(values_) = 0;
        }
        USMServiceReminder(const uint32_t &_distance, const uint16_t &_duration, const int32_t &_remain_duration, const int32_t &_remain_distance)
        {
            std::get< 0>(values_) = _distance;
            std::get< 1>(values_) = _duration;
            std::get< 2>(values_) = _remain_duration;
            std::get< 3>(values_) = _remain_distance;
        }
        inline const uint32_t &getDistance() const { return std::get< 0>(values_); }
        inline void setDistance(const uint32_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint16_t &getDuration() const { return std::get< 1>(values_); }
        inline void setDuration(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline const int32_t &getRemain_duration() const { return std::get< 2>(values_); }
        inline void setRemain_duration(const int32_t &_value) { std::get< 2>(values_) = _value; }
        inline const int32_t &getRemain_distance() const { return std::get< 3>(values_); }
        inline void setRemain_distance(const int32_t &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const USMServiceReminder& _other) const {
        return (getDistance() == _other.getDistance() && getDuration() == _other.getDuration() && getRemain_duration() == _other.getRemain_duration() && getRemain_distance() == _other.getRemain_distance());
        }
        inline bool operator!=(const USMServiceReminder &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct USMServiceData : CommonAPI::Struct< uint32_t, uint16_t, uint8_t> {
    
        USMServiceData()
        {
            std::get< 0>(values_) = 0ul;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
        }
        USMServiceData(const uint32_t &_distance, const uint16_t &_duration, const uint8_t &_onOff)
        {
            std::get< 0>(values_) = _distance;
            std::get< 1>(values_) = _duration;
            std::get< 2>(values_) = _onOff;
        }
        inline const uint32_t &getDistance() const { return std::get< 0>(values_); }
        inline void setDistance(const uint32_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint16_t &getDuration() const { return std::get< 1>(values_); }
        inline void setDuration(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getOnOff() const { return std::get< 2>(values_); }
        inline void setOnOff(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const USMServiceData& _other) const {
        return (getDistance() == _other.getDistance() && getDuration() == _other.getDuration() && getOnOff() == _other.getOnOff());
        }
        inline bool operator!=(const USMServiceData &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct USMCanTimeoutContext : CommonAPI::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t> {
    
        USMCanTimeoutContext()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
            std::get< 3>(values_) = 0u;
            std::get< 4>(values_) = 0u;
            std::get< 5>(values_) = 0u;
            std::get< 6>(values_) = 0u;
            std::get< 7>(values_) = 0u;
            std::get< 8>(values_) = 0u;
            std::get< 9>(values_) = 0u;
            std::get< 10>(values_) = 0u;
            std::get< 11>(values_) = 0u;
            std::get< 12>(values_) = 0u;
            std::get< 13>(values_) = 0u;
            std::get< 14>(values_) = 0u;
            std::get< 15>(values_) = 0u;
            std::get< 16>(values_) = 0u;
            std::get< 17>(values_) = 0u;
            std::get< 18>(values_) = 0u;
            std::get< 19>(values_) = 0u;
            std::get< 20>(values_) = 0u;
            std::get< 21>(values_) = 0u;
            std::get< 22>(values_) = 0u;
            std::get< 23>(values_) = 0u;
            std::get< 24>(values_) = 0u;
            std::get< 25>(values_) = 0u;
            std::get< 26>(values_) = 0u;
            std::get< 27>(values_) = 0u;
            std::get< 28>(values_) = 0u;
        }
        USMCanTimeoutContext(const uint8_t &_BCW12_ON, const uint8_t &_CGW_USM1_ON, const uint8_t &_CGW6_ON, const uint8_t &_FCA11_FS_ON, const uint8_t &_FCA12_ON, const uint8_t &_HUD11_ON, const uint8_t &_LKA11_ON, const uint8_t &_LKA12_ON, const uint8_t &_SCC12_ON, const uint8_t &_TPMS11_ON, const uint8_t &_SCC13_ON, const uint8_t &_DATC13_ON, const uint8_t &_CGW_USM2_ON, const uint8_t &_HDA11_ON, const uint8_t &_CGW5_ON, const uint8_t &_CGW1_ON, const uint8_t &_PDW11_ON, const uint8_t &_AVM_HU_PE_00_ON, const uint8_t &_PA11_ON, const uint8_t &_HEV_PC10_ON, const uint8_t &_HEV_PC1_ON, const uint8_t &_HEV_PC7_ON, const uint8_t &_HEV_PC12, const uint8_t &_ADAS_CMD_10_2_200ms_ON, const uint8_t &_ADAS_CMD_31_1_50ms_ON, const uint8_t &_ADAS_CMD_30_2_20ms_ON, const uint8_t &_FR_CMR_01_1_20ms_ON, const uint8_t &_RR_C_RDR_02_1_50ms_ON, const uint8_t &_ADAS_CMD_20_3_20ms_ON)
        {
            std::get< 0>(values_) = _BCW12_ON;
            std::get< 1>(values_) = _CGW_USM1_ON;
            std::get< 2>(values_) = _CGW6_ON;
            std::get< 3>(values_) = _FCA11_FS_ON;
            std::get< 4>(values_) = _FCA12_ON;
            std::get< 5>(values_) = _HUD11_ON;
            std::get< 6>(values_) = _LKA11_ON;
            std::get< 7>(values_) = _LKA12_ON;
            std::get< 8>(values_) = _SCC12_ON;
            std::get< 9>(values_) = _TPMS11_ON;
            std::get< 10>(values_) = _SCC13_ON;
            std::get< 11>(values_) = _DATC13_ON;
            std::get< 12>(values_) = _CGW_USM2_ON;
            std::get< 13>(values_) = _HDA11_ON;
            std::get< 14>(values_) = _CGW5_ON;
            std::get< 15>(values_) = _CGW1_ON;
            std::get< 16>(values_) = _PDW11_ON;
            std::get< 17>(values_) = _AVM_HU_PE_00_ON;
            std::get< 18>(values_) = _PA11_ON;
            std::get< 19>(values_) = _HEV_PC10_ON;
            std::get< 20>(values_) = _HEV_PC1_ON;
            std::get< 21>(values_) = _HEV_PC7_ON;
            std::get< 22>(values_) = _HEV_PC12;
            std::get< 23>(values_) = _ADAS_CMD_10_2_200ms_ON;
            std::get< 24>(values_) = _ADAS_CMD_31_1_50ms_ON;
            std::get< 25>(values_) = _ADAS_CMD_30_2_20ms_ON;
            std::get< 26>(values_) = _FR_CMR_01_1_20ms_ON;
            std::get< 27>(values_) = _RR_C_RDR_02_1_50ms_ON;
            std::get< 28>(values_) = _ADAS_CMD_20_3_20ms_ON;
        }
        inline const uint8_t &getBCW12_ON() const { return std::get< 0>(values_); }
        inline void setBCW12_ON(const uint8_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getCGW_USM1_ON() const { return std::get< 1>(values_); }
        inline void setCGW_USM1_ON(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getCGW6_ON() const { return std::get< 2>(values_); }
        inline void setCGW6_ON(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline const uint8_t &getFCA11_FS_ON() const { return std::get< 3>(values_); }
        inline void setFCA11_FS_ON(const uint8_t &_value) { std::get< 3>(values_) = _value; }
        inline const uint8_t &getFCA12_ON() const { return std::get< 4>(values_); }
        inline void setFCA12_ON(const uint8_t &_value) { std::get< 4>(values_) = _value; }
        inline const uint8_t &getHUD11_ON() const { return std::get< 5>(values_); }
        inline void setHUD11_ON(const uint8_t &_value) { std::get< 5>(values_) = _value; }
        inline const uint8_t &getLKA11_ON() const { return std::get< 6>(values_); }
        inline void setLKA11_ON(const uint8_t &_value) { std::get< 6>(values_) = _value; }
        inline const uint8_t &getLKA12_ON() const { return std::get< 7>(values_); }
        inline void setLKA12_ON(const uint8_t &_value) { std::get< 7>(values_) = _value; }
        inline const uint8_t &getSCC12_ON() const { return std::get< 8>(values_); }
        inline void setSCC12_ON(const uint8_t &_value) { std::get< 8>(values_) = _value; }
        inline const uint8_t &getTPMS11_ON() const { return std::get< 9>(values_); }
        inline void setTPMS11_ON(const uint8_t &_value) { std::get< 9>(values_) = _value; }
        inline const uint8_t &getSCC13_ON() const { return std::get< 10>(values_); }
        inline void setSCC13_ON(const uint8_t &_value) { std::get< 10>(values_) = _value; }
        inline const uint8_t &getDATC13_ON() const { return std::get< 11>(values_); }
        inline void setDATC13_ON(const uint8_t &_value) { std::get< 11>(values_) = _value; }
        inline const uint8_t &getCGW_USM2_ON() const { return std::get< 12>(values_); }
        inline void setCGW_USM2_ON(const uint8_t &_value) { std::get< 12>(values_) = _value; }
        inline const uint8_t &getHDA11_ON() const { return std::get< 13>(values_); }
        inline void setHDA11_ON(const uint8_t &_value) { std::get< 13>(values_) = _value; }
        inline const uint8_t &getCGW5_ON() const { return std::get< 14>(values_); }
        inline void setCGW5_ON(const uint8_t &_value) { std::get< 14>(values_) = _value; }
        inline const uint8_t &getCGW1_ON() const { return std::get< 15>(values_); }
        inline void setCGW1_ON(const uint8_t &_value) { std::get< 15>(values_) = _value; }
        inline const uint8_t &getPDW11_ON() const { return std::get< 16>(values_); }
        inline void setPDW11_ON(const uint8_t &_value) { std::get< 16>(values_) = _value; }
        inline const uint8_t &getAVM_HU_PE_00_ON() const { return std::get< 17>(values_); }
        inline void setAVM_HU_PE_00_ON(const uint8_t &_value) { std::get< 17>(values_) = _value; }
        inline const uint8_t &getPA11_ON() const { return std::get< 18>(values_); }
        inline void setPA11_ON(const uint8_t &_value) { std::get< 18>(values_) = _value; }
        inline const uint8_t &getHEV_PC10_ON() const { return std::get< 19>(values_); }
        inline void setHEV_PC10_ON(const uint8_t &_value) { std::get< 19>(values_) = _value; }
        inline const uint8_t &getHEV_PC1_ON() const { return std::get< 20>(values_); }
        inline void setHEV_PC1_ON(const uint8_t &_value) { std::get< 20>(values_) = _value; }
        inline const uint8_t &getHEV_PC7_ON() const { return std::get< 21>(values_); }
        inline void setHEV_PC7_ON(const uint8_t &_value) { std::get< 21>(values_) = _value; }
        inline const uint8_t &getHEV_PC12() const { return std::get< 22>(values_); }
        inline void setHEV_PC12(const uint8_t &_value) { std::get< 22>(values_) = _value; }
        inline const uint8_t &getADAS_CMD_10_2_200ms_ON() const { return std::get< 23>(values_); }
        inline void setADAS_CMD_10_2_200ms_ON(const uint8_t &_value) { std::get< 23>(values_) = _value; }
        inline const uint8_t &getADAS_CMD_31_1_50ms_ON() const { return std::get< 24>(values_); }
        inline void setADAS_CMD_31_1_50ms_ON(const uint8_t &_value) { std::get< 24>(values_) = _value; }
        inline const uint8_t &getADAS_CMD_30_2_20ms_ON() const { return std::get< 25>(values_); }
        inline void setADAS_CMD_30_2_20ms_ON(const uint8_t &_value) { std::get< 25>(values_) = _value; }
        inline const uint8_t &getFR_CMR_01_1_20ms_ON() const { return std::get< 26>(values_); }
        inline void setFR_CMR_01_1_20ms_ON(const uint8_t &_value) { std::get< 26>(values_) = _value; }
        inline const uint8_t &getRR_C_RDR_02_1_50ms_ON() const { return std::get< 27>(values_); }
        inline void setRR_C_RDR_02_1_50ms_ON(const uint8_t &_value) { std::get< 27>(values_) = _value; }
        inline const uint8_t &getADAS_CMD_20_3_20ms_ON() const { return std::get< 28>(values_); }
        inline void setADAS_CMD_20_3_20ms_ON(const uint8_t &_value) { std::get< 28>(values_) = _value; }
        inline bool operator==(const USMCanTimeoutContext& _other) const {
        return (getBCW12_ON() == _other.getBCW12_ON() && getCGW_USM1_ON() == _other.getCGW_USM1_ON() && getCGW6_ON() == _other.getCGW6_ON() && getFCA11_FS_ON() == _other.getFCA11_FS_ON() && getFCA12_ON() == _other.getFCA12_ON() && getHUD11_ON() == _other.getHUD11_ON() && getLKA11_ON() == _other.getLKA11_ON() && getLKA12_ON() == _other.getLKA12_ON() && getSCC12_ON() == _other.getSCC12_ON() && getTPMS11_ON() == _other.getTPMS11_ON() && getSCC13_ON() == _other.getSCC13_ON() && getDATC13_ON() == _other.getDATC13_ON() && getCGW_USM2_ON() == _other.getCGW_USM2_ON() && getHDA11_ON() == _other.getHDA11_ON() && getCGW5_ON() == _other.getCGW5_ON() && getCGW1_ON() == _other.getCGW1_ON() && getPDW11_ON() == _other.getPDW11_ON() && getAVM_HU_PE_00_ON() == _other.getAVM_HU_PE_00_ON() && getPA11_ON() == _other.getPA11_ON() && getHEV_PC10_ON() == _other.getHEV_PC10_ON() && getHEV_PC1_ON() == _other.getHEV_PC1_ON() && getHEV_PC7_ON() == _other.getHEV_PC7_ON() && getHEV_PC12() == _other.getHEV_PC12() && getADAS_CMD_10_2_200ms_ON() == _other.getADAS_CMD_10_2_200ms_ON() && getADAS_CMD_31_1_50ms_ON() == _other.getADAS_CMD_31_1_50ms_ON() && getADAS_CMD_30_2_20ms_ON() == _other.getADAS_CMD_30_2_20ms_ON() && getFR_CMR_01_1_20ms_ON() == _other.getFR_CMR_01_1_20ms_ON() && getRR_C_RDR_02_1_50ms_ON() == _other.getRR_C_RDR_02_1_50ms_ON() && getADAS_CMD_20_3_20ms_ON() == _other.getADAS_CMD_20_3_20ms_ON());
        }
        inline bool operator!=(const USMCanTimeoutContext &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct USMCanSignalContext : CommonAPI::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t> {
    
        USMCanSignalContext()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
            std::get< 3>(values_) = 0u;
            std::get< 4>(values_) = 0u;
            std::get< 5>(values_) = 0u;
            std::get< 6>(values_) = 0u;
            std::get< 7>(values_) = 0u;
            std::get< 8>(values_) = 0u;
            std::get< 9>(values_) = 0u;
            std::get< 10>(values_) = 0u;
            std::get< 11>(values_) = 0u;
            std::get< 12>(values_) = 0u;
            std::get< 13>(values_) = 0u;
            std::get< 14>(values_) = 0u;
            std::get< 15>(values_) = 0u;
            std::get< 16>(values_) = 0u;
            std::get< 17>(values_) = 0u;
            std::get< 18>(values_) = 0u;
            std::get< 19>(values_) = 0u;
            std::get< 20>(values_) = 0u;
            std::get< 21>(values_) = 0u;
            std::get< 22>(values_) = 0u;
            std::get< 23>(values_) = 0u;
            std::get< 24>(values_) = 0u;
            std::get< 25>(values_) = 0u;
            std::get< 26>(values_) = 0u;
            std::get< 27>(values_) = 0u;
            std::get< 28>(values_) = 0u;
            std::get< 29>(values_) = 0u;
            std::get< 30>(values_) = 0u;
            std::get< 31>(values_) = 0u;
            std::get< 32>(values_) = 0u;
            std::get< 33>(values_) = 0u;
            std::get< 34>(values_) = 0u;
            std::get< 35>(values_) = 0u;
            std::get< 36>(values_) = 0u;
            std::get< 37>(values_) = 0u;
            std::get< 38>(values_) = 0u;
            std::get< 39>(values_) = 0u;
            std::get< 40>(values_) = 0u;
            std::get< 41>(values_) = 0u;
            std::get< 42>(values_) = 0u;
            std::get< 43>(values_) = 0u;
            std::get< 44>(values_) = 0u;
            std::get< 45>(values_) = 0u;
            std::get< 46>(values_) = 0u;
            std::get< 47>(values_) = 0u;
            std::get< 48>(values_) = 0u;
            std::get< 49>(values_) = 0u;
            std::get< 50>(values_) = 0u;
            std::get< 51>(values_) = 0u;
            std::get< 52>(values_) = 0u;
            std::get< 53>(values_) = 0u;
            std::get< 54>(values_) = 0u;
            std::get< 55>(values_) = 0u;
            std::get< 56>(values_) = 0u;
            std::get< 57>(values_) = 0u;
            std::get< 58>(values_) = 0u;
            std::get< 59>(values_) = 0u;
            std::get< 60>(values_) = 0u;
            std::get< 61>(values_) = 0u;
            std::get< 62>(values_) = 0u;
            std::get< 63>(values_) = 0u;
            std::get< 64>(values_) = 0u;
            std::get< 65>(values_) = 0u;
            std::get< 66>(values_) = 0u;
            std::get< 67>(values_) = 0u;
            std::get< 68>(values_) = 0u;
            std::get< 69>(values_) = 0u;
            std::get< 70>(values_) = 0u;
            std::get< 71>(values_) = 0u;
            std::get< 72>(values_) = 0u;
            std::get< 73>(values_) = 0u;
            std::get< 74>(values_) = 0u;
            std::get< 75>(values_) = 0u;
            std::get< 76>(values_) = 0u;
            std::get< 77>(values_) = 0u;
            std::get< 78>(values_) = 0u;
            std::get< 79>(values_) = 0u;
        }
        USMCanSignalContext(const uint8_t &_assist_lkas, const uint8_t &_assist_scc, const uint8_t &_assist_sccFrVehDptNoti, const uint8_t &_assist_bcwSound, const uint8_t &_assist_naviCamera, const uint8_t &_assist_vcuStatus, const uint8_t &_assist_vcuAlarm, const uint8_t &_assist_vcuCtrl, const uint8_t &_door_autoLock, const uint8_t &_door_autoUnlock, const uint8_t &_door_twoUnlock, const uint8_t &_door_hornFeedback, const uint8_t &_light_oneTouch, const uint8_t &_light_headlamp, const uint8_t &_light_welcomeMirrorLight, const uint8_t &_sound_pasVolume, const uint8_t &_convn_wirelessCharge_front, const uint8_t &_assist_nsccZone, const uint8_t &_other_tempUnit, const uint8_t &_other_tireUnit, const uint8_t &_req_smkOption, const uint8_t &_hud_status, const uint8_t &_hud_height, const uint8_t &_hud_rotate, const uint8_t &_hud_bright, const uint8_t &_assist_daw, const uint8_t &_assist_aebBrake_fcw, const uint8_t &_conv_mirrorFolding, const uint8_t &_assist_aebAlarm_fcw, const uint8_t &_assist_islwStatus, const uint8_t &_assist_nccCamera, const uint8_t &_convn_rearWiper, const uint8_t &_assist_nsccCurve, const uint8_t &_assist_hda, const uint8_t &_hud_type, const uint8_t &_hud_bcwStatus, const uint8_t &_hud_disStatus, const uint8_t &_hud_lkaStatus, const uint8_t &_hud_sccStatus, const uint8_t &_hud_tbtStatus, const uint8_t &_hud_fontSize, const uint8_t &_hud_fontColor, const uint8_t &_assist_warnTiming_fca, const uint8_t &_assist_fca, const uint8_t &_assist_bcw, const uint8_t &_assist_sea, const uint8_t &_assist_bca, const uint8_t &_assist_rccw, const uint8_t &_req_PTGSpeedSetWarn, const uint8_t &_door_pwrTrunk, const uint8_t &_door_smtTailgate, const uint8_t &_convn_seatEasyAccs, const uint8_t &_convn_tunnelClimateRValue, const uint8_t &_convn_smtWelcome, const uint8_t &_convn_unlockWelcome, const uint8_t &_door_pwrTrunkSpd, const uint8_t &_convn_welcomeTitleOpt, const uint8_t &_assist_lfa, const uint8_t &_convn_rearAlert, const uint8_t &_light_ambBright, const uint8_t &_light_ambColor, const uint8_t &_light_ambient, const uint8_t &_assist_warnTiming_bcw, const uint8_t &_assist_lkaMode, const uint8_t &_door_walrValue, const uint8_t &_convn_seatEasyAccsDown, const uint8_t &_light_hbaOption, const uint8_t &_hud_avStatus, const uint8_t &_WarningVolume_PdwOption, const uint8_t &_assist_bvm, const uint8_t &_assist_nccCamera_hcu, const uint8_t &_eco_auxBatterySaver, const uint8_t &_eco_coastingGuide, const uint8_t &_eco_coastingGuide_sound, const uint8_t &_eco_startCoasting, const uint8_t &_eco_chargingConnectorLocking, const uint8_t &_eco_volumeControlFunc, const uint8_t &_sound_pasVolume_pa, const uint8_t &_eco_greenZoneEVDrive, const uint8_t &_eco_chargingConnectorLocking_Type)
        {
            std::get< 0>(values_) = _assist_lkas;
            std::get< 1>(values_) = _assist_scc;
            std::get< 2>(values_) = _assist_sccFrVehDptNoti;
            std::get< 3>(values_) = _assist_bcwSound;
            std::get< 4>(values_) = _assist_naviCamera;
            std::get< 5>(values_) = _assist_vcuStatus;
            std::get< 6>(values_) = _assist_vcuAlarm;
            std::get< 7>(values_) = _assist_vcuCtrl;
            std::get< 8>(values_) = _door_autoLock;
            std::get< 9>(values_) = _door_autoUnlock;
            std::get< 10>(values_) = _door_twoUnlock;
            std::get< 11>(values_) = _door_hornFeedback;
            std::get< 12>(values_) = _light_oneTouch;
            std::get< 13>(values_) = _light_headlamp;
            std::get< 14>(values_) = _light_welcomeMirrorLight;
            std::get< 15>(values_) = _sound_pasVolume;
            std::get< 16>(values_) = _convn_wirelessCharge_front;
            std::get< 17>(values_) = _assist_nsccZone;
            std::get< 18>(values_) = _other_tempUnit;
            std::get< 19>(values_) = _other_tireUnit;
            std::get< 20>(values_) = _req_smkOption;
            std::get< 21>(values_) = _hud_status;
            std::get< 22>(values_) = _hud_height;
            std::get< 23>(values_) = _hud_rotate;
            std::get< 24>(values_) = _hud_bright;
            std::get< 25>(values_) = _assist_daw;
            std::get< 26>(values_) = _assist_aebBrake_fcw;
            std::get< 27>(values_) = _conv_mirrorFolding;
            std::get< 28>(values_) = _assist_aebAlarm_fcw;
            std::get< 29>(values_) = _assist_islwStatus;
            std::get< 30>(values_) = _assist_nccCamera;
            std::get< 31>(values_) = _convn_rearWiper;
            std::get< 32>(values_) = _assist_nsccCurve;
            std::get< 33>(values_) = _assist_hda;
            std::get< 34>(values_) = _hud_type;
            std::get< 35>(values_) = _hud_bcwStatus;
            std::get< 36>(values_) = _hud_disStatus;
            std::get< 37>(values_) = _hud_lkaStatus;
            std::get< 38>(values_) = _hud_sccStatus;
            std::get< 39>(values_) = _hud_tbtStatus;
            std::get< 40>(values_) = _hud_fontSize;
            std::get< 41>(values_) = _hud_fontColor;
            std::get< 42>(values_) = _assist_warnTiming_fca;
            std::get< 43>(values_) = _assist_fca;
            std::get< 44>(values_) = _assist_bcw;
            std::get< 45>(values_) = _assist_sea;
            std::get< 46>(values_) = _assist_bca;
            std::get< 47>(values_) = _assist_rccw;
            std::get< 48>(values_) = _req_PTGSpeedSetWarn;
            std::get< 49>(values_) = _door_pwrTrunk;
            std::get< 50>(values_) = _door_smtTailgate;
            std::get< 51>(values_) = _convn_seatEasyAccs;
            std::get< 52>(values_) = _convn_tunnelClimateRValue;
            std::get< 53>(values_) = _convn_smtWelcome;
            std::get< 54>(values_) = _convn_unlockWelcome;
            std::get< 55>(values_) = _door_pwrTrunkSpd;
            std::get< 56>(values_) = _convn_welcomeTitleOpt;
            std::get< 57>(values_) = _assist_lfa;
            std::get< 58>(values_) = _convn_rearAlert;
            std::get< 59>(values_) = _light_ambBright;
            std::get< 60>(values_) = _light_ambColor;
            std::get< 61>(values_) = _light_ambient;
            std::get< 62>(values_) = _assist_warnTiming_bcw;
            std::get< 63>(values_) = _assist_lkaMode;
            std::get< 64>(values_) = _door_walrValue;
            std::get< 65>(values_) = _convn_seatEasyAccsDown;
            std::get< 66>(values_) = _light_hbaOption;
            std::get< 67>(values_) = _hud_avStatus;
            std::get< 68>(values_) = _WarningVolume_PdwOption;
            std::get< 69>(values_) = _assist_bvm;
            std::get< 70>(values_) = _assist_nccCamera_hcu;
            std::get< 71>(values_) = _eco_auxBatterySaver;
            std::get< 72>(values_) = _eco_coastingGuide;
            std::get< 73>(values_) = _eco_coastingGuide_sound;
            std::get< 74>(values_) = _eco_startCoasting;
            std::get< 75>(values_) = _eco_chargingConnectorLocking;
            std::get< 76>(values_) = _eco_volumeControlFunc;
            std::get< 77>(values_) = _sound_pasVolume_pa;
            std::get< 78>(values_) = _eco_greenZoneEVDrive;
            std::get< 79>(values_) = _eco_chargingConnectorLocking_Type;
        }
        inline const uint8_t &getAssist_lkas() const { return std::get< 0>(values_); }
        inline void setAssist_lkas(const uint8_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getAssist_scc() const { return std::get< 1>(values_); }
        inline void setAssist_scc(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getAssist_sccFrVehDptNoti() const { return std::get< 2>(values_); }
        inline void setAssist_sccFrVehDptNoti(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline const uint8_t &getAssist_bcwSound() const { return std::get< 3>(values_); }
        inline void setAssist_bcwSound(const uint8_t &_value) { std::get< 3>(values_) = _value; }
        inline const uint8_t &getAssist_naviCamera() const { return std::get< 4>(values_); }
        inline void setAssist_naviCamera(const uint8_t &_value) { std::get< 4>(values_) = _value; }
        inline const uint8_t &getAssist_vcuStatus() const { return std::get< 5>(values_); }
        inline void setAssist_vcuStatus(const uint8_t &_value) { std::get< 5>(values_) = _value; }
        inline const uint8_t &getAssist_vcuAlarm() const { return std::get< 6>(values_); }
        inline void setAssist_vcuAlarm(const uint8_t &_value) { std::get< 6>(values_) = _value; }
        inline const uint8_t &getAssist_vcuCtrl() const { return std::get< 7>(values_); }
        inline void setAssist_vcuCtrl(const uint8_t &_value) { std::get< 7>(values_) = _value; }
        inline const uint8_t &getDoor_autoLock() const { return std::get< 8>(values_); }
        inline void setDoor_autoLock(const uint8_t &_value) { std::get< 8>(values_) = _value; }
        inline const uint8_t &getDoor_autoUnlock() const { return std::get< 9>(values_); }
        inline void setDoor_autoUnlock(const uint8_t &_value) { std::get< 9>(values_) = _value; }
        inline const uint8_t &getDoor_twoUnlock() const { return std::get< 10>(values_); }
        inline void setDoor_twoUnlock(const uint8_t &_value) { std::get< 10>(values_) = _value; }
        inline const uint8_t &getDoor_hornFeedback() const { return std::get< 11>(values_); }
        inline void setDoor_hornFeedback(const uint8_t &_value) { std::get< 11>(values_) = _value; }
        inline const uint8_t &getLight_oneTouch() const { return std::get< 12>(values_); }
        inline void setLight_oneTouch(const uint8_t &_value) { std::get< 12>(values_) = _value; }
        inline const uint8_t &getLight_headlamp() const { return std::get< 13>(values_); }
        inline void setLight_headlamp(const uint8_t &_value) { std::get< 13>(values_) = _value; }
        inline const uint8_t &getLight_welcomeMirrorLight() const { return std::get< 14>(values_); }
        inline void setLight_welcomeMirrorLight(const uint8_t &_value) { std::get< 14>(values_) = _value; }
        inline const uint8_t &getSound_pasVolume() const { return std::get< 15>(values_); }
        inline void setSound_pasVolume(const uint8_t &_value) { std::get< 15>(values_) = _value; }
        inline const uint8_t &getConvn_wirelessCharge_front() const { return std::get< 16>(values_); }
        inline void setConvn_wirelessCharge_front(const uint8_t &_value) { std::get< 16>(values_) = _value; }
        inline const uint8_t &getAssist_nsccZone() const { return std::get< 17>(values_); }
        inline void setAssist_nsccZone(const uint8_t &_value) { std::get< 17>(values_) = _value; }
        inline const uint8_t &getOther_tempUnit() const { return std::get< 18>(values_); }
        inline void setOther_tempUnit(const uint8_t &_value) { std::get< 18>(values_) = _value; }
        inline const uint8_t &getOther_tireUnit() const { return std::get< 19>(values_); }
        inline void setOther_tireUnit(const uint8_t &_value) { std::get< 19>(values_) = _value; }
        inline const uint8_t &getReq_smkOption() const { return std::get< 20>(values_); }
        inline void setReq_smkOption(const uint8_t &_value) { std::get< 20>(values_) = _value; }
        inline const uint8_t &getHud_status() const { return std::get< 21>(values_); }
        inline void setHud_status(const uint8_t &_value) { std::get< 21>(values_) = _value; }
        inline const uint8_t &getHud_height() const { return std::get< 22>(values_); }
        inline void setHud_height(const uint8_t &_value) { std::get< 22>(values_) = _value; }
        inline const uint8_t &getHud_rotate() const { return std::get< 23>(values_); }
        inline void setHud_rotate(const uint8_t &_value) { std::get< 23>(values_) = _value; }
        inline const uint8_t &getHud_bright() const { return std::get< 24>(values_); }
        inline void setHud_bright(const uint8_t &_value) { std::get< 24>(values_) = _value; }
        inline const uint8_t &getAssist_daw() const { return std::get< 25>(values_); }
        inline void setAssist_daw(const uint8_t &_value) { std::get< 25>(values_) = _value; }
        inline const uint8_t &getAssist_aebBrake_fcw() const { return std::get< 26>(values_); }
        inline void setAssist_aebBrake_fcw(const uint8_t &_value) { std::get< 26>(values_) = _value; }
        inline const uint8_t &getConv_mirrorFolding() const { return std::get< 27>(values_); }
        inline void setConv_mirrorFolding(const uint8_t &_value) { std::get< 27>(values_) = _value; }
        inline const uint8_t &getAssist_aebAlarm_fcw() const { return std::get< 28>(values_); }
        inline void setAssist_aebAlarm_fcw(const uint8_t &_value) { std::get< 28>(values_) = _value; }
        inline const uint8_t &getAssist_islwStatus() const { return std::get< 29>(values_); }
        inline void setAssist_islwStatus(const uint8_t &_value) { std::get< 29>(values_) = _value; }
        inline const uint8_t &getAssist_nccCamera() const { return std::get< 30>(values_); }
        inline void setAssist_nccCamera(const uint8_t &_value) { std::get< 30>(values_) = _value; }
        inline const uint8_t &getConvn_rearWiper() const { return std::get< 31>(values_); }
        inline void setConvn_rearWiper(const uint8_t &_value) { std::get< 31>(values_) = _value; }
        inline const uint8_t &getAssist_nsccCurve() const { return std::get< 32>(values_); }
        inline void setAssist_nsccCurve(const uint8_t &_value) { std::get< 32>(values_) = _value; }
        inline const uint8_t &getAssist_hda() const { return std::get< 33>(values_); }
        inline void setAssist_hda(const uint8_t &_value) { std::get< 33>(values_) = _value; }
        inline const uint8_t &getHud_type() const { return std::get< 34>(values_); }
        inline void setHud_type(const uint8_t &_value) { std::get< 34>(values_) = _value; }
        inline const uint8_t &getHud_bcwStatus() const { return std::get< 35>(values_); }
        inline void setHud_bcwStatus(const uint8_t &_value) { std::get< 35>(values_) = _value; }
        inline const uint8_t &getHud_disStatus() const { return std::get< 36>(values_); }
        inline void setHud_disStatus(const uint8_t &_value) { std::get< 36>(values_) = _value; }
        inline const uint8_t &getHud_lkaStatus() const { return std::get< 37>(values_); }
        inline void setHud_lkaStatus(const uint8_t &_value) { std::get< 37>(values_) = _value; }
        inline const uint8_t &getHud_sccStatus() const { return std::get< 38>(values_); }
        inline void setHud_sccStatus(const uint8_t &_value) { std::get< 38>(values_) = _value; }
        inline const uint8_t &getHud_tbtStatus() const { return std::get< 39>(values_); }
        inline void setHud_tbtStatus(const uint8_t &_value) { std::get< 39>(values_) = _value; }
        inline const uint8_t &getHud_fontSize() const { return std::get< 40>(values_); }
        inline void setHud_fontSize(const uint8_t &_value) { std::get< 40>(values_) = _value; }
        inline const uint8_t &getHud_fontColor() const { return std::get< 41>(values_); }
        inline void setHud_fontColor(const uint8_t &_value) { std::get< 41>(values_) = _value; }
        inline const uint8_t &getAssist_warnTiming_fca() const { return std::get< 42>(values_); }
        inline void setAssist_warnTiming_fca(const uint8_t &_value) { std::get< 42>(values_) = _value; }
        inline const uint8_t &getAssist_fca() const { return std::get< 43>(values_); }
        inline void setAssist_fca(const uint8_t &_value) { std::get< 43>(values_) = _value; }
        inline const uint8_t &getAssist_bcw() const { return std::get< 44>(values_); }
        inline void setAssist_bcw(const uint8_t &_value) { std::get< 44>(values_) = _value; }
        inline const uint8_t &getAssist_sea() const { return std::get< 45>(values_); }
        inline void setAssist_sea(const uint8_t &_value) { std::get< 45>(values_) = _value; }
        inline const uint8_t &getAssist_bca() const { return std::get< 46>(values_); }
        inline void setAssist_bca(const uint8_t &_value) { std::get< 46>(values_) = _value; }
        inline const uint8_t &getAssist_rccw() const { return std::get< 47>(values_); }
        inline void setAssist_rccw(const uint8_t &_value) { std::get< 47>(values_) = _value; }
        inline const uint8_t &getReq_PTGSpeedSetWarn() const { return std::get< 48>(values_); }
        inline void setReq_PTGSpeedSetWarn(const uint8_t &_value) { std::get< 48>(values_) = _value; }
        inline const uint8_t &getDoor_pwrTrunk() const { return std::get< 49>(values_); }
        inline void setDoor_pwrTrunk(const uint8_t &_value) { std::get< 49>(values_) = _value; }
        inline const uint8_t &getDoor_smtTailgate() const { return std::get< 50>(values_); }
        inline void setDoor_smtTailgate(const uint8_t &_value) { std::get< 50>(values_) = _value; }
        inline const uint8_t &getConvn_seatEasyAccs() const { return std::get< 51>(values_); }
        inline void setConvn_seatEasyAccs(const uint8_t &_value) { std::get< 51>(values_) = _value; }
        inline const uint8_t &getConvn_tunnelClimateRValue() const { return std::get< 52>(values_); }
        inline void setConvn_tunnelClimateRValue(const uint8_t &_value) { std::get< 52>(values_) = _value; }
        inline const uint8_t &getConvn_smtWelcome() const { return std::get< 53>(values_); }
        inline void setConvn_smtWelcome(const uint8_t &_value) { std::get< 53>(values_) = _value; }
        inline const uint8_t &getConvn_unlockWelcome() const { return std::get< 54>(values_); }
        inline void setConvn_unlockWelcome(const uint8_t &_value) { std::get< 54>(values_) = _value; }
        inline const uint8_t &getDoor_pwrTrunkSpd() const { return std::get< 55>(values_); }
        inline void setDoor_pwrTrunkSpd(const uint8_t &_value) { std::get< 55>(values_) = _value; }
        inline const uint8_t &getConvn_welcomeTitleOpt() const { return std::get< 56>(values_); }
        inline void setConvn_welcomeTitleOpt(const uint8_t &_value) { std::get< 56>(values_) = _value; }
        inline const uint8_t &getAssist_lfa() const { return std::get< 57>(values_); }
        inline void setAssist_lfa(const uint8_t &_value) { std::get< 57>(values_) = _value; }
        inline const uint8_t &getConvn_rearAlert() const { return std::get< 58>(values_); }
        inline void setConvn_rearAlert(const uint8_t &_value) { std::get< 58>(values_) = _value; }
        inline const uint8_t &getLight_ambBright() const { return std::get< 59>(values_); }
        inline void setLight_ambBright(const uint8_t &_value) { std::get< 59>(values_) = _value; }
        inline const uint8_t &getLight_ambColor() const { return std::get< 60>(values_); }
        inline void setLight_ambColor(const uint8_t &_value) { std::get< 60>(values_) = _value; }
        inline const uint8_t &getLight_ambient() const { return std::get< 61>(values_); }
        inline void setLight_ambient(const uint8_t &_value) { std::get< 61>(values_) = _value; }
        inline const uint8_t &getAssist_warnTiming_bcw() const { return std::get< 62>(values_); }
        inline void setAssist_warnTiming_bcw(const uint8_t &_value) { std::get< 62>(values_) = _value; }
        inline const uint8_t &getAssist_lkaMode() const { return std::get< 63>(values_); }
        inline void setAssist_lkaMode(const uint8_t &_value) { std::get< 63>(values_) = _value; }
        inline const uint8_t &getDoor_walrValue() const { return std::get< 64>(values_); }
        inline void setDoor_walrValue(const uint8_t &_value) { std::get< 64>(values_) = _value; }
        inline const uint8_t &getConvn_seatEasyAccsDown() const { return std::get< 65>(values_); }
        inline void setConvn_seatEasyAccsDown(const uint8_t &_value) { std::get< 65>(values_) = _value; }
        inline const uint8_t &getLight_hbaOption() const { return std::get< 66>(values_); }
        inline void setLight_hbaOption(const uint8_t &_value) { std::get< 66>(values_) = _value; }
        inline const uint8_t &getHud_avStatus() const { return std::get< 67>(values_); }
        inline void setHud_avStatus(const uint8_t &_value) { std::get< 67>(values_) = _value; }
        inline const uint8_t &getWarningVolume_PdwOption() const { return std::get< 68>(values_); }
        inline void setWarningVolume_PdwOption(const uint8_t &_value) { std::get< 68>(values_) = _value; }
        inline const uint8_t &getAssist_bvm() const { return std::get< 69>(values_); }
        inline void setAssist_bvm(const uint8_t &_value) { std::get< 69>(values_) = _value; }
        inline const uint8_t &getAssist_nccCamera_hcu() const { return std::get< 70>(values_); }
        inline void setAssist_nccCamera_hcu(const uint8_t &_value) { std::get< 70>(values_) = _value; }
        inline const uint8_t &getEco_auxBatterySaver() const { return std::get< 71>(values_); }
        inline void setEco_auxBatterySaver(const uint8_t &_value) { std::get< 71>(values_) = _value; }
        inline const uint8_t &getEco_coastingGuide() const { return std::get< 72>(values_); }
        inline void setEco_coastingGuide(const uint8_t &_value) { std::get< 72>(values_) = _value; }
        inline const uint8_t &getEco_coastingGuide_sound() const { return std::get< 73>(values_); }
        inline void setEco_coastingGuide_sound(const uint8_t &_value) { std::get< 73>(values_) = _value; }
        inline const uint8_t &getEco_startCoasting() const { return std::get< 74>(values_); }
        inline void setEco_startCoasting(const uint8_t &_value) { std::get< 74>(values_) = _value; }
        inline const uint8_t &getEco_chargingConnectorLocking() const { return std::get< 75>(values_); }
        inline void setEco_chargingConnectorLocking(const uint8_t &_value) { std::get< 75>(values_) = _value; }
        inline const uint8_t &getEco_volumeControlFunc() const { return std::get< 76>(values_); }
        inline void setEco_volumeControlFunc(const uint8_t &_value) { std::get< 76>(values_) = _value; }
        inline const uint8_t &getSound_pasVolume_pa() const { return std::get< 77>(values_); }
        inline void setSound_pasVolume_pa(const uint8_t &_value) { std::get< 77>(values_) = _value; }
        inline const uint8_t &getEco_greenZoneEVDrive() const { return std::get< 78>(values_); }
        inline void setEco_greenZoneEVDrive(const uint8_t &_value) { std::get< 78>(values_) = _value; }
        inline const uint8_t &getEco_chargingConnectorLocking_Type() const { return std::get< 79>(values_); }
        inline void setEco_chargingConnectorLocking_Type(const uint8_t &_value) { std::get< 79>(values_) = _value; }
        inline bool operator==(const USMCanSignalContext& _other) const {
        return (getAssist_lkas() == _other.getAssist_lkas() && getAssist_scc() == _other.getAssist_scc() && getAssist_sccFrVehDptNoti() == _other.getAssist_sccFrVehDptNoti() && getAssist_bcwSound() == _other.getAssist_bcwSound() && getAssist_naviCamera() == _other.getAssist_naviCamera() && getAssist_vcuStatus() == _other.getAssist_vcuStatus() && getAssist_vcuAlarm() == _other.getAssist_vcuAlarm() && getAssist_vcuCtrl() == _other.getAssist_vcuCtrl() && getDoor_autoLock() == _other.getDoor_autoLock() && getDoor_autoUnlock() == _other.getDoor_autoUnlock() && getDoor_twoUnlock() == _other.getDoor_twoUnlock() && getDoor_hornFeedback() == _other.getDoor_hornFeedback() && getLight_oneTouch() == _other.getLight_oneTouch() && getLight_headlamp() == _other.getLight_headlamp() && getLight_welcomeMirrorLight() == _other.getLight_welcomeMirrorLight() && getSound_pasVolume() == _other.getSound_pasVolume() && getConvn_wirelessCharge_front() == _other.getConvn_wirelessCharge_front() && getAssist_nsccZone() == _other.getAssist_nsccZone() && getOther_tempUnit() == _other.getOther_tempUnit() && getOther_tireUnit() == _other.getOther_tireUnit() && getReq_smkOption() == _other.getReq_smkOption() && getHud_status() == _other.getHud_status() && getHud_height() == _other.getHud_height() && getHud_rotate() == _other.getHud_rotate() && getHud_bright() == _other.getHud_bright() && getAssist_daw() == _other.getAssist_daw() && getAssist_aebBrake_fcw() == _other.getAssist_aebBrake_fcw() && getConv_mirrorFolding() == _other.getConv_mirrorFolding() && getAssist_aebAlarm_fcw() == _other.getAssist_aebAlarm_fcw() && getAssist_islwStatus() == _other.getAssist_islwStatus() && getAssist_nccCamera() == _other.getAssist_nccCamera() && getConvn_rearWiper() == _other.getConvn_rearWiper() && getAssist_nsccCurve() == _other.getAssist_nsccCurve() && getAssist_hda() == _other.getAssist_hda() && getHud_type() == _other.getHud_type() && getHud_bcwStatus() == _other.getHud_bcwStatus() && getHud_disStatus() == _other.getHud_disStatus() && getHud_lkaStatus() == _other.getHud_lkaStatus() && getHud_sccStatus() == _other.getHud_sccStatus() && getHud_tbtStatus() == _other.getHud_tbtStatus() && getHud_fontSize() == _other.getHud_fontSize() && getHud_fontColor() == _other.getHud_fontColor() && getAssist_warnTiming_fca() == _other.getAssist_warnTiming_fca() && getAssist_fca() == _other.getAssist_fca() && getAssist_bcw() == _other.getAssist_bcw() && getAssist_sea() == _other.getAssist_sea() && getAssist_bca() == _other.getAssist_bca() && getAssist_rccw() == _other.getAssist_rccw() && getReq_PTGSpeedSetWarn() == _other.getReq_PTGSpeedSetWarn() && getDoor_pwrTrunk() == _other.getDoor_pwrTrunk() && getDoor_smtTailgate() == _other.getDoor_smtTailgate() && getConvn_seatEasyAccs() == _other.getConvn_seatEasyAccs() && getConvn_tunnelClimateRValue() == _other.getConvn_tunnelClimateRValue() && getConvn_smtWelcome() == _other.getConvn_smtWelcome() && getConvn_unlockWelcome() == _other.getConvn_unlockWelcome() && getDoor_pwrTrunkSpd() == _other.getDoor_pwrTrunkSpd() && getConvn_welcomeTitleOpt() == _other.getConvn_welcomeTitleOpt() && getAssist_lfa() == _other.getAssist_lfa() && getConvn_rearAlert() == _other.getConvn_rearAlert() && getLight_ambBright() == _other.getLight_ambBright() && getLight_ambColor() == _other.getLight_ambColor() && getLight_ambient() == _other.getLight_ambient() && getAssist_warnTiming_bcw() == _other.getAssist_warnTiming_bcw() && getAssist_lkaMode() == _other.getAssist_lkaMode() && getDoor_walrValue() == _other.getDoor_walrValue() && getConvn_seatEasyAccsDown() == _other.getConvn_seatEasyAccsDown() && getLight_hbaOption() == _other.getLight_hbaOption() && getHud_avStatus() == _other.getHud_avStatus() && getWarningVolume_PdwOption() == _other.getWarningVolume_PdwOption() && getAssist_bvm() == _other.getAssist_bvm() && getAssist_nccCamera_hcu() == _other.getAssist_nccCamera_hcu() && getEco_auxBatterySaver() == _other.getEco_auxBatterySaver() && getEco_coastingGuide() == _other.getEco_coastingGuide() && getEco_coastingGuide_sound() == _other.getEco_coastingGuide_sound() && getEco_startCoasting() == _other.getEco_startCoasting() && getEco_chargingConnectorLocking() == _other.getEco_chargingConnectorLocking() && getEco_volumeControlFunc() == _other.getEco_volumeControlFunc() && getSound_pasVolume_pa() == _other.getSound_pasVolume_pa() && getEco_greenZoneEVDrive() == _other.getEco_greenZoneEVDrive() && getEco_chargingConnectorLocking_Type() == _other.getEco_chargingConnectorLocking_Type());
        }
        inline bool operator!=(const USMCanSignalContext &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct USMSaveContext : CommonAPI::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint32_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t> {
    
        USMSaveContext()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
            std::get< 3>(values_) = 0u;
            std::get< 4>(values_) = 0u;
            std::get< 5>(values_) = 0u;
            std::get< 6>(values_) = 0u;
            std::get< 7>(values_) = 0ul;
            std::get< 8>(values_) = 0u;
            std::get< 9>(values_) = 0u;
            std::get< 10>(values_) = 0u;
            std::get< 11>(values_) = 0u;
            std::get< 12>(values_) = 0u;
            std::get< 13>(values_) = 0u;
            std::get< 14>(values_) = 0u;
            std::get< 15>(values_) = 0u;
        }
        USMSaveContext(const uint8_t &_sound_voiceVolume, const uint8_t &_sound_welcomeSound, const uint8_t &_convn_wiperLight, const uint8_t &_convn_gear, const uint8_t &_other_fuelEcoReset, const uint8_t &_other_tripUnit, const uint8_t &_language_language, const uint32_t &_lastmode, const uint8_t &_assist_warnVolume, const uint8_t &_convn_iceWarning, const uint8_t &_other_subGauge, const uint8_t &_convn_trafficinfo, const uint8_t &_other_torqueUnit, const uint8_t &_other_turboBoostPressureUnit, const uint8_t &_theme_sta, const uint8_t &_theme_autoset)
        {
            std::get< 0>(values_) = _sound_voiceVolume;
            std::get< 1>(values_) = _sound_welcomeSound;
            std::get< 2>(values_) = _convn_wiperLight;
            std::get< 3>(values_) = _convn_gear;
            std::get< 4>(values_) = _other_fuelEcoReset;
            std::get< 5>(values_) = _other_tripUnit;
            std::get< 6>(values_) = _language_language;
            std::get< 7>(values_) = _lastmode;
            std::get< 8>(values_) = _assist_warnVolume;
            std::get< 9>(values_) = _convn_iceWarning;
            std::get< 10>(values_) = _other_subGauge;
            std::get< 11>(values_) = _convn_trafficinfo;
            std::get< 12>(values_) = _other_torqueUnit;
            std::get< 13>(values_) = _other_turboBoostPressureUnit;
            std::get< 14>(values_) = _theme_sta;
            std::get< 15>(values_) = _theme_autoset;
        }
        inline const uint8_t &getSound_voiceVolume() const { return std::get< 0>(values_); }
        inline void setSound_voiceVolume(const uint8_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getSound_welcomeSound() const { return std::get< 1>(values_); }
        inline void setSound_welcomeSound(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getConvn_wiperLight() const { return std::get< 2>(values_); }
        inline void setConvn_wiperLight(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline const uint8_t &getConvn_gear() const { return std::get< 3>(values_); }
        inline void setConvn_gear(const uint8_t &_value) { std::get< 3>(values_) = _value; }
        inline const uint8_t &getOther_fuelEcoReset() const { return std::get< 4>(values_); }
        inline void setOther_fuelEcoReset(const uint8_t &_value) { std::get< 4>(values_) = _value; }
        inline const uint8_t &getOther_tripUnit() const { return std::get< 5>(values_); }
        inline void setOther_tripUnit(const uint8_t &_value) { std::get< 5>(values_) = _value; }
        inline const uint8_t &getLanguage_language() const { return std::get< 6>(values_); }
        inline void setLanguage_language(const uint8_t &_value) { std::get< 6>(values_) = _value; }
        inline const uint32_t &getLastmode() const { return std::get< 7>(values_); }
        inline void setLastmode(const uint32_t &_value) { std::get< 7>(values_) = _value; }
        inline const uint8_t &getAssist_warnVolume() const { return std::get< 8>(values_); }
        inline void setAssist_warnVolume(const uint8_t &_value) { std::get< 8>(values_) = _value; }
        inline const uint8_t &getConvn_iceWarning() const { return std::get< 9>(values_); }
        inline void setConvn_iceWarning(const uint8_t &_value) { std::get< 9>(values_) = _value; }
        inline const uint8_t &getOther_subGauge() const { return std::get< 10>(values_); }
        inline void setOther_subGauge(const uint8_t &_value) { std::get< 10>(values_) = _value; }
        inline const uint8_t &getConvn_trafficinfo() const { return std::get< 11>(values_); }
        inline void setConvn_trafficinfo(const uint8_t &_value) { std::get< 11>(values_) = _value; }
        inline const uint8_t &getOther_torqueUnit() const { return std::get< 12>(values_); }
        inline void setOther_torqueUnit(const uint8_t &_value) { std::get< 12>(values_) = _value; }
        inline const uint8_t &getOther_turboBoostPressureUnit() const { return std::get< 13>(values_); }
        inline void setOther_turboBoostPressureUnit(const uint8_t &_value) { std::get< 13>(values_) = _value; }
        inline const uint8_t &getTheme_sta() const { return std::get< 14>(values_); }
        inline void setTheme_sta(const uint8_t &_value) { std::get< 14>(values_) = _value; }
        inline const uint8_t &getTheme_autoset() const { return std::get< 15>(values_); }
        inline void setTheme_autoset(const uint8_t &_value) { std::get< 15>(values_) = _value; }
        inline bool operator==(const USMSaveContext& _other) const {
        return (getSound_voiceVolume() == _other.getSound_voiceVolume() && getSound_welcomeSound() == _other.getSound_welcomeSound() && getConvn_wiperLight() == _other.getConvn_wiperLight() && getConvn_gear() == _other.getConvn_gear() && getOther_fuelEcoReset() == _other.getOther_fuelEcoReset() && getOther_tripUnit() == _other.getOther_tripUnit() && getLanguage_language() == _other.getLanguage_language() && getLastmode() == _other.getLastmode() && getAssist_warnVolume() == _other.getAssist_warnVolume() && getConvn_iceWarning() == _other.getConvn_iceWarning() && getOther_subGauge() == _other.getOther_subGauge() && getConvn_trafficinfo() == _other.getConvn_trafficinfo() && getOther_torqueUnit() == _other.getOther_torqueUnit() && getOther_turboBoostPressureUnit() == _other.getOther_turboBoostPressureUnit() && getTheme_sta() == _other.getTheme_sta() && getTheme_autoset() == _other.getTheme_autoset());
        }
        inline bool operator!=(const USMSaveContext &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct USMServiceContext : CommonAPI::Struct< uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, int32_t, int32_t> {
    
        USMServiceContext()
        {
            std::get< 0>(values_) = 0ul;
            std::get< 1>(values_) = 0ul;
            std::get< 2>(values_) = 0ul;
            std::get< 3>(values_) = 0ul;
            std::get< 4>(values_) = 0ul;
            std::get< 5>(values_) = 0ul;
            std::get< 6>(values_) = 0;
            std::get< 7>(values_) = 0;
        }
        USMServiceContext(const uint32_t &_service_distance, const uint32_t &_service_duration, const uint32_t &_service_onoff, const uint32_t &_service_type, const uint32_t &_service_state, const uint32_t &_padding, const int32_t &_remain_date, const int32_t &_remain_distance)
        {
            std::get< 0>(values_) = _service_distance;
            std::get< 1>(values_) = _service_duration;
            std::get< 2>(values_) = _service_onoff;
            std::get< 3>(values_) = _service_type;
            std::get< 4>(values_) = _service_state;
            std::get< 5>(values_) = _padding;
            std::get< 6>(values_) = _remain_date;
            std::get< 7>(values_) = _remain_distance;
        }
        inline const uint32_t &getService_distance() const { return std::get< 0>(values_); }
        inline void setService_distance(const uint32_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint32_t &getService_duration() const { return std::get< 1>(values_); }
        inline void setService_duration(const uint32_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint32_t &getService_onoff() const { return std::get< 2>(values_); }
        inline void setService_onoff(const uint32_t &_value) { std::get< 2>(values_) = _value; }
        inline const uint32_t &getService_type() const { return std::get< 3>(values_); }
        inline void setService_type(const uint32_t &_value) { std::get< 3>(values_) = _value; }
        inline const uint32_t &getService_state() const { return std::get< 4>(values_); }
        inline void setService_state(const uint32_t &_value) { std::get< 4>(values_) = _value; }
        inline const uint32_t &getPadding() const { return std::get< 5>(values_); }
        inline void setPadding(const uint32_t &_value) { std::get< 5>(values_) = _value; }
        inline const int32_t &getRemain_date() const { return std::get< 6>(values_); }
        inline void setRemain_date(const int32_t &_value) { std::get< 6>(values_) = _value; }
        inline const int32_t &getRemain_distance() const { return std::get< 7>(values_); }
        inline void setRemain_distance(const int32_t &_value) { std::get< 7>(values_) = _value; }
        inline bool operator==(const USMServiceContext& _other) const {
        return (getService_distance() == _other.getService_distance() && getService_duration() == _other.getService_duration() && getService_onoff() == _other.getService_onoff() && getService_type() == _other.getService_type() && getService_state() == _other.getService_state() && getPadding() == _other.getPadding() && getRemain_date() == _other.getRemain_date() && getRemain_distance() == _other.getRemain_distance());
        }
        inline bool operator!=(const USMServiceContext &_other) const {
            return !((*this) == _other);
        }
    
    };
    typedef CommonAPI::ByteBuffer CmdData;
    
    struct TabIndex : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            UNKNOWN = 0,
            TRIP = 1,
            TBT = 2,
            ASSIST = 3,
            USM = 4,
            INFO = 5
        };
    
        TabIndex()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::UNKNOWN)) {}
        TabIndex(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::UNKNOWN):
                case static_cast< int32_t>(Literal::TRIP):
                case static_cast< int32_t>(Literal::TBT):
                case static_cast< int32_t>(Literal::ASSIST):
                case static_cast< int32_t>(Literal::USM):
                case static_cast< int32_t>(Literal::INFO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TabIndex &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TabIndex &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TabIndex &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TabIndex &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TabIndex &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TabIndex &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    struct GroupTabInfo : CommonAPI::Struct< TabIndex, uint8_t, uint8_t, uint8_t> {
    
        GroupTabInfo()
        {
            std::get< 0>(values_) = TabIndex();
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
            std::get< 3>(values_) = 0u;
        }
        GroupTabInfo(const TabIndex &_tab_index, const uint8_t &_trip_page_index, const uint8_t &_tbt_page_index, const uint8_t &_assist_page_index)
        {
            std::get< 0>(values_) = _tab_index;
            std::get< 1>(values_) = _trip_page_index;
            std::get< 2>(values_) = _tbt_page_index;
            std::get< 3>(values_) = _assist_page_index;
        }
        inline const TabIndex &getTab_index() const { return std::get< 0>(values_); }
        inline void setTab_index(const TabIndex &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getTrip_page_index() const { return std::get< 1>(values_); }
        inline void setTrip_page_index(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getTbt_page_index() const { return std::get< 2>(values_); }
        inline void setTbt_page_index(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline const uint8_t &getAssist_page_index() const { return std::get< 3>(values_); }
        inline void setAssist_page_index(const uint8_t &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const GroupTabInfo& _other) const {
        return (getTab_index() == _other.getTab_index() && getTrip_page_index() == _other.getTrip_page_index() && getTbt_page_index() == _other.getTbt_page_index() && getAssist_page_index() == _other.getAssist_page_index());
        }
        inline bool operator!=(const GroupTabInfo &_other) const {
            return !((*this) == _other);
        }
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "proj.dcluster.McuManager.McuManagerTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct McuManagerTypes

} // namespace McuManager
} // namespace dcluster
} // namespace proj
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for EnumValueDisplayType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumValueDisplayType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumValueDisplayType& enumValueDisplayType) const {
            return static_cast< int32_t>(enumValueDisplayType);
        }
    };
    //Hash for EnumDrivingState
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState& enumDrivingState) const {
            return static_cast< int32_t>(enumDrivingState);
        }
    };
    //Hash for EnumLanguageType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumLanguageType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumLanguageType& enumLanguageType) const {
            return static_cast< int32_t>(enumLanguageType);
        }
    };
    //Hash for EnumAreaType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumAreaType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumAreaType& enumAreaType) const {
            return static_cast< int32_t>(enumAreaType);
        }
    };
    //Hash for EnumEngineType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEngineType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEngineType& enumEngineType) const {
            return static_cast< int32_t>(enumEngineType);
        }
    };
    //Hash for EnumSpeedoType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoType& enumSpeedoType) const {
            return static_cast< int32_t>(enumSpeedoType);
        }
    };
    //Hash for EnumMissionType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMissionType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMissionType& enumMissionType) const {
            return static_cast< int32_t>(enumMissionType);
        }
    };
    //Hash for EnumBodyType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumBodyType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumBodyType& enumBodyType) const {
            return static_cast< int32_t>(enumBodyType);
        }
    };
    //Hash for EnumPlatformType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPlatformType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPlatformType& enumPlatformType) const {
            return static_cast< int32_t>(enumPlatformType);
        }
    };
    //Hash for EnumStreerWheelKey
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumStreerWheelKey> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumStreerWheelKey& enumStreerWheelKey) const {
            return static_cast< int32_t>(enumStreerWheelKey);
        }
    };
    //Hash for EnumIGNState
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& enumIGNState) const {
            return static_cast< int32_t>(enumIGNState);
        }
    };
    //Hash for EnumSpeedoUnit
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit& enumSpeedoUnit) const {
            return static_cast< int32_t>(enumSpeedoUnit);
        }
    };
    //Hash for EnumTemperatureUnit
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTemperatureUnit> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTemperatureUnit& enumTemperatureUnit) const {
            return static_cast< int32_t>(enumTemperatureUnit);
        }
    };
    //Hash for EnumFuelUnit
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumFuelUnit> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumFuelUnit& enumFuelUnit) const {
            return static_cast< int32_t>(enumFuelUnit);
        }
    };
    //Hash for EnumDriveMode
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDriveMode> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDriveMode& enumDriveMode) const {
            return static_cast< int32_t>(enumDriveMode);
        }
    };
    //Hash for EnumPowerFlow
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow& enumPowerFlow) const {
            return static_cast< int32_t>(enumPowerFlow);
        }
    };
    //Hash for EnumTransmissionTempLevel
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel& enumTransmissionTempLevel) const {
            return static_cast< int32_t>(enumTransmissionTempLevel);
        }
    };
    //Hash for EnumTBTDisplayType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType& enumTBTDisplayType) const {
            return static_cast< int32_t>(enumTBTDisplayType);
        }
    };
    //Hash for EnumTBTPageState
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState& enumTBTPageState) const {
            return static_cast< int32_t>(enumTBTPageState);
        }
    };
    //Hash for EnumTBTPointType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType& enumTBTPointType) const {
            return static_cast< int32_t>(enumTBTPointType);
        }
    };
    //Hash for EnumTBTDistanceUnit
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDistanceUnit> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDistanceUnit& enumTBTDistanceUnit) const {
            return static_cast< int32_t>(enumTBTDistanceUnit);
        }
    };
    //Hash for EnumTBTTimeFormat
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTTimeFormat> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTTimeFormat& enumTBTTimeFormat) const {
            return static_cast< int32_t>(enumTBTTimeFormat);
        }
    };
    //Hash for EnumCruiseCtrlDisplayType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlDisplayType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlDisplayType& enumCruiseCtrlDisplayType) const {
            return static_cast< int32_t>(enumCruiseCtrlDisplayType);
        }
    };
    //Hash for EnumCruiseCtrlDisplayType2
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlDisplayType2> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlDisplayType2& enumCruiseCtrlDisplayType2) const {
            return static_cast< int32_t>(enumCruiseCtrlDisplayType2);
        }
    };
    //Hash for EnumCruiseCtrlSymbolType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlSymbolType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlSymbolType& enumCruiseCtrlSymbolType) const {
            return static_cast< int32_t>(enumCruiseCtrlSymbolType);
        }
    };
    //Hash for EnumCruiseCtrlSymbolStatus
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlSymbolStatus> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlSymbolStatus& enumCruiseCtrlSymbolStatus) const {
            return static_cast< int32_t>(enumCruiseCtrlSymbolStatus);
        }
    };
    //Hash for EnumCruiseCtrlDispColor
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlDispColor> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlDispColor& enumCruiseCtrlDispColor) const {
            return static_cast< int32_t>(enumCruiseCtrlDispColor);
        }
    };
    //Hash for EnumCruiseCtrlObjGapLevel
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlObjGapLevel> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlObjGapLevel& enumCruiseCtrlObjGapLevel) const {
            return static_cast< int32_t>(enumCruiseCtrlObjGapLevel);
        }
    };
    //Hash for EnumCruiseCtrlTauGapLevel
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlTauGapLevel> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlTauGapLevel& enumCruiseCtrlTauGapLevel) const {
            return static_cast< int32_t>(enumCruiseCtrlTauGapLevel);
        }
    };
    //Hash for EnumCruiseCtrlAutoDispType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlAutoDispType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumCruiseCtrlAutoDispType& enumCruiseCtrlAutoDispType) const {
            return static_cast< int32_t>(enumCruiseCtrlAutoDispType);
        }
    };
    //Hash for EnumSCCTargetDispType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSCCTargetDispType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSCCTargetDispType& enumSCCTargetDispType) const {
            return static_cast< int32_t>(enumSCCTargetDispType);
        }
    };
    //Hash for EnumADASDispType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASDispType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASDispType& enumADASDispType) const {
            return static_cast< int32_t>(enumADASDispType);
        }
    };
    //Hash for EnumADASVehicleId
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASVehicleId> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASVehicleId& enumADASVehicleId) const {
            return static_cast< int32_t>(enumADASVehicleId);
        }
    };
    //Hash for EnumADASVehicleStatus
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASVehicleStatus> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASVehicleStatus& enumADASVehicleStatus) const {
            return static_cast< int32_t>(enumADASVehicleStatus);
        }
    };
    //Hash for EnumADASLaneType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASLaneType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASLaneType& enumADASLaneType) const {
            return static_cast< int32_t>(enumADASLaneType);
        }
    };
    //Hash for EnumADASLCAvailStatus
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASLCAvailStatus> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASLCAvailStatus& enumADASLCAvailStatus) const {
            return static_cast< int32_t>(enumADASLCAvailStatus);
        }
    };
    //Hash for EnumADASLaneActive
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASLaneActive> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumADASLaneActive& enumADASLaneActive) const {
            return static_cast< int32_t>(enumADASLaneActive);
        }
    };
    //Hash for EnumLaneContentsType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumLaneContentsType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumLaneContentsType& enumLaneContentsType) const {
            return static_cast< int32_t>(enumLaneContentsType);
        }
    };
    //Hash for EnumLaneDisplayType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumLaneDisplayType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumLaneDisplayType& enumLaneDisplayType) const {
            return static_cast< int32_t>(enumLaneDisplayType);
        }
    };
    //Hash for EnumLaneState
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumLaneState> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumLaneState& enumLaneState) const {
            return static_cast< int32_t>(enumLaneState);
        }
    };
    //Hash for EnumDAWDisplayType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDAWDisplayType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDAWDisplayType& enumDAWDisplayType) const {
            return static_cast< int32_t>(enumDAWDisplayType);
        }
    };
    //Hash for EnumISLWDisplayType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumISLWDisplayType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumISLWDisplayType& enumISLWDisplayType) const {
            return static_cast< int32_t>(enumISLWDisplayType);
        }
    };
    //Hash for EnumISLWProhibitionType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumISLWProhibitionType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumISLWProhibitionType& enumISLWProhibitionType) const {
            return static_cast< int32_t>(enumISLWProhibitionType);
        }
    };
    //Hash for EnumISLWCondSignOptionType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumISLWCondSignOptionType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumISLWCondSignOptionType& enumISLWCondSignOptionType) const {
            return static_cast< int32_t>(enumISLWCondSignOptionType);
        }
    };
    //Hash for EnumTPMSDisplayType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTPMSDisplayType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTPMSDisplayType& enumTPMSDisplayType) const {
            return static_cast< int32_t>(enumTPMSDisplayType);
        }
    };
    //Hash for EnumTPMSPressureUnit
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTPMSPressureUnit> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTPMSPressureUnit& enumTPMSPressureUnit) const {
            return static_cast< int32_t>(enumTPMSPressureUnit);
        }
    };
    //Hash for EnumAWDAngle
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumAWDAngle> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumAWDAngle& enumAWDAngle) const {
            return static_cast< int32_t>(enumAWDAngle);
        }
    };
    //Hash for EnumEnergyFlowDisplayType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEnergyFlowDisplayType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEnergyFlowDisplayType& enumEnergyFlowDisplayType) const {
            return static_cast< int32_t>(enumEnergyFlowDisplayType);
        }
    };
    //Hash for EnumMyDrvModeDispType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMyDrvModeDispType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMyDrvModeDispType& enumMyDrvModeDispType) const {
            return static_cast< int32_t>(enumMyDrvModeDispType);
        }
    };
    //Hash for EnumMyDrvModeFocus
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMyDrvModeFocus> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMyDrvModeFocus& enumMyDrvModeFocus) const {
            return static_cast< int32_t>(enumMyDrvModeFocus);
        }
    };
    //Hash for EnumGearState
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumGearState> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumGearState& enumGearState) const {
            return static_cast< int32_t>(enumGearState);
        }
    };
    //Hash for EnumGearTarget
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumGearTarget> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumGearTarget& enumGearTarget) const {
            return static_cast< int32_t>(enumGearTarget);
        }
    };
    //Hash for EnumGearArrow
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumGearArrow> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumGearArrow& enumGearArrow) const {
            return static_cast< int32_t>(enumGearArrow);
        }
    };
    //Hash for EnumGearBlinkState
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumGearBlinkState> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumGearBlinkState& enumGearBlinkState) const {
            return static_cast< int32_t>(enumGearBlinkState);
        }
    };
    //Hash for EnumContentsCCDispType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumContentsCCDispType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumContentsCCDispType& enumContentsCCDispType) const {
            return static_cast< int32_t>(enumContentsCCDispType);
        }
    };
    //Hash for EnumContentsCoastingDispType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumContentsCoastingDispType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumContentsCoastingDispType& enumContentsCoastingDispType) const {
            return static_cast< int32_t>(enumContentsCoastingDispType);
        }
    };
    //Hash for EnumDISDispType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDISDispType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDISDispType& enumDISDispType) const {
            return static_cast< int32_t>(enumDISDispType);
        }
    };
    //Hash for EnumEcoPwrDispState
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState& enumEcoPwrDispState) const {
            return static_cast< int32_t>(enumEcoPwrDispState);
        }
    };
    //Hash for EnumContentsRSBRState
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumContentsRSBRState> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumContentsRSBRState& enumContentsRSBRState) const {
            return static_cast< int32_t>(enumContentsRSBRState);
        }
    };
    //Hash for EnumContentsSpdLimitDispType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumContentsSpdLimitDispType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumContentsSpdLimitDispType& enumContentsSpdLimitDispType) const {
            return static_cast< int32_t>(enumContentsSpdLimitDispType);
        }
    };
    //Hash for EnumEventDisplayType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEventDisplayType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEventDisplayType& enumEventDisplayType) const {
            return static_cast< int32_t>(enumEventDisplayType);
        }
    };
    //Hash for EnumFactoryScreenType
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumFactoryScreenType> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumFactoryScreenType& enumFactoryScreenType) const {
            return static_cast< int32_t>(enumFactoryScreenType);
        }
    };
    //Hash for EnumEventID
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEventID> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEventID& enumEventID) const {
            return static_cast< int32_t>(enumEventID);
        }
    };
    //Hash for GroupLevel
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::GroupLevel> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::GroupLevel& groupLevel) const {
            return static_cast< int32_t>(groupLevel);
        }
    };
    //Hash for EnumMasterWarnCmd
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd& enumMasterWarnCmd) const {
            return static_cast< int32_t>(enumMasterWarnCmd);
        }
    };
    //Hash for USM_DRIVER_ASSIST_SCC_REACTION_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_SCC_REACTION_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_SCC_REACTION_VALUE& uSM_DRIVER_ASSIST_SCC_REACTION_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_SCC_REACTION_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE& uSM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_DRIVING_ASSIST_LEADING_DEPARTURE_ALERT_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE& uSM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_DRIVING_ASSIST_LANE_FOLLOWING_ASSIST_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE& uSM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_DRIVING_ASSIST_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE& uSM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_SPEED_ZONE_SLOWDOWN_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE& uSM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_DRIVING_ASSIST_HIGHWAY_AUTO_CURVE_SLOWDOWN_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE& uSM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_DRIVING_ASSIST_SPEED_LIMIT_WARNING_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE& uSM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_DRIVER_ATTENTION_WARNING_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_WARNING_TIMING_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_WARNING_TIMING_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_WARNING_TIMING_VALUE& uSM_DRIVER_ASSIST_WARNING_TIMING_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_WARNING_TIMING_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_WARNING_VOLUME_VALUE& uSM_DRIVER_ASSIST_WARNING_VOLUME_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_WARNING_VOLUME_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_LANE_SAFETY_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_LANE_SAFETY_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_LANE_SAFETY_VALUE& uSM_DRIVER_ASSIST_LANE_SAFETY_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_LANE_SAFETY_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE& uSM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_LANE_SAFETY_MODE_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE& uSM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_FORWARD_SAFETY_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE& uSM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SPOT_VIEW_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE& uSM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_SAFETY_EXIT_ASSIST_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE& uSM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_WARNING_ONLY_VALUE);
        }
    };
    //Hash for USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE& uSM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE) const {
            return static_cast< int32_t>(uSM_DRIVER_ASSIST_BLIND_SPOT_SAFETY_REAR_CROSS_TRAFFIC_SAFETY_VALUE);
        }
    };
    //Hash for USM_DOOR_AUTO_LOCK_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_AUTO_LOCK_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_AUTO_LOCK_VALUE& uSM_DOOR_AUTO_LOCK_VALUE) const {
            return static_cast< int32_t>(uSM_DOOR_AUTO_LOCK_VALUE);
        }
    };
    //Hash for USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE& uSM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE) const {
            return static_cast< int32_t>(uSM_DOOR_AUTO_UNLOCK_KEY_OR_POWER_VALUE);
        }
    };
    //Hash for USM_DOOR_AUTO_UNLOCK_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_AUTO_UNLOCK_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_AUTO_UNLOCK_VALUE& uSM_DOOR_AUTO_UNLOCK_VALUE) const {
            return static_cast< int32_t>(uSM_DOOR_AUTO_UNLOCK_VALUE);
        }
    };
    //Hash for USM_DOOR_HORN_FEEDBACK_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_HORN_FEEDBACK_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_HORN_FEEDBACK_VALUE& uSM_DOOR_HORN_FEEDBACK_VALUE) const {
            return static_cast< int32_t>(uSM_DOOR_HORN_FEEDBACK_VALUE);
        }
    };
    //Hash for USM_DOOR_POWER_TAILGATE_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_POWER_TAILGATE_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_POWER_TAILGATE_VALUE& uSM_DOOR_POWER_TAILGATE_VALUE) const {
            return static_cast< int32_t>(uSM_DOOR_POWER_TAILGATE_VALUE);
        }
    };
    //Hash for USM_DOOR_POWER_TAILGATE_SPEED_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_POWER_TAILGATE_SPEED_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_POWER_TAILGATE_SPEED_VALUE& uSM_DOOR_POWER_TAILGATE_SPEED_VALUE) const {
            return static_cast< int32_t>(uSM_DOOR_POWER_TAILGATE_SPEED_VALUE);
        }
    };
    //Hash for USM_DOOR_SMART_TAILGATE_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_SMART_TAILGATE_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_DOOR_SMART_TAILGATE_VALUE& uSM_DOOR_SMART_TAILGATE_VALUE) const {
            return static_cast< int32_t>(uSM_DOOR_SMART_TAILGATE_VALUE);
        }
    };
    //Hash for USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE& uSM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE) const {
            return static_cast< int32_t>(uSM_LIGHTS_ONE_TOUCH_TURN_SIGNAL_VALUE);
        }
    };
    //Hash for USM_LIGHTS_AMBIENT_LIGHT_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LIGHTS_AMBIENT_LIGHT_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LIGHTS_AMBIENT_LIGHT_VALUE& uSM_LIGHTS_AMBIENT_LIGHT_VALUE) const {
            return static_cast< int32_t>(uSM_LIGHTS_AMBIENT_LIGHT_VALUE);
        }
    };
    //Hash for USM_LIGHTS_HEADLIGHT_DELAY_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LIGHTS_HEADLIGHT_DELAY_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LIGHTS_HEADLIGHT_DELAY_VALUE& uSM_LIGHTS_HEADLIGHT_DELAY_VALUE) const {
            return static_cast< int32_t>(uSM_LIGHTS_HEADLIGHT_DELAY_VALUE);
        }
    };
    //Hash for USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LIGHTS_HIGH_BEAM_ASSIST_VALUE& uSM_LIGHTS_HIGH_BEAM_ASSIST_VALUE) const {
            return static_cast< int32_t>(uSM_LIGHTS_HIGH_BEAM_ASSIST_VALUE);
        }
    };
    //Hash for USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE& uSM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE) const {
            return static_cast< int32_t>(uSM_SOUND_CLUSTER_VOICE_GUIDANCE_VOLUME_VALUE);
        }
    };
    //Hash for USM_SOUND_PARK_ASSIST_VOLUME_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_SOUND_PARK_ASSIST_VOLUME_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_SOUND_PARK_ASSIST_VOLUME_VALUE& uSM_SOUND_PARK_ASSIST_VOLUME_VALUE) const {
            return static_cast< int32_t>(uSM_SOUND_PARK_ASSIST_VOLUME_VALUE);
        }
    };
    //Hash for USM_SOUND_WELCOME_SOUND_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_SOUND_WELCOME_SOUND_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_SOUND_WELCOME_SOUND_VALUE& uSM_SOUND_WELCOME_SOUND_VALUE) const {
            return static_cast< int32_t>(uSM_SOUND_WELCOME_SOUND_VALUE);
        }
    };
    //Hash for USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE& uSM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE) const {
            return static_cast< int32_t>(uSM_CONVENIENCE_SEAT_EASY_ACCESS_VALUE);
        }
    };
    //Hash for USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE& uSM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE) const {
            return static_cast< int32_t>(uSM_CONVENIENCE_WELCOME_MIRROR_LIGHT_TITLE_VALUE);
        }
    };
    //Hash for USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE& uSM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE) const {
            return static_cast< int32_t>(uSM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DOOR_UNLOCK_VALUE);
        }
    };
    //Hash for USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE& uSM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE) const {
            return static_cast< int32_t>(uSM_CONVENIENCE_WELCOME_MIRROR_LIGHT_ON_DRIVER_APPROACH_VALUE);
        }
    };
    //Hash for USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE& uSM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE) const {
            return static_cast< int32_t>(uSM_CONVENIENCE_MIRROR_AUTO_FOLDING_VALUE);
        }
    };
    //Hash for USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE& uSM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE) const {
            return static_cast< int32_t>(uSM_CONVENIENCE_WIRELESS_CHARGING_SYSTEM_VALUE);
        }
    };
    //Hash for USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE& uSM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE) const {
            return static_cast< int32_t>(uSM_CONVENIENCE_TRAFFIC_INFORMATION_VALUE);
        }
    };
    //Hash for USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE& uSM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE) const {
            return static_cast< int32_t>(uSM_CONVENIENCE_WIPER_LIGHTS_DISPLAY_VALUE);
        }
    };
    //Hash for USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE& uSM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE) const {
            return static_cast< int32_t>(uSM_CONVENIENCE_AUTO_REAR_WIPER_IN_R_VALUE);
        }
    };
    //Hash for USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE& uSM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE) const {
            return static_cast< int32_t>(uSM_CONVENIENCE_GEAR_POSITION_POPUP_VALUE);
        }
    };
    //Hash for USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_CONVENIENCE_ICY_ROAD_WARNING_VALUE& uSM_CONVENIENCE_ICY_ROAD_WARNING_VALUE) const {
            return static_cast< int32_t>(uSM_CONVENIENCE_ICY_ROAD_WARNING_VALUE);
        }
    };
    //Hash for USM_SERVICE_INTERVAL_MODE_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_SERVICE_INTERVAL_MODE_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_SERVICE_INTERVAL_MODE_VALUE& uSM_SERVICE_INTERVAL_MODE_VALUE) const {
            return static_cast< int32_t>(uSM_SERVICE_INTERVAL_MODE_VALUE);
        }
    };
    //Hash for USM_SERVICE_INTERVAL_ENABLE_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_SERVICE_INTERVAL_ENABLE_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_SERVICE_INTERVAL_ENABLE_VALUE& uSM_SERVICE_INTERVAL_ENABLE_VALUE) const {
            return static_cast< int32_t>(uSM_SERVICE_INTERVAL_ENABLE_VALUE);
        }
    };
    //Hash for USM_OTHER_FUEL_ECONOMY_RESET_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_FUEL_ECONOMY_RESET_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_FUEL_ECONOMY_RESET_VALUE& uSM_OTHER_FUEL_ECONOMY_RESET_VALUE) const {
            return static_cast< int32_t>(uSM_OTHER_FUEL_ECONOMY_RESET_VALUE);
        }
    };
    //Hash for USM_OTHER_FUEL_ECONOMY_UNIT_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_FUEL_ECONOMY_UNIT_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_FUEL_ECONOMY_UNIT_VALUE& uSM_OTHER_FUEL_ECONOMY_UNIT_VALUE) const {
            return static_cast< int32_t>(uSM_OTHER_FUEL_ECONOMY_UNIT_VALUE);
        }
    };
    //Hash for USM_OTHER_TEMPERATURE_UNIT_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_TEMPERATURE_UNIT_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_TEMPERATURE_UNIT_VALUE& uSM_OTHER_TEMPERATURE_UNIT_VALUE) const {
            return static_cast< int32_t>(uSM_OTHER_TEMPERATURE_UNIT_VALUE);
        }
    };
    //Hash for USM_OTHER_TIRE_PRESSURE_UNIT_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_TIRE_PRESSURE_UNIT_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_TIRE_PRESSURE_UNIT_VALUE& uSM_OTHER_TIRE_PRESSURE_UNIT_VALUE) const {
            return static_cast< int32_t>(uSM_OTHER_TIRE_PRESSURE_UNIT_VALUE);
        }
    };
    //Hash for USM_OTHER_SPEED_UNIT_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_SPEED_UNIT_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_SPEED_UNIT_VALUE& uSM_OTHER_SPEED_UNIT_VALUE) const {
            return static_cast< int32_t>(uSM_OTHER_SPEED_UNIT_VALUE);
        }
    };
    //Hash for USM_OTHER_TORQUE_UNIT_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_TORQUE_UNIT_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_TORQUE_UNIT_VALUE& uSM_OTHER_TORQUE_UNIT_VALUE) const {
            return static_cast< int32_t>(uSM_OTHER_TORQUE_UNIT_VALUE);
        }
    };
    //Hash for USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE& uSM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE) const {
            return static_cast< int32_t>(uSM_OTHER_TURBO_BOOST_PRESSURE_UNIT_VALUE);
        }
    };
    //Hash for USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE& uSM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE) const {
            return static_cast< int32_t>(uSM_ECO_VEHICLE_GREEN_ZONE_EV_DRIVE_VALUE);
        }
    };
    //Hash for USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE& uSM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE) const {
            return static_cast< int32_t>(uSM_ECO_VEHICLE_COASTING_GUIDE_ENABLE_VALUE);
        }
    };
    //Hash for USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE& uSM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE) const {
            return static_cast< int32_t>(uSM_ECO_VEHICLE_COASTING_GUIDE_SOUND_VALUE);
        }
    };
    //Hash for USM_ECO_VEHICLE_START_COASTING_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_START_COASTING_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_START_COASTING_VALUE& uSM_ECO_VEHICLE_START_COASTING_VALUE) const {
            return static_cast< int32_t>(uSM_ECO_VEHICLE_START_COASTING_VALUE);
        }
    };
    //Hash for USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE& uSM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE) const {
            return static_cast< int32_t>(uSM_ECO_VEHICLE_CHARGING_CONNECTOR_LOCKING_MODE_VALUE);
        }
    };
    //Hash for USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION& uSM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION) const {
            return static_cast< int32_t>(uSM_ECO_VEHICLE_CHARGING_CONNECTOR_CONDITION);
        }
    };
    //Hash for USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE& uSM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE) const {
            return static_cast< int32_t>(uSM_ECO_VEHICLE_AUXILIARY_BATTERY_SAVER_PLUS_VALUE);
        }
    };
    //Hash for USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE& uSM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE) const {
            return static_cast< int32_t>(uSM_ECO_VEHICLE_VOLUME_CONTROL_FUNCTION_FOR_VESS_VALUE);
        }
    };
    //Hash for USM_LANGUAGE_VALUE
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE& uSM_LANGUAGE_VALUE) const {
            return static_cast< int32_t>(uSM_LANGUAGE_VALUE);
        }
    };
    //Hash for USM_THEME_STATUS
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_THEME_STATUS> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_THEME_STATUS& uSM_THEME_STATUS) const {
            return static_cast< int32_t>(uSM_THEME_STATUS);
        }
    };
    //Hash for USM_THEME_AUTOSET
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_THEME_AUTOSET> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_THEME_AUTOSET& uSM_THEME_AUTOSET) const {
            return static_cast< int32_t>(uSM_THEME_AUTOSET);
        }
    };
    //Hash for USMItemIndex
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItemIndex> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItemIndex& uSMItemIndex) const {
            return static_cast< int32_t>(uSMItemIndex);
        }
    };
    //Hash for SetUSMResult
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::SetUSMResult> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::SetUSMResult& setUSMResult) const {
            return static_cast< int32_t>(setUSMResult);
        }
    };
    //Hash for TabIndex
    template<>
    struct hash< ::v1::proj::dcluster::McuManager::McuManagerTypes::TabIndex> {
        inline size_t operator()(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TabIndex& tabIndex) const {
            return static_cast< int32_t>(tabIndex);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_Types_HPP_
